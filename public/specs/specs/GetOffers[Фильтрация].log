12:28:47.199 [Test worker] WARN  i.g.a.c.e.exam.core.ContentVerifier.verify-gIAlu-s - Content verification error
net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory$JsonAssertError: JSON documents are different:
Array "offers" has different length, expected: <2> but was: <0>.
Array "offers" has different content. Missing values: [{"security":{"id":"ISIN1","isin":"ISIN1"},"date":"2000-01-01","type":"type1","optionType":"optionType1","openDate":"2000-01-01","closeDate":"2000-01-01","price":1,"description":"descr1"}, {"security":{"id":"ISIN1","isin":"ISIN1"},"date":"2000-03-01"}], extra values: [], expected: <[{"security":{"id":"ISIN1","isin":"ISIN1"},"date":"2000-01-01","type":"type1","optionType":"optionType1","openDate":"2000-01-01","closeDate":"2000-01-01","price":1,"description":"descr1"},{"security":{"id":"ISIN1","isin":"ISIN1"},"date":"2000-03-01"}]> but was: <[]>
Different value found in node "total", expected: <2> but was: <0>.

	at net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory.createException(ExceptionFactory.java:37)
	at net.javacrumbs.jsonunit.core.internal.ExceptionUtils.createException(ExceptionUtils.java:45)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:617)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:612)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonPartEquals(JsonAssert.java:84)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals(JsonAssert.java:69)
	at io.github.adven27.concordion.extensions.exam.core.JsonVerifier.assertThat(Content.kt:181)
	at io.github.adven27.concordion.extensions.exam.core.ContentVerifier$Default.verify-gIAlu-s(Content.kt:122)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:411)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:394)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.execute(RestCommands.kt:275)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at io.github.adven27.concordion.extensions.exam.core.commands.ExamCommand.execute(ExamCommand.kt:62)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at org.concordion.internal.command.ExampleCommand.execute(ExampleCommand.java:49)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.internal.XMLSpecification.processNode(XMLSpecification.java:60)
	at org.concordion.internal.XMLSpecification.processExample(XMLSpecification.java:76)
	at org.concordion.Concordion.processExample(Concordion.java:92)
	at org.concordion.internal.FixtureRunner.run(FixtureRunner.java:41)
	at org.concordion.integration.junit4.ConcordionRunner.invoke(ConcordionRunner.java:207)
	at org.concordion.integration.junit4.ConcordionRunner$1.invoke(ConcordionRunner.java:31)
	at org.concordion.integration.junit4.ConcordionFrameworkMethod.invokeExplosively(ConcordionFrameworkMethod.java:58)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:191)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:23)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.concordion.integration.junit4.ConcordionRunner.run(ConcordionRunner.java:150)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:110)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:90)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:85)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy2/jdk.proxy2.$Proxy5.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
12:28:47.216 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "cc2cf08f87a8ce13",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/offers?isins=ISIN1",
  "host" : "localhost",
  "path" : "/securities/offers",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.217 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "cc2cf08f87a8ce13",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.221 [Test worker] WARN  i.g.a.c.e.exam.core.ContentVerifier.verify-gIAlu-s - Content verification error
net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory$JsonAssertError: JSON documents are different:
Array "offers" has different length, expected: <2> but was: <0>.
Array "offers" has different content. Missing values: [{"security":{"id":"ISIN1","isin":"ISIN1"},"date":"2000-01-01","type":"type1","optionType":"optionType1","openDate":"2000-01-01","closeDate":"2000-01-01","price":1,"description":"descr1"}, {"security":{"id":"ISIN1","isin":"ISIN1"},"date":"2000-03-01"}], extra values: [], expected: <[{"security":{"id":"ISIN1","isin":"ISIN1"},"date":"2000-01-01","type":"type1","optionType":"optionType1","openDate":"2000-01-01","closeDate":"2000-01-01","price":1,"description":"descr1"},{"security":{"id":"ISIN1","isin":"ISIN1"},"date":"2000-03-01"}]> but was: <[]>
Different value found in node "total", expected: <2> but was: <0>.

	at net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory.createException(ExceptionFactory.java:37)
	at net.javacrumbs.jsonunit.core.internal.ExceptionUtils.createException(ExceptionUtils.java:45)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:617)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:612)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonPartEquals(JsonAssert.java:84)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals(JsonAssert.java:69)
	at io.github.adven27.concordion.extensions.exam.core.JsonVerifier.assertThat(Content.kt:181)
	at io.github.adven27.concordion.extensions.exam.core.ContentVerifier$Default.verify-gIAlu-s(Content.kt:122)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:411)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:394)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.execute(RestCommands.kt:275)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at io.github.adven27.concordion.extensions.exam.core.commands.ExamCommand.execute(ExamCommand.kt:62)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at org.concordion.internal.command.ExampleCommand.execute(ExampleCommand.java:49)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.internal.XMLSpecification.processNode(XMLSpecification.java:60)
	at org.concordion.internal.XMLSpecification.processExample(XMLSpecification.java:76)
	at org.concordion.Concordion.processExample(Concordion.java:92)
	at org.concordion.internal.FixtureRunner.run(FixtureRunner.java:41)
	at org.concordion.integration.junit4.ConcordionRunner.invoke(ConcordionRunner.java:207)
	at org.concordion.integration.junit4.ConcordionRunner$1.invoke(ConcordionRunner.java:31)
	at org.concordion.integration.junit4.ConcordionFrameworkMethod.invokeExplosively(ConcordionFrameworkMethod.java:58)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:191)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:23)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.concordion.integration.junit4.ConcordionRunner.run(ConcordionRunner.java:150)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:110)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:90)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:85)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy2/jdk.proxy2.$Proxy5.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
12:28:47.237 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "fbb95e0d0b3b9258",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/offers?from=2000-02-01",
  "host" : "localhost",
  "path" : "/securities/offers",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.238 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "fbb95e0d0b3b9258",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.240 [Test worker] WARN  i.g.a.c.e.exam.core.ContentVerifier.verify-gIAlu-s - Content verification error
net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory$JsonAssertError: JSON documents are different:
Array "offers" has different length, expected: <2> but was: <0>.
Array "offers" has different content. Missing values: [{"security":{"id":"ISIN2","isin":"ISIN2"},"date":"2000-02-01","type":"type2","optionType":"optionType2","openDate":"2000-01-02","closeDate":"2000-01-02","price":2,"description":"descr2"}, {"security":{"id":"ISIN1","isin":"ISIN1"},"date":"2000-03-01"}], extra values: [], expected: <[{"security":{"id":"ISIN2","isin":"ISIN2"},"date":"2000-02-01","type":"type2","optionType":"optionType2","openDate":"2000-01-02","closeDate":"2000-01-02","price":2,"description":"descr2"},{"security":{"id":"ISIN1","isin":"ISIN1"},"date":"2000-03-01"}]> but was: <[]>
Different value found in node "total", expected: <2> but was: <0>.

	at net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory.createException(ExceptionFactory.java:37)
	at net.javacrumbs.jsonunit.core.internal.ExceptionUtils.createException(ExceptionUtils.java:45)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:617)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:612)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonPartEquals(JsonAssert.java:84)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals(JsonAssert.java:69)
	at io.github.adven27.concordion.extensions.exam.core.JsonVerifier.assertThat(Content.kt:181)
	at io.github.adven27.concordion.extensions.exam.core.ContentVerifier$Default.verify-gIAlu-s(Content.kt:122)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:411)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:394)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.execute(RestCommands.kt:275)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at io.github.adven27.concordion.extensions.exam.core.commands.ExamCommand.execute(ExamCommand.kt:62)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at org.concordion.internal.command.ExampleCommand.execute(ExampleCommand.java:49)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.internal.XMLSpecification.processNode(XMLSpecification.java:60)
	at org.concordion.internal.XMLSpecification.processExample(XMLSpecification.java:76)
	at org.concordion.Concordion.processExample(Concordion.java:92)
	at org.concordion.internal.FixtureRunner.run(FixtureRunner.java:41)
	at org.concordion.integration.junit4.ConcordionRunner.invoke(ConcordionRunner.java:207)
	at org.concordion.integration.junit4.ConcordionRunner$1.invoke(ConcordionRunner.java:31)
	at org.concordion.integration.junit4.ConcordionFrameworkMethod.invokeExplosively(ConcordionFrameworkMethod.java:58)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:191)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:23)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.concordion.integration.junit4.ConcordionRunner.run(ConcordionRunner.java:150)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:110)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:90)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:85)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy2/jdk.proxy2.$Proxy5.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
12:28:47.252 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b4f29fc133f34fe5",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/offers?to=2000-02-01",
  "host" : "localhost",
  "path" : "/securities/offers",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.252 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b4f29fc133f34fe5",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.254 [Test worker] WARN  i.g.a.c.e.exam.core.ContentVerifier.verify-gIAlu-s - Content verification error
net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory$JsonAssertError: JSON documents are different:
Array "offers" has different length, expected: <2> but was: <0>.
Array "offers" has different content. Missing values: [{"security":{"id":"ISIN1","isin":"ISIN1"},"date":"2000-01-01","type":"type1","optionType":"optionType1","openDate":"2000-01-01","closeDate":"2000-01-01","price":1,"description":"descr1"}, {"security":{"id":"ISIN2","isin":"ISIN2"},"date":"2000-02-01","type":"type2","optionType":"optionType2","openDate":"2000-01-02","closeDate":"2000-01-02","price":2,"description":"descr2"}], extra values: [], expected: <[{"security":{"id":"ISIN1","isin":"ISIN1"},"date":"2000-01-01","type":"type1","optionType":"optionType1","openDate":"2000-01-01","closeDate":"2000-01-01","price":1,"description":"descr1"},{"security":{"id":"ISIN2","isin":"ISIN2"},"date":"2000-02-01","type":"type2","optionType":"optionType2","openDate":"2000-01-02","closeDate":"2000-01-02","price":2,"description":"descr2"}]> but was: <[]>
Different value found in node "total", expected: <2> but was: <0>.

	at net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory.createException(ExceptionFactory.java:37)
	at net.javacrumbs.jsonunit.core.internal.ExceptionUtils.createException(ExceptionUtils.java:45)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:617)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:612)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonPartEquals(JsonAssert.java:84)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals(JsonAssert.java:69)
	at io.github.adven27.concordion.extensions.exam.core.JsonVerifier.assertThat(Content.kt:181)
	at io.github.adven27.concordion.extensions.exam.core.ContentVerifier$Default.verify-gIAlu-s(Content.kt:122)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:411)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:394)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.execute(RestCommands.kt:275)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at io.github.adven27.concordion.extensions.exam.core.commands.ExamCommand.execute(ExamCommand.kt:62)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at org.concordion.internal.command.ExampleCommand.execute(ExampleCommand.java:49)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.internal.XMLSpecification.processNode(XMLSpecification.java:60)
	at org.concordion.internal.XMLSpecification.processExample(XMLSpecification.java:76)
	at org.concordion.Concordion.processExample(Concordion.java:92)
	at org.concordion.internal.FixtureRunner.run(FixtureRunner.java:41)
	at org.concordion.integration.junit4.ConcordionRunner.invoke(ConcordionRunner.java:207)
	at org.concordion.integration.junit4.ConcordionRunner$1.invoke(ConcordionRunner.java:31)
	at org.concordion.integration.junit4.ConcordionFrameworkMethod.invokeExplosively(ConcordionFrameworkMethod.java:58)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:191)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:23)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.concordion.integration.junit4.ConcordionRunner.run(ConcordionRunner.java:150)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:110)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:90)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:85)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy2/jdk.proxy2.$Proxy5.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
12:28:47.266 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "9a281927ae54a7d7",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/offers?from=2000-01-02&to=2000-02-02",
  "host" : "localhost",
  "path" : "/securities/offers",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.266 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "9a281927ae54a7d7",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.268 [Test worker] WARN  i.g.a.c.e.exam.core.ContentVerifier.verify-gIAlu-s - Content verification error
net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory$JsonAssertError: JSON documents are different:
Array "offers" has different length, expected: <1> but was: <0>.
Array "offers" has different content. Missing values: [{"security":{"id":"ISIN2","isin":"ISIN2"},"date":"2000-02-01","type":"type2","optionType":"optionType2","openDate":"2000-01-02","closeDate":"2000-01-02","price":2,"description":"descr2"}], extra values: [], expected: <[{"security":{"id":"ISIN2","isin":"ISIN2"},"date":"2000-02-01","type":"type2","optionType":"optionType2","openDate":"2000-01-02","closeDate":"2000-01-02","price":2,"description":"descr2"}]> but was: <[]>
Different value found in node "total", expected: <1> but was: <0>.

	at net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory.createException(ExceptionFactory.java:37)
	at net.javacrumbs.jsonunit.core.internal.ExceptionUtils.createException(ExceptionUtils.java:45)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:617)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:612)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonPartEquals(JsonAssert.java:84)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals(JsonAssert.java:69)
	at io.github.adven27.concordion.extensions.exam.core.JsonVerifier.assertThat(Content.kt:181)
	at io.github.adven27.concordion.extensions.exam.core.ContentVerifier$Default.verify-gIAlu-s(Content.kt:122)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:411)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:394)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.execute(RestCommands.kt:275)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at io.github.adven27.concordion.extensions.exam.core.commands.ExamCommand.execute(ExamCommand.kt:62)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at org.concordion.internal.command.ExampleCommand.execute(ExampleCommand.java:49)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.internal.XMLSpecification.processNode(XMLSpecification.java:60)
	at org.concordion.internal.XMLSpecification.processExample(XMLSpecification.java:76)
	at org.concordion.Concordion.processExample(Concordion.java:92)
	at org.concordion.internal.FixtureRunner.run(FixtureRunner.java:41)
	at org.concordion.integration.junit4.ConcordionRunner.invoke(ConcordionRunner.java:207)
	at org.concordion.integration.junit4.ConcordionRunner$1.invoke(ConcordionRunner.java:31)
	at org.concordion.integration.junit4.ConcordionFrameworkMethod.invokeExplosively(ConcordionFrameworkMethod.java:58)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:191)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:23)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.concordion.integration.junit4.ConcordionRunner.run(ConcordionRunner.java:150)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:110)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:90)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:85)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy2/jdk.proxy2.$Proxy5.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
12:28:47.411 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f60cae5934402520",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/offers?securityIds=",
  "host" : "localhost",
  "path" : "/securities/offers",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.411 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f60cae5934402520",
  "duration" : 74,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"securityIds","message":"size must be between 1 and 100"}]}
}
12:28:47.421 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "fc75df6ef9700290",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/offers?isins=",
  "host" : "localhost",
  "path" : "/securities/offers",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.422 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "fc75df6ef9700290",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"isins","message":"size must be between 1 and 100"}]}
}
12:28:47.431 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a538cd0d75b7d2b7",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/offers?from=WRONG",
  "host" : "localhost",
  "path" : "/securities/offers",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.431 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a538cd0d75b7d2b7",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"Field value rejected: WRONG"}]}
}
12:28:47.440 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "fc005b8db8698d2e",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/offers?to=WRONG",
  "host" : "localhost",
  "path" : "/securities/offers",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.441 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "fc005b8db8698d2e",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"to","message":"Field value rejected: WRONG"}]}
}
12:28:47.551 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a416b8a030134b90",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/registries",
  "host" : "localhost",
  "path" : "/securities/registries",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.552 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a416b8a030134b90",
  "duration" : 15,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.636 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b5f9a0723595a1da",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/registries/moex-high-tech/records",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.637 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b5f9a0723595a1da",
  "duration" : 20,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.651 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b1cddefac9f300f9",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/registries/moex-high-tech/records?isin=ISIN5",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.651 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b1cddefac9f300f9",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.665 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f0344c4c39b27e6b",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/registries/moex-high-tech/records?from=2020-01-01",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.666 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f0344c4c39b27e6b",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.679 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "db2d48407a8b29be",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/registries/moex-high-tech/records?to=2022-01-01",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.680 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "db2d48407a8b29be",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.694 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "fffd90949cda8ff8",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/registries/moex-high-tech/records?from=2010-01-01&to=2022-01-01",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.694 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "fffd90949cda8ff8",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.740 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "d0ec7c2132f93981",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/registries/moex-high-tech/records?size=2",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.741 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "d0ec7c2132f93981",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.754 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "eeb725fcb9813fc5",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/registries/moex-high-tech/records?page=0&size=4",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.754 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "eeb725fcb9813fc5",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.766 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "de19c7b02c3f3b1e",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/registries/moex-high-tech/records?page=1&size=4",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.767 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "de19c7b02c3f3b1e",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.778 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a191e2c31f135c0d",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/registries/moex-high-tech/records?page=2&size=4",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.778 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a191e2c31f135c0d",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:47.947 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "9325321b5e069042",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:47.947 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "9325321b5e069042",
  "duration" : 51,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.081 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b6087650f133bd6d",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities?id=1%2C3",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.082 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b6087650f133bd6d",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.095 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b014ec80d4a10d9f",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities?isin=ISIN1%2CISIN3",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.095 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b014ec80d4a10d9f",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.109 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "d9242d2f4ab8bcb8",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities?type=SEC%2CNSEC",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.109 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "d9242d2f4ab8bcb8",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.123 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "d4fd79615c5df32d",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities?name=ISIN%204%2CISIN%205",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.123 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "d4fd79615c5df32d",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.137 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "e1564b4d6f471b9f",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities?statusDescription=%D0%A0%D0%B0%D0%B7%D0%BC%D0%B5%D1%89%D0%B5%D0%BD%2C%D0%92%20%D0%BE%D0%B1%D1%80%D0%B0%D1%89%D0%B5%D0%BD%D0%B8%D0%B8",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.138 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "e1564b4d6f471b9f",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.154 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "ff0e4ac25b93176e",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities?currency=RUB",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.154 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "ff0e4ac25b93176e",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.170 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "be9d2bed52b2f958",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities?currency=RUB&face_value=130",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.171 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "be9d2bed52b2f958",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.184 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b7538854b846c96d",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities?createdFrom=2024-03-31T12%3A28%3A27.287",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.184 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b7538854b846c96d",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.199 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "e12711cabfd6061e",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities?createdFrom=2024-03-29T12%3A28%3A27.287&createdTo=2024-03-31T12%3A28%3A27.287",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.199 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "e12711cabfd6061e",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.213 [http-nio-6486-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "bb969c6143adbff9",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities?active=false",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.214 [http-nio-6486-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "bb969c6143adbff9",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.319 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "84da685a2b91463f",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities?page=1&size=3&sort=createdAt%2Cdesc&sort=name%2Cdesc&sort=type&sort=isin&sort=id&sort=statusDescription",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.319 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "84da685a2b91463f",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.334 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "95b14aa46aadd556",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities?sort=base_value%2Cdesc",
  "host" : "localhost",
  "path" : "/v2/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.334 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "95b14aa46aadd556",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.445 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "d862120ddf8dc0a1",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?securityIds=STRUCTURED1",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.446 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "d862120ddf8dc0a1",
  "duration" : 19,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.459 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f629e7b541bbb81d",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?securityIds=STRUCTURED1%2CSTRUCTURED2",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.459 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f629e7b541bbb81d",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.470 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c20fd69057e5e512",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?securityIds=UNKNOWN",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.471 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c20fd69057e5e512",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.484 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "841982174b0252b3",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?securityTypeCodes=SEC",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.484 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "841982174b0252b3",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.496 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "ea56922e49815f08",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?securityTypeCodes=SEC%2CAFORSEC",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.496 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "ea56922e49815f08",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.508 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "cb869604003dcb01",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?securityTypeCodes=UNKNOWN",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.508 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "cb869604003dcb01",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.588 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "96367dc7b5050d4c",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?assetIds=ASSET_ISIN1",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.588 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "96367dc7b5050d4c",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.600 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "bc0e93ebc45b3974",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?assetIds=ASSET_ISIN1%2CASSET_ISIN2",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.600 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "bc0e93ebc45b3974",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.617 [http-nio-6486-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f9271a1a25569265",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?assetIds=UNKNOWN",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.617 [http-nio-6486-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f9271a1a25569265",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.709 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "ae3a35f7704424ed",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?size=3",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.710 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "ae3a35f7704424ed",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.722 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a65657a19bea77da",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?page=1&size=2",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.723 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a65657a19bea77da",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.735 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "fa86afcd013d39f0",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?sort=securityId%2Casc",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.735 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "fa86afcd013d39f0",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.749 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f5c97533ee5fc5ed",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/assets?sort=assetId%2Casc",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.749 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f5c97533ee5fc5ed",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.860 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "bb22c3764448fe2a",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities/1",
  "host" : "localhost",
  "path" : "/v2/securities/1",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.860 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "bb22c3764448fe2a",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:48.967 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "cd7e321e252e14f4",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities/3",
  "host" : "localhost",
  "path" : "/v2/securities/3",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:48.967 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "cd7e321e252e14f4",
  "duration" : 3,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.060 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "fc0f8f5d994b9edb",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/v2/securities/999",
  "host" : "localhost",
  "path" : "/v2/securities/999",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.060 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "fc0f8f5d994b9edb",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"message":"Security not found '999'"}
}
12:28:49.150 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "80d7ed67b6e7e974",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/STRUCTURED1/assets",
  "host" : "localhost",
  "path" : "/securities/STRUCTURED1/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.151 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "80d7ed67b6e7e974",
  "duration" : 9,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.240 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "969a465ff22af4d9",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/NOT_STRUCTURED/assets",
  "host" : "localhost",
  "path" : "/securities/NOT_STRUCTURED/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.241 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "969a465ff22af4d9",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.370 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c295a158af7feb17",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/UNKNOWN/assets",
  "host" : "localhost",
  "path" : "/securities/UNKNOWN/assets",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.371 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c295a158af7feb17",
  "duration" : 13,
  "protocol" : "HTTP/1.1",
  "status" : 404,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"SECURITY_NOT_FOUND"}
}
12:28:49.537 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "964ca7d830cb9803",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/byFields?face_value=231",
  "host" : "localhost",
  "path" : "/securities/byFields",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.537 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "964ca7d830cb9803",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.551 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "aa8ba8289822d210",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/byFields?source=NSD&face_value=130&currency=122",
  "host" : "localhost",
  "path" : "/securities/byFields",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.551 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "aa8ba8289822d210",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.642 [http-nio-6486-exec-13] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "ab9caa8c541d548d",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/byFields?source=NSD",
  "host" : "localhost",
  "path" : "/securities/byFields",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.642 [http-nio-6486-exec-13] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "ab9caa8c541d548d",
  "duration" : 1,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:48 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"message":"Fields are required"}
}
12:28:49.740 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "bcaeb9feaa9d4e7e",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/search?text=e",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.740 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "bcaeb9feaa9d4e7e",
  "duration" : 14,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.755 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c638dcf1fa275e17",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/search?ids=e",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.755 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c638dcf1fa275e17",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.770 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a440d724fedd2bbb",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/search?isin=test&name=i",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.770 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a440d724fedd2bbb",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.787 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f81edd7cbeab13fb",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/search?name=i&size=2",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.787 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f81edd7cbeab13fb",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.801 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "cf73994ea4597c4f",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/search?name=i&page=0&size=3",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.801 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "cf73994ea4597c4f",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.823 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c8ef45b24e05c44c",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/search?name=i&page=1&size=3",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.823 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c8ef45b24e05c44c",
  "duration" : 11,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.850 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "997d996ce602def7",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/search?name=i&page=2&size=3",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.851 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "997d996ce602def7",
  "duration" : 12,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.980 [http-nio-6486-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "dcec5d8c618996ea",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/search?name=leisure&fuzzy=true&size=3",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.981 [http-nio-6486-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "dcec5d8c618996ea",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:49.993 [http-nio-6486-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f2f3a170cefe270c",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/search?name=petromex&fuzzy=true&size=3",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:49.993 [http-nio-6486-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f2f3a170cefe270c",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.094 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c603aefe8e91e6cb",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/search",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.095 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c603aefe8e91e6cb",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.107 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c324afaaddd43b25",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/search?unknown=1&size=wrong&page=wrong",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.107 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c324afaaddd43b25",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.258 [http-nio-6486-exec-2] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, RN3], fields=null, sources=null, at=null, from=null, to=null)
12:28:50.262 [http-nio-6486-exec-2] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, RN3], fields=null, sources=null, at=null, from=null, to=null)
12:28:50.290 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "cbf0fa9de2d92995",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CRN3",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.291 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "cbf0fa9de2d92995",
  "duration" : 41,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.308 [http-nio-6486-exec-13] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN], ids=[ISIN1, ISIN2, RN3], fields=null, sources=null, at=null, from=null, to=null)
12:28:50.314 [http-nio-6486-exec-13] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN], ids=[ISIN1, ISIN2, RN3], fields=null, sources=null, at=null, from=null, to=null)
12:28:50.323 [http-nio-6486-exec-13] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8a5257d28f826309",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CRN3&idTypes=ISIN",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.324 [http-nio-6486-exec-13] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8a5257d28f826309",
  "duration" : 17,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.336 [http-nio-6486-exec-8] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, RN1], fields=null, sources=null, at=null, from=null, to=null)
12:28:50.340 [http-nio-6486-exec-8] DEBUG r.a.m.a.s.service.SecurityService.find - Found 1 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, RN1], fields=null, sources=null, at=null, from=null, to=null)
12:28:50.344 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "fa1500bf811d295a",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CRN1",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.344 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "fa1500bf811d295a",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.352 [http-nio-6486-exec-1] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN], ids=[ISIN1, RN1], fields=null, sources=null, at=null, from=null, to=null)
12:28:50.357 [http-nio-6486-exec-1] DEBUG r.a.m.a.s.service.SecurityService.find - Found 1 securities by filter: SecurityFilter(idTypes=[ISIN], ids=[ISIN1, RN1], fields=null, sources=null, at=null, from=null, to=null)
12:28:50.360 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "df8575d4f83c131d",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CRN1&idTypes=ISIN",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.361 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "df8575d4f83c131d",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.371 [http-nio-6486-exec-9] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[UID6, RN3], fields=null, sources=null, at=null, from=null, to=null)
12:28:50.374 [http-nio-6486-exec-9] DEBUG r.a.m.a.s.service.SecurityService.find - Found 2 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[UID6, RN3], fields=null, sources=null, at=null, from=null, to=null)
12:28:50.376 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "9287d4fcf95e5e4d",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=UID6%2CRN3",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.376 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "9287d4fcf95e5e4d",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.547 [http-nio-6486-exec-6] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=[BASE_VALUE, CURRENCY], sources=null, at=null, from=null, to=null)
12:28:50.551 [http-nio-6486-exec-6] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=[BASE_VALUE, CURRENCY], sources=null, at=null, from=null, to=null)
12:28:50.554 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b42d6de607fd2594",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&fields=BASE_VALUE%2CCURRENCY",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.555 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b42d6de607fd2594",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.565 [http-nio-6486-exec-4] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=[FACE_VALUE, CURRENCY], sources=null, at=null, from=null, to=null)
12:28:50.568 [http-nio-6486-exec-4] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=[FACE_VALUE, CURRENCY], sources=null, at=null, from=null, to=null)
12:28:50.570 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a2a01399e2430870",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&fields=FACE_VALUE%2CCURRENCY",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.571 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a2a01399e2430870",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.580 [http-nio-6486-exec-7] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=[CURRENCY], sources=null, at=null, from=null, to=null)
12:28:50.583 [http-nio-6486-exec-7] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=[CURRENCY], sources=null, at=null, from=null, to=null)
12:28:50.586 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "90a9cea37cdc635c",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&fields=CURRENCY",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.586 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "90a9cea37cdc635c",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.595 [http-nio-6486-exec-5] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN2], fields=[FACE_VALUE], sources=null, at=null, from=null, to=null)
12:28:50.598 [http-nio-6486-exec-5] DEBUG r.a.m.a.s.service.SecurityService.find - Found 1 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN2], fields=[FACE_VALUE], sources=null, at=null, from=null, to=null)
12:28:50.601 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "9d8959587c1d7edb",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN2&fields=FACE_VALUE",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.601 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "9d8959587c1d7edb",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.611 [http-nio-6486-exec-2] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-03-26T18:45, from=null, to=null)
12:28:50.614 [http-nio-6486-exec-2] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-03-26T18:45, from=null, to=null)
12:28:50.623 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "e43d282c3c1d2c9f",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&at=2024-03-26T18%3A45%3A00",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.623 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "e43d282c3c1d2c9f",
  "duration" : 14,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.634 [http-nio-6486-exec-8] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-03-26T13:40:02, from=null, to=null)
12:28:50.638 [http-nio-6486-exec-8] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-03-26T13:40:02, from=null, to=null)
12:28:50.643 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c597865c47aef1b9",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&at=2024-03-26T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.643 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c597865c47aef1b9",
  "duration" : 9,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.656 [http-nio-6486-exec-14] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-03-25T16:20:02, from=null, to=null)
12:28:50.659 [http-nio-6486-exec-14] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-03-25T16:20:02, from=null, to=null)
12:28:50.662 [http-nio-6486-exec-14] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "d6f4635b4e7ad69c",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&at=2024-03-25T16%3A20%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.662 [http-nio-6486-exec-14] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "d6f4635b4e7ad69c",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.672 [http-nio-6486-exec-13] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-03-25T16:20:01, from=null, to=null)
12:28:50.676 [http-nio-6486-exec-13] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-03-25T16:20:01, from=null, to=null)
12:28:50.678 [http-nio-6486-exec-13] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8002d4d85b730911",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&at=2024-03-25T16%3A20%3A01",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.678 [http-nio-6486-exec-13] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8002d4d85b730911",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.690 [http-nio-6486-exec-1] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-03-25T16:20:01, to=null)
12:28:50.694 [http-nio-6486-exec-1] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-03-25T16:20:01, to=null)
12:28:50.699 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b6a17c75de751642",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-03-25T16%3A20%3A01",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.699 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b6a17c75de751642",
  "duration" : 10,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.713 [http-nio-6486-exec-9] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-03-26T13:40:01, to=null)
12:28:50.718 [http-nio-6486-exec-9] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-03-26T13:40:01, to=null)
12:28:50.726 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8901562bc986e59d",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-03-26T13%3A40%3A01",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.726 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8901562bc986e59d",
  "duration" : 13,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:49 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.740 [http-nio-6486-exec-10] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-03-26T13:40:02, to=null)
12:28:50.744 [http-nio-6486-exec-10] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-03-26T13:40:02, to=null)
12:28:50.751 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "fe1d365f47a48038",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-03-26T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.751 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "fe1d365f47a48038",
  "duration" : 12,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.773 [http-nio-6486-exec-12] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-03-25T23:55:55, to=2024-03-25T23:55:55)
12:28:50.778 [http-nio-6486-exec-12] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-03-25T23:55:55, to=2024-03-25T23:55:55)
12:28:50.780 [http-nio-6486-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f5d8a48a583ffc79",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-03-25T23%3A55%3A55&to=2024-03-25T23%3A55%3A55",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.781 [http-nio-6486-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f5d8a48a583ffc79",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.793 [http-nio-6486-exec-3] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-03-25T16:20:01, to=2024-03-26T13:40:02)
12:28:50.798 [http-nio-6486-exec-3] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-03-25T16:20:01, to=2024-03-26T13:40:02)
12:28:50.803 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f17e34f4a410a263",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-03-25T16%3A20%3A01&to=2024-03-26T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.804 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f17e34f4a410a263",
  "duration" : 11,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.817 [http-nio-6486-exec-11] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-03-25T23:55:55, to=2024-03-26T00:00)
12:28:50.820 [http-nio-6486-exec-11] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-03-25T23:55:55, to=2024-03-26T00:00)
12:28:50.826 [http-nio-6486-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "d219310d73421ad9",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-03-25T23%3A55%3A55&to=2024-03-26T00%3A00%3A00",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.826 [http-nio-6486-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "d219310d73421ad9",
  "duration" : 9,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:50.839 [http-nio-6486-exec-6] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[UNKNOWN_ISIN], fields=null, sources=null, at=null, from=null, to=null)
12:28:50.841 [http-nio-6486-exec-6] DEBUG r.a.m.a.s.service.SecurityService.find - Found 0 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[UNKNOWN_ISIN], fields=null, sources=null, at=null, from=null, to=null)
12:28:50.843 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "d940bdf5b6a30598",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=UNKNOWN_ISIN",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:50.843 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "d940bdf5b6a30598",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:51.023 [http-nio-6486-exec-4] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=2024-03-26T18:45, from=null, to=null)
12:28:51.026 [http-nio-6486-exec-4] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=2024-03-26T18:45, from=null, to=null)
12:28:51.039 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "80b84cc34214e8eb",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&at=2024-03-26T18%3A45%3A00&sources=NSD%2CBDL",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.039 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "80b84cc34214e8eb",
  "duration" : 16,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:51.052 [http-nio-6486-exec-7] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=null, from=2024-03-25T16:20:01, to=null)
12:28:51.056 [http-nio-6486-exec-7] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=null, from=2024-03-25T16:20:01, to=null)
12:28:51.061 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "bf07b2d33ec36f19",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-03-25T16%3A20%3A01&sources=NSD%2CBDL",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.061 [http-nio-6486-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "bf07b2d33ec36f19",
  "duration" : 10,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:51.076 [http-nio-6486-exec-14] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=null, from=2024-03-25T23:55:55, to=2024-03-26T00:00)
12:28:51.080 [http-nio-6486-exec-14] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=null, from=2024-03-25T23:55:55, to=2024-03-26T00:00)
12:28:51.084 [http-nio-6486-exec-14] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "de95bfa9d1673056",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-03-25T23%3A55%3A55&to=2024-03-26T00%3A00%3A00&sources=NSD%2CBDL",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.084 [http-nio-6486-exec-14] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "de95bfa9d1673056",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:51.321 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f37abe40b5450a0f",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.322 [http-nio-6486-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f37abe40b5450a0f",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"ids","message":"must not be null"}]}
}
12:28:51.336 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c9ad573c97513d34",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.336 [http-nio-6486-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c9ad573c97513d34",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"ids","message":"size must be between 1 and 100"}]}
}
12:28:51.346 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c109ca77db6f470c",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1&fields=",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.347 [http-nio-6486-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c109ca77db6f470c",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"fields","message":"size must be between 1 and 100"}]}
}
12:28:51.361 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8d2fb811b05279b1",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1&at=2024-03-26T13%3A40%3A01&from=2024-03-26T13%3A40%3A02&to=2024-03-26T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.362 [http-nio-6486-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8d2fb811b05279b1",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"must be null when 'at' not null"},{"path":"to","message":"must be null when 'at' not null"}]}
}
12:28:51.371 [http-nio-6486-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "e91f5309c4803f8f",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1&at=2024-03-26T13%3A40%3A01&from=2024-03-26T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.372 [http-nio-6486-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "e91f5309c4803f8f",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"must be null when 'at' not null"}]}
}
12:28:51.381 [http-nio-6486-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "89f5d39d10e118a4",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1&at=2024-03-26T13%3A40%3A01&to=2024-03-26T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.382 [http-nio-6486-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "89f5d39d10e118a4",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"to","message":"must be null when 'at' not null"}]}
}
12:28:51.392 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "85ca07ccdcd3b089",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1&to=2024-03-26T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.393 [http-nio-6486-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "85ca07ccdcd3b089",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"must not be null when 'to' not null"}]}
}
12:28:51.404 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8e7c7f3c07f250c9",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1&from=2021-05-01T13%3A40%3A02&to=2021-08-01T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.404 [http-nio-6486-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8e7c7f3c07f250c9",
  "duration" : 3,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"more than 90 days between 'from' and 'to'"},{"path":"to","message":"more than 90 days between 'from' and 'to'"}]}
}
12:28:51.415 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a703cd0f72baaf0b",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities?ids=ISIN1&from=2021-05-01T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.416 [http-nio-6486-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a703cd0f72baaf0b",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"more than 90 days between 'from' and now"}]}
}
12:28:51.498 [http-nio-6486-exec-13] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "9f075f67d59c382e",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6486/securities/types",
  "host" : "localhost",
  "path" : "/securities/types",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.498 [http-nio-6486-exec-13] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "9f075f67d59c382e",
  "duration" : 9,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:51.680 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "ae8bd2d8e0da889a",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6486/securities/ISIN1/toggle",
  "host" : "localhost",
  "path" : "/securities/ISIN1/toggle",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "48" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.680 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "ae8bd2d8e0da889a",
  "duration" : 11,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:51.704 [http-nio-6486-exec-15] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "af08956da278ea48",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6486/securities/ISIN1/toggle",
  "host" : "localhost",
  "path" : "/securities/ISIN1/toggle",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "18" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:28:51.704 [http-nio-6486-exec-15] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "af08956da278ea48",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:50 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:28:51.791 [http-nio-6486-exec-14] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "dc71be5e08e1bf67",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6486/securities/isinunknown/toggle",
  "host" : "localhost",
  "path" : "/securities/isinunknown/toggle",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "18" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  },
  "body" : {"active":true}
}
12:28:51.791 [http-nio-6486-exec-14] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "dc71be5e08e1bf67",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:51 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"message":"Security not found 'isinunknown'"}
}
12:28:52.360 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "90a96f20fcb856d1",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6486/securities/ISIN1/toggle",
  "host" : "localhost",
  "path" : "/securities/ISIN1/toggle",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "19" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  },
  "body" : {"active":false}
}
12:28:52.361 [http-nio-6486-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "90a96f20fcb856d1",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:28:51 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"message":"Required statusDescription for inactive state"}
}
12:28:53.169 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
12:28:55.320 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 2, CreateTime = 1712050133004, serialized key size = -1, serialized value size = 550, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [99, 56, 48, 101, 52, 101, 55, 53, 98, 56, 57, 51, 54, 54, 57, 53, 45, 99, 56, 48, 101, 52, 101, 55, 53, 98, 56, 57, 51, 54, 54, 57, 53, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-01-01T00:01:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "ISIN"
          
          , "value": "RU0001011101" 
          
        } ,
      
        {
          "code": "FACE_VALUE"
          
          , "value": "11" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where (type = (select id from security_id_type where code in ('ISIN')) and id in (?))),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where (type = (select id from security_id_type where code in ('ISIN')) and id in (?))),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where (type = (select id from security_id_type where code in ('ISIN')) and id in (?))),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:261)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$59c57eab.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:118)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:102)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:78)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$82d436b3.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
12:28:55.338 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 3, CreateTime = 1712050133012, serialized key size = -1, serialized value size = 553, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [99, 56, 48, 101, 52, 101, 55, 53, 98, 56, 57, 51, 54, 54, 57, 53, 45, 99, 56, 48, 101, 52, 101, 55, 53, 98, 56, 57, 51, 54, 54, 57, 53, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-01-01T01:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "ISIN"
          
          , "value": "RU0001011101" 
          
        } ,
      
        {
          "code": "FACE_VALUE"
          
          , "value": "11.22" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where (type = (select id from security_id_type where code in ('ISIN')) and id in (?))),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where (type = (select id from security_id_type where code in ('ISIN')) and id in (?))),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where (type = (select id from security_id_type where code in ('ISIN')) and id in (?))),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:261)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$59c57eab.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:118)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:102)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:78)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$82d436b3.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
12:28:55.345 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 4, CreateTime = 1712050133020, serialized key size = -1, serialized value size = 570, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [99, 56, 48, 101, 52, 101, 55, 53, 98, 56, 57, 51, 54, 54, 57, 53, 45, 99, 56, 48, 101, 52, 101, 55, 53, 98, 56, 57, 51, 54, 54, 57, 53, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-02-02T00:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "ISIN"
          
          , "value": "RU0001011101" 
          
        } ,
      
        {
          "code": "FACE_VALUE"
          
          , "value": "0.00800000000000000001" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where (type = (select id from security_id_type where code in ('ISIN')) and id in (?))),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where (type = (select id from security_id_type where code in ('ISIN')) and id in (?))),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where (type = (select id from security_id_type where code in ('ISIN')) and id in (?))),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:261)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$59c57eab.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:118)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:102)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:78)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$82d436b3.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
12:28:55.351 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 5, CreateTime = 1712050133029, serialized key size = -1, serialized value size = 569, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [99, 56, 48, 101, 52, 101, 55, 53, 98, 56, 57, 51, 54, 54, 57, 53, 45, 99, 56, 48, 101, 52, 101, 55, 53, 98, 56, 57, 51, 54, 54, 57, 53, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-02-01T00:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "ISIN"
          
          , "value": "RU0001011101" 
          
        } ,
      
        {
          "code": "FACE_VALUE"
          
          , "value": "999999999999999999.99" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where (type = (select id from security_id_type where code in ('ISIN')) and id in (?))),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where (type = (select id from security_id_type where code in ('ISIN')) and id in (?))),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where (type = (select id from security_id_type where code in ('ISIN')) and id in (?))),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:261)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$59c57eab.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:118)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:102)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:78)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$82d436b3.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(7, 2, 2020-01-01, 11, 2024-04-02 12:28:53.119591) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
12:28:55.359 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
12:28:57.719 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 7, CreateTime = 1712050137706, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [102, 101, 101, 55, 48, 49, 100, 56, 101, 48, 102, 102, 53, 48, 102, 54, 45, 102, 101, 101, 55, 48, 49, 100, 56, 101, 48, 102, 102, 53, 48, 102, 54, 45, 48]), RecordHeader(key = springDeserializerExceptionValue, value = [-84, -19, 0, 5, 115, 114, 0, 69, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 114, -24, -116, 126, -45, 78, 67, -115, 2, 0, 2, 90, 0, 5, 105, 115, 75, 101, 121, 91, 0, 4, 100, 97, 116, 97, 116, 0, 2, 91, 66, 120, 114, 0, 40, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 55, -37, -114, -57, -118, -114, 85, 2, 0, 1, 76, 0, 8, 108, 111, 103, 76, 101, 118, 101, 108, 116, 0, 48, 76, 111, 114, 103, 47, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 47, 107, 97, 102, 107, 97, 47, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 59, 120, 114, 0, 47, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 111, 114, 101, 46, 78, 101, 115, 116, 101, 100, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 75, 126, 118, 72, -53, -113, -97, 0, 2, 0, 0, 120, 114, 0, 26, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -98, 95, 6, 71, 10, 52, -125, -27, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 120, 99, 101, 112, 116, 105, 111, 110, -48, -3, 31, 62, 26, 59, 28, -60, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 111, 119, 97, 98, 108, 101, -43, -58, 53, 39, 57, 119, -72, -53, 3, 0, 4, 76, 0, 5, 99, 97, 117, 115, 101, 116, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 76, 0, 13, 100, 101, 116, 97, 105, 108, 77, 101, 115, 115, 97, 103, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 0, 10, 115, 116, 97, 99, 107, 84, 114, 97, 99, 101, 116, 0, 30, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 76, 0, 20, 115, 117, 112, 112, 114, 101, 115, 115, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 113, 0, 126, 0, 5, 113, 0, 126, 0, 13, 116, 2, -60, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 117, 114, 0, 30, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 2, 70, 42, 60, 60, -3, 34, 57, 2, 0, 0, 120, 112, 0, 0, 0, 19, 115, 114, 0, 27, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 97, 9, -59, -102, 38, 54, -35, -123, 2, 0, 8, 66, 0, 6, 102, 111, 114, 109, 97, 116, 73, 0, 10, 108, 105, 110, 101, 78, 117, 109, 98, 101, 114, 76, 0, 15, 99, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 14, 100, 101, 99, 108, 97, 114, 105, 110, 103, 67, 108, 97, 115, 115, 113, 0, 126, 0, 9, 76, 0, 8, 102, 105, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 101, 116, 104, 111, 100, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 111, 100, 117, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 13, 109, 111, 100, 117, 108, 101, 86, 101, 114, 115, 105, 111, 110, 113, 0, 126, 0, 9, 120, 112, 1, 0, 0, 0, -95, 116, 0, 3, 97, 112, 112, 116, 0, 63, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 116, 0, 23, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 116, 0, 24, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 116, 0, 74, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 116, 0, 35, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 7, 99, 111, 110, 118, 101, 114, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 13, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 9, 116, 111, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 116, 0, 79, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 116, 0, 41, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 18, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 116, 0, 9, 111, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 116, 0, 81, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 116, 0, 34, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 116, 0, 22, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 37, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 20, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 21, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 14, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 13, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 3, 114, 117, 110, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 116, 0, 46, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 116, 0, 14, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 116, 0, 4, 99, 97, 108, 108, 116, 0, 9, 106, 97, 118, 97, 46, 98, 97, 115, 101, 116, 0, 8, 49, 56, 46, 48, 46, 49, 46, 49, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 116, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 116, 0, 15, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 116, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 116, 0, 11, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 114, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 69, 109, 112, 116, 121, 76, 105, 115, 116, 122, -72, 23, -76, 60, -89, -98, -34, 2, 0, 0, 120, 112, 120, 116, 0, 21, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 117, 113, 0, 126, 0, 15, 0, 0, 0, 19, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 20, 113, 0, 126, 0, 21, 113, 0, 126, 0, 22, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 26, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 28, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 30, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 34, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 41, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 43, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 45, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 47, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 49, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 51, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 53, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 55, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 57, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 113, 0, 126, 0, 59, 113, 0, 126, 0, 60, 113, 0, 126, 0, 61, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 113, 0, 126, 0, 65, 113, 0, 126, 0, 66, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 113, 0, 126, 0, 68, 113, 0, 126, 0, 69, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 113, 0, 126, 0, 71, 120, 126, 114, 0, 46, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 112, 116, 0, 5, 69, 82, 82, 79, 82, 0, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 2, 123, 125])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.convert(BatchMessagingMessageConverter.java:247)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.obtainPayload(BatchMessagingMessageConverter.java:216)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.toMessage(BatchMessagingMessageConverter.java:175)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.toMessagingMessage(BatchMessagingMessageListenerAdapter.java:212)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:165)
	... 13 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 19 common frames omitted
12:28:57.730 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 4, CreateTime = 1712050137725, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 99, 111, 110, 118, 101, 114, 116, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 54, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 46, 46, 46, 32, 49, 57, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 7]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -114, -98, 35, -22, 106]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
12:28:57.732 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 8, CreateTime = 1712050137708, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [55, 55, 97, 56, 51, 49, 100, 100, 56, 97, 101, 97, 101, 101, 56, 98, 45, 55, 55, 97, 56, 51, 49, 100, 100, 56, 97, 101, 97, 101, 101, 56, 98, 45, 48]), RecordHeader(key = springDeserializerExceptionValue, value = [-84, -19, 0, 5, 115, 114, 0, 69, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 114, -24, -116, 126, -45, 78, 67, -115, 2, 0, 2, 90, 0, 5, 105, 115, 75, 101, 121, 91, 0, 4, 100, 97, 116, 97, 116, 0, 2, 91, 66, 120, 114, 0, 40, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 55, -37, -114, -57, -118, -114, 85, 2, 0, 1, 76, 0, 8, 108, 111, 103, 76, 101, 118, 101, 108, 116, 0, 48, 76, 111, 114, 103, 47, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 47, 107, 97, 102, 107, 97, 47, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 59, 120, 114, 0, 47, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 111, 114, 101, 46, 78, 101, 115, 116, 101, 100, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 75, 126, 118, 72, -53, -113, -97, 0, 2, 0, 0, 120, 114, 0, 26, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -98, 95, 6, 71, 10, 52, -125, -27, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 120, 99, 101, 112, 116, 105, 111, 110, -48, -3, 31, 62, 26, 59, 28, -60, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 111, 119, 97, 98, 108, 101, -43, -58, 53, 39, 57, 119, -72, -53, 3, 0, 4, 76, 0, 5, 99, 97, 117, 115, 101, 116, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 76, 0, 13, 100, 101, 116, 97, 105, 108, 77, 101, 115, 115, 97, 103, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 0, 10, 115, 116, 97, 99, 107, 84, 114, 97, 99, 101, 116, 0, 30, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 76, 0, 20, 115, 117, 112, 112, 114, 101, 115, 115, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 113, 0, 126, 0, 5, 113, 0, 126, 0, 13, 116, 2, -60, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 117, 114, 0, 30, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 2, 70, 42, 60, 60, -3, 34, 57, 2, 0, 0, 120, 112, 0, 0, 0, 19, 115, 114, 0, 27, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 97, 9, -59, -102, 38, 54, -35, -123, 2, 0, 8, 66, 0, 6, 102, 111, 114, 109, 97, 116, 73, 0, 10, 108, 105, 110, 101, 78, 117, 109, 98, 101, 114, 76, 0, 15, 99, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 14, 100, 101, 99, 108, 97, 114, 105, 110, 103, 67, 108, 97, 115, 115, 113, 0, 126, 0, 9, 76, 0, 8, 102, 105, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 101, 116, 104, 111, 100, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 111, 100, 117, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 13, 109, 111, 100, 117, 108, 101, 86, 101, 114, 115, 105, 111, 110, 113, 0, 126, 0, 9, 120, 112, 1, 0, 0, 0, -95, 116, 0, 3, 97, 112, 112, 116, 0, 63, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 116, 0, 23, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 116, 0, 24, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 116, 0, 74, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 116, 0, 35, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 7, 99, 111, 110, 118, 101, 114, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 13, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 9, 116, 111, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 116, 0, 79, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 116, 0, 41, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 18, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 116, 0, 9, 111, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 116, 0, 81, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 116, 0, 34, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 116, 0, 22, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 37, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 20, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 21, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 14, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 13, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 3, 114, 117, 110, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 116, 0, 46, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 116, 0, 14, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 116, 0, 4, 99, 97, 108, 108, 116, 0, 9, 106, 97, 118, 97, 46, 98, 97, 115, 101, 116, 0, 8, 49, 56, 46, 48, 46, 49, 46, 49, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 116, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 116, 0, 15, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 116, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 116, 0, 11, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 114, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 69, 109, 112, 116, 121, 76, 105, 115, 116, 122, -72, 23, -76, 60, -89, -98, -34, 2, 0, 0, 120, 112, 120, 116, 0, 21, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 117, 113, 0, 126, 0, 15, 0, 0, 0, 19, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 20, 113, 0, 126, 0, 21, 113, 0, 126, 0, 22, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 26, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 28, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 30, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 34, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 41, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 43, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 45, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 47, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 49, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 51, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 53, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 55, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 57, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 113, 0, 126, 0, 59, 113, 0, 126, 0, 60, 113, 0, 126, 0, 61, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 113, 0, 126, 0, 65, 113, 0, 126, 0, 66, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 113, 0, 126, 0, 68, 113, 0, 126, 0, 69, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 113, 0, 126, 0, 71, 120, 126, 114, 0, 46, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 112, 116, 0, 5, 69, 82, 82, 79, 82, 0, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 2, 123, 125])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.convert(BatchMessagingMessageConverter.java:247)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.obtainPayload(BatchMessagingMessageConverter.java:216)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.toMessage(BatchMessagingMessageConverter.java:175)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.toMessagingMessage(BatchMessagingMessageListenerAdapter.java:212)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:165)
	... 13 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 19 common frames omitted
12:28:57.740 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 9, CreateTime = 1712050137709, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [101, 102, 54, 54, 49, 100, 54, 99, 101, 48, 56, 49, 57, 50, 52, 51, 45, 101, 102, 54, 54, 49, 100, 54, 99, 101, 48, 56, 49, 57, 50, 52, 51, 45, 48]), RecordHeader(key = springDeserializerExceptionValue, value = [-84, -19, 0, 5, 115, 114, 0, 69, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 114, -24, -116, 126, -45, 78, 67, -115, 2, 0, 2, 90, 0, 5, 105, 115, 75, 101, 121, 91, 0, 4, 100, 97, 116, 97, 116, 0, 2, 91, 66, 120, 114, 0, 40, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 55, -37, -114, -57, -118, -114, 85, 2, 0, 1, 76, 0, 8, 108, 111, 103, 76, 101, 118, 101, 108, 116, 0, 48, 76, 111, 114, 103, 47, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 47, 107, 97, 102, 107, 97, 47, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 59, 120, 114, 0, 47, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 111, 114, 101, 46, 78, 101, 115, 116, 101, 100, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 75, 126, 118, 72, -53, -113, -97, 0, 2, 0, 0, 120, 114, 0, 26, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -98, 95, 6, 71, 10, 52, -125, -27, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 120, 99, 101, 112, 116, 105, 111, 110, -48, -3, 31, 62, 26, 59, 28, -60, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 111, 119, 97, 98, 108, 101, -43, -58, 53, 39, 57, 119, -72, -53, 3, 0, 4, 76, 0, 5, 99, 97, 117, 115, 101, 116, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 76, 0, 13, 100, 101, 116, 97, 105, 108, 77, 101, 115, 115, 97, 103, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 0, 10, 115, 116, 97, 99, 107, 84, 114, 97, 99, 101, 116, 0, 30, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 76, 0, 20, 115, 117, 112, 112, 114, 101, 115, 115, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 113, 0, 126, 0, 5, 113, 0, 126, 0, 13, 116, 2, -60, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 117, 114, 0, 30, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 2, 70, 42, 60, 60, -3, 34, 57, 2, 0, 0, 120, 112, 0, 0, 0, 19, 115, 114, 0, 27, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 97, 9, -59, -102, 38, 54, -35, -123, 2, 0, 8, 66, 0, 6, 102, 111, 114, 109, 97, 116, 73, 0, 10, 108, 105, 110, 101, 78, 117, 109, 98, 101, 114, 76, 0, 15, 99, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 14, 100, 101, 99, 108, 97, 114, 105, 110, 103, 67, 108, 97, 115, 115, 113, 0, 126, 0, 9, 76, 0, 8, 102, 105, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 101, 116, 104, 111, 100, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 111, 100, 117, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 13, 109, 111, 100, 117, 108, 101, 86, 101, 114, 115, 105, 111, 110, 113, 0, 126, 0, 9, 120, 112, 1, 0, 0, 0, -95, 116, 0, 3, 97, 112, 112, 116, 0, 63, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 116, 0, 23, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 116, 0, 24, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 116, 0, 74, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 116, 0, 35, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 7, 99, 111, 110, 118, 101, 114, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 13, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 9, 116, 111, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 116, 0, 79, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 116, 0, 41, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 18, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 116, 0, 9, 111, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 116, 0, 81, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 116, 0, 34, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 116, 0, 22, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 37, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 20, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 21, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 14, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 13, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 3, 114, 117, 110, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 116, 0, 46, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 116, 0, 14, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 116, 0, 4, 99, 97, 108, 108, 116, 0, 9, 106, 97, 118, 97, 46, 98, 97, 115, 101, 116, 0, 8, 49, 56, 46, 48, 46, 49, 46, 49, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 116, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 116, 0, 15, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 116, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 116, 0, 11, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 114, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 69, 109, 112, 116, 121, 76, 105, 115, 116, 122, -72, 23, -76, 60, -89, -98, -34, 2, 0, 0, 120, 112, 120, 116, 0, 21, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 117, 113, 0, 126, 0, 15, 0, 0, 0, 19, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 20, 113, 0, 126, 0, 21, 113, 0, 126, 0, 22, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 26, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 28, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 30, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 34, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 41, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 43, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 45, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 47, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 49, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 51, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 53, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 55, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 57, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 113, 0, 126, 0, 59, 113, 0, 126, 0, 60, 113, 0, 126, 0, 61, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 113, 0, 126, 0, 65, 113, 0, 126, 0, 66, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 113, 0, 126, 0, 68, 113, 0, 126, 0, 69, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 113, 0, 126, 0, 71, 120, 126, 114, 0, 46, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 112, 116, 0, 5, 69, 82, 82, 79, 82, 0, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 2, 123, 125])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.convert(BatchMessagingMessageConverter.java:247)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.obtainPayload(BatchMessagingMessageConverter.java:216)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.toMessage(BatchMessagingMessageConverter.java:175)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.toMessagingMessage(BatchMessagingMessageListenerAdapter.java:212)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:165)
	... 13 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 19 common frames omitted
12:28:57.747 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 5, CreateTime = 1712050137734, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 99, 111, 110, 118, 101, 114, 116, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 54, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 46, 46, 46, 32, 49, 57, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 8]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -114, -98, 35, -22, 108]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
12:28:57.748 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at org.springframework.kafka.listener.FailedBatchProcessor.seekOrRecover(FailedBatchProcessor.java:202)
	at org.springframework.kafka.listener.FailedBatchProcessor.doHandle(FailedBatchProcessor.java:136)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleBatch(DefaultErrorHandler.java:143)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchErrorHandler(KafkaMessageListenerContainer.java:2325)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2160)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	... 8 common frames omitted
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.convert(BatchMessagingMessageConverter.java:247)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.obtainPayload(BatchMessagingMessageConverter.java:216)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.toMessage(BatchMessagingMessageConverter.java:175)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.toMessagingMessage(BatchMessagingMessageListenerAdapter.java:212)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:165)
	... 13 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 19 common frames omitted
12:28:57.753 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 6, CreateTime = 1712050137743, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 99, 111, 110, 118, 101, 114, 116, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 54, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 46, 46, 46, 32, 49, 57, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 9]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -114, -98, 35, -22, 109]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
12:28:58.646 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 11, CreateTime = 1712050137711, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [56, 97, 102, 102, 98, 48, 55, 51, 100, 102, 102, 52, 53, 49, 53, 56, 45, 56, 97, 102, 102, 98, 48, 55, 51, 100, 102, 102, 52, 53, 49, 53, 56, 45, 48]), RecordHeader(key = springDeserializerExceptionValue, value = [-84, -19, 0, 5, 115, 114, 0, 69, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 114, -24, -116, 126, -45, 78, 67, -115, 2, 0, 2, 90, 0, 5, 105, 115, 75, 101, 121, 91, 0, 4, 100, 97, 116, 97, 116, 0, 2, 91, 66, 120, 114, 0, 40, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 55, -37, -114, -57, -118, -114, 85, 2, 0, 1, 76, 0, 8, 108, 111, 103, 76, 101, 118, 101, 108, 116, 0, 48, 76, 111, 114, 103, 47, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 47, 107, 97, 102, 107, 97, 47, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 59, 120, 114, 0, 47, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 111, 114, 101, 46, 78, 101, 115, 116, 101, 100, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 75, 126, 118, 72, -53, -113, -97, 0, 2, 0, 0, 120, 114, 0, 26, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -98, 95, 6, 71, 10, 52, -125, -27, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 120, 99, 101, 112, 116, 105, 111, 110, -48, -3, 31, 62, 26, 59, 28, -60, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 111, 119, 97, 98, 108, 101, -43, -58, 53, 39, 57, 119, -72, -53, 3, 0, 4, 76, 0, 5, 99, 97, 117, 115, 101, 116, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 76, 0, 13, 100, 101, 116, 97, 105, 108, 77, 101, 115, 115, 97, 103, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 0, 10, 115, 116, 97, 99, 107, 84, 114, 97, 99, 101, 116, 0, 30, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 76, 0, 20, 115, 117, 112, 112, 114, 101, 115, 115, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 113, 0, 126, 0, 5, 113, 0, 126, 0, 13, 116, 2, -60, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 117, 114, 0, 30, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 2, 70, 42, 60, 60, -3, 34, 57, 2, 0, 0, 120, 112, 0, 0, 0, 19, 115, 114, 0, 27, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 97, 9, -59, -102, 38, 54, -35, -123, 2, 0, 8, 66, 0, 6, 102, 111, 114, 109, 97, 116, 73, 0, 10, 108, 105, 110, 101, 78, 117, 109, 98, 101, 114, 76, 0, 15, 99, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 14, 100, 101, 99, 108, 97, 114, 105, 110, 103, 67, 108, 97, 115, 115, 113, 0, 126, 0, 9, 76, 0, 8, 102, 105, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 101, 116, 104, 111, 100, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 111, 100, 117, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 13, 109, 111, 100, 117, 108, 101, 86, 101, 114, 115, 105, 111, 110, 113, 0, 126, 0, 9, 120, 112, 1, 0, 0, 0, -95, 116, 0, 3, 97, 112, 112, 116, 0, 63, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 116, 0, 23, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 116, 0, 24, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 116, 0, 74, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 116, 0, 35, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 7, 99, 111, 110, 118, 101, 114, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 13, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 9, 116, 111, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 116, 0, 79, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 116, 0, 41, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 18, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 116, 0, 9, 111, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 116, 0, 81, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 116, 0, 34, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 116, 0, 22, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 37, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 20, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 21, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 14, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 13, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 3, 114, 117, 110, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 116, 0, 46, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 116, 0, 14, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 116, 0, 4, 99, 97, 108, 108, 116, 0, 9, 106, 97, 118, 97, 46, 98, 97, 115, 101, 116, 0, 8, 49, 56, 46, 48, 46, 49, 46, 49, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 116, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 116, 0, 15, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 116, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 116, 0, 11, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 114, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 69, 109, 112, 116, 121, 76, 105, 115, 116, 122, -72, 23, -76, 60, -89, -98, -34, 2, 0, 0, 120, 112, 120, 116, 0, 21, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 117, 113, 0, 126, 0, 15, 0, 0, 0, 19, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 20, 113, 0, 126, 0, 21, 113, 0, 126, 0, 22, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 26, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 28, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 30, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 34, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 41, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 43, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 45, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 47, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 49, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 51, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 53, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 55, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 57, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 113, 0, 126, 0, 59, 113, 0, 126, 0, 60, 113, 0, 126, 0, 61, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 113, 0, 126, 0, 65, 113, 0, 126, 0, 66, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 113, 0, 126, 0, 68, 113, 0, 126, 0, 69, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 113, 0, 126, 0, 71, 120, 126, 114, 0, 46, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 112, 116, 0, 5, 69, 82, 82, 79, 82, 0, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 2, 123, 125])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-1; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-1
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-1
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.convert(BatchMessagingMessageConverter.java:247)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.obtainPayload(BatchMessagingMessageConverter.java:216)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.toMessage(BatchMessagingMessageConverter.java:175)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.toMessagingMessage(BatchMessagingMessageListenerAdapter.java:212)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:165)
	... 13 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 19 common frames omitted
12:28:58.655 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 7, CreateTime = 1712050138648, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 99, 111, 110, 118, 101, 114, 116, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 54, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 46, 46, 46, 32, 49, 57, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 11]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -114, -98, 35, -22, 111]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
12:29:00.040 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 12, CreateTime = 1712050140035, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [56, 55, 49, 57, 98, 57, 53, 51, 52, 101, 56, 49, 99, 54, 99, 49, 45, 56, 55, 49, 57, 98, 57, 53, 51, 52, 101, 56, 49, 99, 54, 99, 49, 45, 48]), RecordHeader(key = springDeserializerExceptionValue, value = [-84, -19, 0, 5, 115, 114, 0, 69, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 114, -24, -116, 126, -45, 78, 67, -115, 2, 0, 2, 90, 0, 5, 105, 115, 75, 101, 121, 91, 0, 4, 100, 97, 116, 97, 116, 0, 2, 91, 66, 120, 114, 0, 40, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 55, -37, -114, -57, -118, -114, 85, 2, 0, 1, 76, 0, 8, 108, 111, 103, 76, 101, 118, 101, 108, 116, 0, 48, 76, 111, 114, 103, 47, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 47, 107, 97, 102, 107, 97, 47, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 59, 120, 114, 0, 47, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 111, 114, 101, 46, 78, 101, 115, 116, 101, 100, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 75, 126, 118, 72, -53, -113, -97, 0, 2, 0, 0, 120, 114, 0, 26, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -98, 95, 6, 71, 10, 52, -125, -27, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 120, 99, 101, 112, 116, 105, 111, 110, -48, -3, 31, 62, 26, 59, 28, -60, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 111, 119, 97, 98, 108, 101, -43, -58, 53, 39, 57, 119, -72, -53, 3, 0, 4, 76, 0, 5, 99, 97, 117, 115, 101, 116, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 76, 0, 13, 100, 101, 116, 97, 105, 108, 77, 101, 115, 115, 97, 103, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 0, 10, 115, 116, 97, 99, 107, 84, 114, 97, 99, 101, 116, 0, 30, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 76, 0, 20, 115, 117, 112, 112, 114, 101, 115, 115, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 113, 0, 126, 0, 5, 113, 0, 126, 0, 13, 116, 2, -60, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 117, 114, 0, 30, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 2, 70, 42, 60, 60, -3, 34, 57, 2, 0, 0, 120, 112, 0, 0, 0, 19, 115, 114, 0, 27, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 97, 9, -59, -102, 38, 54, -35, -123, 2, 0, 8, 66, 0, 6, 102, 111, 114, 109, 97, 116, 73, 0, 10, 108, 105, 110, 101, 78, 117, 109, 98, 101, 114, 76, 0, 15, 99, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 14, 100, 101, 99, 108, 97, 114, 105, 110, 103, 67, 108, 97, 115, 115, 113, 0, 126, 0, 9, 76, 0, 8, 102, 105, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 101, 116, 104, 111, 100, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 111, 100, 117, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 13, 109, 111, 100, 117, 108, 101, 86, 101, 114, 115, 105, 111, 110, 113, 0, 126, 0, 9, 120, 112, 1, 0, 0, 0, -95, 116, 0, 3, 97, 112, 112, 116, 0, 63, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 116, 0, 23, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 116, 0, 24, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 116, 0, 74, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 116, 0, 35, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 7, 99, 111, 110, 118, 101, 114, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 13, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 9, 116, 111, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 116, 0, 79, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 116, 0, 41, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 18, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 116, 0, 9, 111, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 116, 0, 81, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 116, 0, 34, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 116, 0, 22, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 37, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 20, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 21, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 14, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 13, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 3, 114, 117, 110, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 116, 0, 46, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 116, 0, 14, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 116, 0, 4, 99, 97, 108, 108, 116, 0, 9, 106, 97, 118, 97, 46, 98, 97, 115, 101, 116, 0, 8, 49, 56, 46, 48, 46, 49, 46, 49, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 116, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 116, 0, 15, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 116, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 116, 0, 11, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 114, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 69, 109, 112, 116, 121, 76, 105, 115, 116, 122, -72, 23, -76, 60, -89, -98, -34, 2, 0, 0, 120, 112, 120, 116, 0, 21, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 117, 113, 0, 126, 0, 15, 0, 0, 0, 19, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 20, 113, 0, 126, 0, 21, 113, 0, 126, 0, 22, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 26, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 28, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 30, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 34, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 41, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 43, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 45, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 47, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 49, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 51, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 53, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 55, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 57, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 113, 0, 126, 0, 59, 113, 0, 126, 0, 60, 113, 0, 126, 0, 61, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 113, 0, 126, 0, 65, 113, 0, 126, 0, 66, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 113, 0, 126, 0, 68, 113, 0, 126, 0, 69, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 113, 0, 126, 0, 71, 120, 126, 114, 0, 46, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 112, 116, 0, 5, 69, 82, 82, 79, 82, 0, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 2, 123, 125])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.convert(BatchMessagingMessageConverter.java:247)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.obtainPayload(BatchMessagingMessageConverter.java:216)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.toMessage(BatchMessagingMessageConverter.java:175)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.toMessagingMessage(BatchMessagingMessageListenerAdapter.java:212)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:165)
	... 13 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 19 common frames omitted
12:29:00.044 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 8, CreateTime = 1712050140042, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 99, 111, 110, 118, 101, 114, 116, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 54, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 46, 46, 46, 32, 49, 57, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 12]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -114, -98, 35, -13, -125]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
12:29:01.159 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
12:29:03.217 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 13, CreateTime = 1712050141152, serialized key size = -1, serialized value size = 547, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [102, 52, 51, 55, 99, 50, 53, 51, 53, 54, 98, 98, 99, 97, 97, 100, 45, 102, 52, 51, 55, 99, 50, 53, 51, 53, 54, 98, 98, 99, 97, 97, 100, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001706947",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001706947",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "ISIN"
          
          , "value": "RU0001706947" 
          
        } ,
      
        {
          "code": "FACE_VALUE"
          
          , "value": "" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
12:29:03.221 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
12:29:03.223 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
12:29:04.248 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
12:29:05.290 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
12:29:05.291 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 14, CreateTime = 1712050141154, serialized key size = -1, serialized value size = 548, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [48, 54, 48, 102, 48, 102, 55, 57, 50, 51, 101, 52, 52, 101, 54, 98, 45, 48, 54, 48, 102, 48, 102, 55, 57, 50, 51, 101, 52, 52, 101, 54, 98, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001706947",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001706947",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "ISIN"
          
          , "value": "RU0001706947" 
          
        } ,
      
        {
          "code": "FACE_VALUE"
          
          , "value": " " 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
12:29:05.295 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
12:29:05.295 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 9, CreateTime = 1712050143218, serialized key size = -1, serialized value size = 547, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 44, 32, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 73, 83, 73, 78, 44, 32, 118, 97, 108, 117, 101, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 44, 32, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 73, 83, 73, 78, 44, 32, 118, 97, 108, 117, 101, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 44, 32, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 73, 83, 73, 78, 44, 32, 118, 97, 108, 117, 101, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 44, 32, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 73, 83, 73, 78, 44, 32, 118, 97, 108, 117, 101, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 44, 32, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 73, 83, 73, 78, 44, 32, 118, 97, 108, 117, 101, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 75, 116, 46, 118, 97, 108, 105, 100, 97, 116, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 55, 57, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 75, 116, 46, 118, 97, 108, 105, 100, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 53, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 75, 116, 46, 97, 99, 99, 101, 115, 115, 36, 118, 97, 108, 105, 100, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 49, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 13]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -114, -98, 35, -9, -32]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001706947",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001706947",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "ISIN"
          
          , "value": "RU0001706947" 
          
        } ,
      
        {
          "code": "FACE_VALUE"
          
          , "value": "" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
12:29:06.345 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
12:29:07.390 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
12:29:07.396 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 10, CreateTime = 1712050145292, serialized key size = -1, serialized value size = 548, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 32, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 44, 32, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 73, 83, 73, 78, 44, 32, 118, 97, 108, 117, 101, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 32, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 44, 32, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 73, 83, 73, 78, 44, 32, 118, 97, 108, 117, 101, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 32, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 44, 32, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 73, 83, 73, 78, 44, 32, 118, 97, 108, 117, 101, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 32, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 44, 32, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 73, 83, 73, 78, 44, 32, 118, 97, 108, 117, 101, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 32, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 44, 32, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 73, 83, 73, 78, 44, 32, 118, 97, 108, 117, 101, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 75, 116, 46, 118, 97, 108, 105, 100, 97, 116, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 55, 57, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 75, 116, 46, 118, 97, 108, 105, 100, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 53, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 75, 116, 46, 97, 99, 99, 101, 115, 115, 36, 118, 97, 108, 105, 100, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 49, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 14]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -114, -98, 35, -9, -30]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001706947",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001706947",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "ISIN"
          
          , "value": "RU0001706947" 
          
        } ,
      
        {
          "code": "FACE_VALUE"
          
          , "value": " " 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null), SecurityFieldDto(code=ISIN, value=RU0001706947, timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
12:29:08.428 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
12:29:10.530 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 15, CreateTime = 1712050148412, serialized key size = -1, serialized value size = 292, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [54, 51, 49, 50, 101, 57, 99, 50, 49, 57, 97, 98, 55, 101, 53, 54, 45, 54, 51, 49, 50, 101, 57, 99, 50, 49, 57, 97, 98, 55, 101, 53, 54, 45, 48])], isReadOnly = false), key = null, value = {
  "integrationSource": "NSD",
  "status": "SECURITY_FOUND",
  "isin": "SOME_ISIN",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "SOME_ISIN",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен"
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is java.lang.IllegalArgumentException: Absent security id; nested exception is java.lang.IllegalArgumentException: Absent security id
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: java.lang.IllegalArgumentException: Absent security id
	at ru.alfacapital.mda.api.securitiesapi.model.Security.<init>(Model.kt:28)
	at ru.alfacapital.mda.api.securitiesapi.model.Security.<init>(Model.kt:8)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$toModel$1.invokeSuspend(SecurityService.kt:218)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)
	at kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)
	at kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)
	at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)
	at kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)
	at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)
	at kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.toModel(SecurityService.kt:216)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:78)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$82d436b3.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
12:29:10.539 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
12:29:11.576 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Absent security id; nested exception is java.lang.IllegalArgumentException: Absent security id
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Absent security id; nested exception is java.lang.IllegalArgumentException: Absent security id
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: java.lang.IllegalArgumentException: Absent security id
	at ru.alfacapital.mda.api.securitiesapi.model.Security.<init>(Model.kt:28)
	at ru.alfacapital.mda.api.securitiesapi.model.Security.<init>(Model.kt:8)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$toModel$1.invokeSuspend(SecurityService.kt:218)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)
	at kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)
	at kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)
	at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)
	at kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)
	at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)
	at kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.toModel(SecurityService.kt:216)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:78)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$82d436b3.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
12:29:12.619 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Absent security id; nested exception is java.lang.IllegalArgumentException: Absent security id
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Absent security id; nested exception is java.lang.IllegalArgumentException: Absent security id
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: java.lang.IllegalArgumentException: Absent security id
	at ru.alfacapital.mda.api.securitiesapi.model.Security.<init>(Model.kt:28)
	at ru.alfacapital.mda.api.securitiesapi.model.Security.<init>(Model.kt:8)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$toModel$1.invokeSuspend(SecurityService.kt:218)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)
	at kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)
	at kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)
	at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)
	at kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)
	at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)
	at kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.toModel(SecurityService.kt:216)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:78)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$82d436b3.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
12:29:12.629 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 11, CreateTime = 1712050150531, serialized key size = -1, serialized value size = 292, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 65, 98, 115, 101, 110, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 105, 100, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 65, 98, 115, 101, 110, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 105, 100]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 65, 98, 115, 101, 110, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 105, 100, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 65, 98, 115, 101, 110, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 105, 100, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 65, 98, 115, 101, 110, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 105, 100, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 46, 60, 105, 110, 105, 116, 62, 40, 77, 111, 100, 101, 108, 46, 107, 116, 58, 50, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 46, 60, 105, 110, 105, 116, 62, 40, 77, 111, 100, 101, 108, 46, 107, 116, 58, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 116, 111, 77, 111, 100, 101, 108, 36, 49, 46, 105, 110, 118, 111, 107, 101, 83, 117, 115, 112, 101, 110, 100, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 66, 97, 115, 101, 67, 111, 110, 116, 105, 110, 117, 97, 116, 105, 111, 110, 73, 109, 112, 108, 46, 114, 101, 115, 117, 109, 101, 87, 105, 116, 104, 40, 67, 111, 110, 116, 105, 110, 117, 97, 116, 105, 111, 110, 73, 109, 112, 108, 46, 107, 116, 58, 51, 51, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 68, 105, 115, 112, 97, 116, 99, 104, 101, 100, 84, 97, 115, 107, 46, 114, 117, 110, 40, 68, 105, 115, 112, 97, 116, 99, 104, 101, 100, 84, 97, 115, 107, 46, 107, 116, 58, 49, 48, 54, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 69, 118, 101, 110, 116, 76, 111, 111, 112, 73, 109, 112, 108, 66, 97, 115, 101, 46, 112, 114, 111, 99, 101, 115, 115, 78, 101, 120, 116, 69, 118, 101, 110, 116, 40, 69, 118, 101, 110, 116, 76, 111, 111, 112, 46, 99, 111, 109, 109, 111, 110, 46, 107, 116, 58, 50, 56, 52, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 66, 108, 111, 99, 107, 105, 110, 103, 67, 111, 114, 111, 117, 116, 105, 110, 101, 46, 106, 111, 105, 110, 66, 108, 111, 99, 107, 105, 110, 103, 40, 66, 117, 105, 108, 100, 101, 114, 115, 46, 107, 116, 58, 56, 53, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 66, 117, 105, 108, 100, 101, 114, 115, 75, 116, 95, 95, 66, 117, 105, 108, 100, 101, 114, 115, 75, 116, 46, 114, 117, 110, 66, 108, 111, 99, 107, 105, 110, 103, 40, 66, 117, 105, 108, 100, 101, 114, 115, 46, 107, 116, 58, 53, 57, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 66, 117, 105, 108, 100, 101, 114, 115, 75, 116, 46, 114, 117, 110, 66, 108, 111, 99, 107, 105, 110, 103, 40, 85, 110, 107, 110, 111, 119, 110, 32, 83, 111, 117, 114, 99, 101, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 66, 117, 105, 108, 100, 101, 114, 115, 75, 116, 95, 95, 66, 117, 105, 108, 100, 101, 114, 115, 75, 116, 46, 114, 117, 110, 66, 108, 111, 99, 107, 105, 110, 103, 36, 100, 101, 102, 97, 117, 108, 116, 40, 66, 117, 105, 108, 100, 101, 114, 115, 46, 107, 116, 58, 51, 56, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 66, 117, 105, 108, 100, 101, 114, 115, 75, 116, 46, 114, 117, 110, 66, 108, 111, 99, 107, 105, 110, 103, 36, 100, 101, 102, 97, 117, 108, 116, 40, 85, 110, 107, 110, 111, 119, 110, 32, 83, 111, 117, 114, 99, 101, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 116, 111, 77, 111, 100, 101, 108, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 50, 49, 54, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 55, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 50, 100, 54, 49, 54, 98, 49, 98, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 36, 49, 46, 112, 114, 111, 99, 101, 101, 100, 87, 105, 116, 104, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 50, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 105, 110, 118, 111, 107, 101, 87, 105, 116, 104, 105, 110, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 106, 97, 118, 97, 58, 51, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 56, 50, 100, 52, 51, 54, 98, 51, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 15]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -114, -98, 36, 20, 60]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "integrationSource": "NSD",
  "status": "SECURITY_FOUND",
  "isin": "SOME_ISIN",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "SOME_ISIN",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен"
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Absent security id; nested exception is java.lang.IllegalArgumentException: Absent security id
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalArgumentException: Absent security id
	at ru.alfacapital.mda.api.securitiesapi.model.Security.<init>(Model.kt:28)
	at ru.alfacapital.mda.api.securitiesapi.model.Security.<init>(Model.kt:8)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$toModel$1.invokeSuspend(SecurityService.kt:218)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)
	at kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:284)
	at kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:85)
	at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:59)
	at kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)
	at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:38)
	at kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.toModel(SecurityService.kt:216)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:78)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$82d436b3.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
12:29:13.731 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
12:29:15.835 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 16, CreateTime = 1712050153710, serialized key size = -1, serialized value size = 559, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [99, 101, 51, 50, 53, 50, 101, 97, 56, 97, 48, 53, 55, 54, 100, 54, 45, 99, 101, 51, 50, 53, 50, 101, 97, 56, 97, 48, 53, 55, 54, 100, 54, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001706947",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001706947",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "ISIN"
          
          , "value": "RU0001706947" 
          
        } ,
      
        {
          "code": "UNKNOWN_FIELD_CODE"
          
          , "value": "1000" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is ru.alfacapital.mda.api.securitiesapi.service.SecurityService$FieldNotFound: Could not find field by code 'UNKNOWN_FIELD_CODE'; nested exception is ru.alfacapital.mda.api.securitiesapi.service.SecurityService$FieldNotFound: Could not find field by code 'UNKNOWN_FIELD_CODE'
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: ru.alfacapital.mda.api.securitiesapi.service.SecurityService$FieldNotFound: Could not find field by code 'UNKNOWN_FIELD_CODE'
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.fetchField(SecurityService.kt:257)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.access$fetchField(SecurityService.kt:50)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$toModel$1$1$3$2$1.invokeSuspend(SecurityService.kt:240)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:570)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:750)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:677)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:664)
12:29:15.842 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
12:29:15.862 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 12, CreateTime = 1712050155837, serialized key size = -1, serialized value size = 559, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 70, 105, 101, 108, 100, 78, 111, 116, 70, 111, 117, 110, 100]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 70, 105, 101, 108, 100, 78, 111, 116, 70, 111, 117, 110, 100, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 102, 105, 101, 108, 100, 32, 98, 121, 32, 99, 111, 100, 101, 32, 39, 85, 78, 75, 78, 79, 87, 78, 95, 70, 73, 69, 76, 68, 95, 67, 79, 68, 69, 39, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 70, 105, 101, 108, 100, 78, 111, 116, 70, 111, 117, 110, 100, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 102, 105, 101, 108, 100, 32, 98, 121, 32, 99, 111, 100, 101, 32, 39, 85, 78, 75, 78, 79, 87, 78, 95, 70, 73, 69, 76, 68, 95, 67, 79, 68, 69, 39]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 70, 105, 101, 108, 100, 78, 111, 116, 70, 111, 117, 110, 100, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 102, 105, 101, 108, 100, 32, 98, 121, 32, 99, 111, 100, 101, 32, 39, 85, 78, 75, 78, 79, 87, 78, 95, 70, 73, 69, 76, 68, 95, 67, 79, 68, 69, 39, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 70, 105, 101, 108, 100, 78, 111, 116, 70, 111, 117, 110, 100, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 102, 105, 101, 108, 100, 32, 98, 121, 32, 99, 111, 100, 101, 32, 39, 85, 78, 75, 78, 79, 87, 78, 95, 70, 73, 69, 76, 68, 95, 67, 79, 68, 69, 39, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 70, 105, 101, 108, 100, 78, 111, 116, 70, 111, 117, 110, 100, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 102, 105, 101, 108, 100, 32, 98, 121, 32, 99, 111, 100, 101, 32, 39, 85, 78, 75, 78, 79, 87, 78, 95, 70, 73, 69, 76, 68, 95, 67, 79, 68, 69, 39, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 102, 101, 116, 99, 104, 70, 105, 101, 108, 100, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 50, 53, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 97, 99, 99, 101, 115, 115, 36, 102, 101, 116, 99, 104, 70, 105, 101, 108, 100, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 53, 48, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 116, 111, 77, 111, 100, 101, 108, 36, 49, 36, 49, 36, 51, 36, 50, 36, 49, 46, 105, 110, 118, 111, 107, 101, 83, 117, 115, 112, 101, 110, 100, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 50, 52, 48, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 66, 97, 115, 101, 67, 111, 110, 116, 105, 110, 117, 97, 116, 105, 111, 110, 73, 109, 112, 108, 46, 114, 101, 115, 117, 109, 101, 87, 105, 116, 104, 40, 67, 111, 110, 116, 105, 110, 117, 97, 116, 105, 111, 110, 73, 109, 112, 108, 46, 107, 116, 58, 51, 51, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 68, 105, 115, 112, 97, 116, 99, 104, 101, 100, 84, 97, 115, 107, 46, 114, 117, 110, 40, 68, 105, 115, 112, 97, 116, 99, 104, 101, 100, 84, 97, 115, 107, 46, 107, 116, 58, 49, 48, 54, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 115, 99, 104, 101, 100, 117, 108, 105, 110, 103, 46, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 46, 114, 117, 110, 83, 97, 102, 101, 108, 121, 40, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 46, 107, 116, 58, 53, 55, 48, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 115, 99, 104, 101, 100, 117, 108, 105, 110, 103, 46, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 36, 87, 111, 114, 107, 101, 114, 46, 101, 120, 101, 99, 117, 116, 101, 84, 97, 115, 107, 40, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 46, 107, 116, 58, 55, 53, 48, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 115, 99, 104, 101, 100, 117, 108, 105, 110, 103, 46, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 36, 87, 111, 114, 107, 101, 114, 46, 114, 117, 110, 87, 111, 114, 107, 101, 114, 40, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 46, 107, 116, 58, 54, 55, 55, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 115, 99, 104, 101, 100, 117, 108, 105, 110, 103, 46, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 36, 87, 111, 114, 107, 101, 114, 46, 114, 117, 110, 40, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 46, 107, 116, 58, 54, 54, 52, 41, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 16]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -114, -98, 36, 40, -18]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001706947",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001706947",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "ISIN"
          
          , "value": "RU0001706947" 
          
        } ,
      
        {
          "code": "UNKNOWN_FIELD_CODE"
          
          , "value": "1000" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is ru.alfacapital.mda.api.securitiesapi.service.SecurityService$FieldNotFound: Could not find field by code 'UNKNOWN_FIELD_CODE'; nested exception is ru.alfacapital.mda.api.securitiesapi.service.SecurityService$FieldNotFound: Could not find field by code 'UNKNOWN_FIELD_CODE'
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: ru.alfacapital.mda.api.securitiesapi.service.SecurityService$FieldNotFound: Could not find field by code 'UNKNOWN_FIELD_CODE'
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.fetchField(SecurityService.kt:257)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.access$fetchField(SecurityService.kt:50)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$toModel$1$1$3$2$1.invokeSuspend(SecurityService.kt:240)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:570)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:750)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:677)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:664)
12:29:17.031 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<2>but was:<0>]
12:29:18.270 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<3>but was:<1>]
12:29:20.476 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<2>but was:<1>]
12:29:21.733 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<2>but was:<0>]
12:29:24.279 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN0 value=2024-04-02
12:29:25.457 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN1 value=2024-04-02
12:29:26.611 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN1 value=2024-04-02
12:29:27.830 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN2 value=2024-04-02
12:29:41.317 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN0 value=2020-01-01
12:29:41.341 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN1 value=2022-01-01
12:29:45.964 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN2 value=2022-01-02
12:29:50.705 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
12:29:52.818 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 49, CreateTime = 1712050190682, serialized key size = -1, serialized value size = 529, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [55, 51, 57, 97, 51, 99, 98, 100, 97, 57, 101, 99, 51, 102, 51, 51, 45, 55, 51, 57, 97, 51, 99, 98, 100, 97, 57, 101, 99, 51, 102, 51, 51, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "ISIN1",
  "timestamp": "2024-04-02T12:28:27.287",
  "security": {
    "isin": "ISIN1",
    "name": "isin1 has reg num",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "ISIN"
          
          , "value": "ISIN1" 
          
        } ,
      
        {
          "code": "RULE_NUMBER"
          
          , "value": "REGN1" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveIds(SecurityRepository.kt:292)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:239)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$59c57eab.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:118)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:102)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:78)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$82d436b3.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 52 common frames omitted
12:29:52.822 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
12:29:53.866 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveIds(SecurityRepository.kt:292)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:239)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$59c57eab.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:118)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:102)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:78)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$82d436b3.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 61 common frames omitted
12:29:54.934 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveIds(SecurityRepository.kt:292)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:239)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$59c57eab.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:118)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:102)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:78)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$82d436b3.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 61 common frames omitted
12:29:54.952 [org.springframework.kafka.KafkaListenerEndpointContainer#5-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 13, CreateTime = 1712050192820, serialized key size = -1, serialized value size = 529, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 68, 117, 112, 108, 105, 99, 97, 116, 101, 75, 101, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 68, 117, 112, 108, 105, 99, 97, 116, 101, 75, 101, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 83, 81, 76, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 97, 115, 32, 115, 105, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 119, 104, 101, 114, 101, 32, 105, 115, 105, 110, 32, 61, 32, 63, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 116, 121, 112, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 46, 105, 100, 32, 97, 115, 32, 115, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 46, 105, 100, 32, 97, 115, 32, 105, 100, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 101, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 111, 105, 110, 32, 116, 121, 112, 32, 111, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 105, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 61, 32, 105, 110, 99, 46, 115, 32, 97, 110, 100, 32, 115, 105, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 116, 105, 100, 32, 97, 110, 100, 32, 115, 105, 46, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 105, 100, 116, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 100, 44, 32, 116, 121, 112, 101, 44, 32, 115, 101, 99, 117, 114, 105, 116, 121, 41, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 116, 105, 100, 44, 32, 105, 110, 99, 46, 105, 100, 116, 44, 32, 105, 110, 99, 46, 115, 41, 10, 32, 32, 32, 32, 93, 59, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 68, 117, 112, 108, 105, 99, 97, 116, 101, 75, 101, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 83, 81, 76, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 97, 115, 32, 115, 105, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 119, 104, 101, 114, 101, 32, 105, 115, 105, 110, 32, 61, 32, 63, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 116, 121, 112, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 46, 105, 100, 32, 97, 115, 32, 115, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 46, 105, 100, 32, 97, 115, 32, 105, 100, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 101, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 111, 105, 110, 32, 116, 121, 112, 32, 111, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 105, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 61, 32, 105, 110, 99, 46, 115, 32, 97, 110, 100, 32, 115, 105, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 116, 105, 100, 32, 97, 110, 100, 32, 115, 105, 46, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 105, 100, 116, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 100, 44, 32, 116, 121, 112, 101, 44, 32, 115, 101, 99, 117, 114, 105, 116, 121, 41, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 116, 105, 100, 44, 32, 105, 110, 99, 46, 105, 100, 116, 44, 32, 105, 110, 99, 46, 115, 41, 10, 32, 32, 32, 32, 93, 59, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 68, 117, 112, 108, 105, 99, 97, 116, 101, 75, 101, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 83, 81, 76, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 97, 115, 32, 115, 105, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 119, 104, 101, 114, 101, 32, 105, 115, 105, 110, 32, 61, 32, 63, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 116, 121, 112, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 46, 105, 100, 32, 97, 115, 32, 115, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 46, 105, 100, 32, 97, 115, 32, 105, 100, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 101, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 111, 105, 110, 32, 116, 121, 112, 32, 111, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 105, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 61, 32, 105, 110, 99, 46, 115, 32, 97, 110, 100, 32, 115, 105, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 116, 105, 100, 32, 97, 110, 100, 32, 115, 105, 46, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 105, 100, 116, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 100, 44, 32, 116, 121, 112, 101, 44, 32, 115, 101, 99, 117, 114, 105, 116, 121, 41, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 116, 105, 100, 44, 32, 105, 110, 99, 46, 105, 100, 116, 44, 32, 105, 110, 99, 46, 115, 41, 10, 32, 32, 32, 32, 93, 59, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 68, 117, 112, 108, 105, 99, 97, 116, 101, 75, 101, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 83, 81, 76, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 97, 115, 32, 115, 105, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 119, 104, 101, 114, 101, 32, 105, 115, 105, 110, 32, 61, 32, 63, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 116, 121, 112, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 46, 105, 100, 32, 97, 115, 32, 115, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 46, 105, 100, 32, 97, 115, 32, 105, 100, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 101, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 111, 105, 110, 32, 116, 121, 112, 32, 111, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 105, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 61, 32, 105, 110, 99, 46, 115, 32, 97, 110, 100, 32, 115, 105, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 116, 105, 100, 32, 97, 110, 100, 32, 115, 105, 46, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 105, 100, 116, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 100, 44, 32, 116, 121, 112, 101, 44, 32, 115, 101, 99, 117, 114, 105, 116, 121, 41, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 116, 105, 100, 44, 32, 105, 110, 99, 46, 105, 100, 116, 44, 32, 105, 110, 99, 46, 115, 41, 10, 32, 32, 32, 32, 93, 59, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 68, 117, 112, 108, 105, 99, 97, 116, 101, 75, 101, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 83, 81, 76, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 97, 115, 32, 115, 105, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 119, 104, 101, 114, 101, 32, 105, 115, 105, 110, 32, 61, 32, 63, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 116, 121, 112, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 46, 105, 100, 32, 97, 115, 32, 115, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 46, 105, 100, 32, 97, 115, 32, 105, 100, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 101, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 111, 105, 110, 32, 116, 121, 112, 32, 111, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 105, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 61, 32, 105, 110, 99, 46, 115, 32, 97, 110, 100, 32, 115, 105, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 116, 105, 100, 32, 97, 110, 100, 32, 115, 105, 46, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 105, 100, 116, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 100, 44, 32, 116, 121, 112, 101, 44, 32, 115, 101, 99, 117, 114, 105, 116, 121, 41, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 116, 105, 100, 44, 32, 105, 110, 99, 46, 105, 100, 116, 44, 32, 105, 110, 99, 46, 115, 41, 10, 32, 32, 32, 32, 93, 59, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 83, 81, 76, 69, 114, 114, 111, 114, 67, 111, 100, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 100, 111, 84, 114, 97, 110, 115, 108, 97, 116, 101, 40, 83, 81, 76, 69, 114, 114, 111, 114, 67, 111, 100, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 50, 52, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 55, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 57, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 51, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 55, 54, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 115, 97, 118, 101, 73, 100, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 107, 116, 58, 50, 57, 50, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 115, 97, 118, 101, 70, 105, 101, 108, 100, 86, 97, 108, 117, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 107, 116, 58, 50, 51, 57, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 99, 102, 48, 53, 101, 100, 99, 100, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 115, 117, 112, 112, 111, 114, 116, 46, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 53, 57, 99, 53, 55, 101, 97, 98, 46, 115, 97, 118, 101, 70, 105, 101, 108, 100, 86, 97, 108, 117, 101, 115, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 112, 114, 105, 111, 114, 105, 116, 105, 101, 115, 65, 119, 97, 114, 101, 83, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 49, 49, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 49, 48, 50, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 55, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 50, 100, 54, 49, 54, 98, 49, 98, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 36, 49, 46, 112, 114, 111, 99, 101, 101, 100, 87, 105, 116, 104, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 50, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 105, 110, 118, 111, 107, 101, 87, 105, 116, 104, 105, 110, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 106, 97, 118, 97, 58, 51, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 56, 50, 100, 52, 51, 54, 98, 51, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 99, 111, 114, 101, 46, 118, 51, 46, 81, 117, 101, 114, 121, 69, 120, 101, 99, 117, 116, 111, 114, 73, 109, 112, 108, 46, 114, 101, 99, 101, 105, 118, 101, 69, 114, 114, 111, 114, 82, 101, 115, 112, 111, 110, 115, 101, 40, 81, 117, 101, 114, 121, 69, 120, 101, 99, 117, 116, 111, 114, 73, 109, 112, 108, 46, 106, 97, 118, 97, 58, 50, 54, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 99, 111, 114, 101, 46, 118, 51, 46, 81, 117, 101, 114, 121, 69, 120, 101, 99, 117, 116, 111, 114, 73, 109, 112, 108, 46, 112, 114, 111, 99, 101, 115, 115, 82, 101, 115, 117, 108, 116, 115, 40, 81, 117, 101, 114, 121, 69, 120, 101, 99, 117, 116, 111, 114, 73, 109, 112, 108, 46, 106, 97, 118, 97, 58, 50, 51, 54, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 99, 111, 114, 101, 46, 118, 51, 46, 81, 117, 101, 114, 121, 69, 120, 101, 99, 117, 116, 111, 114, 73, 109, 112, 108, 46, 101, 120, 101, 99, 117, 116, 101, 40, 81, 117, 101, 114, 121, 69, 120, 101, 99, 117, 116, 111, 114, 73, 109, 112, 108, 46, 106, 97, 118, 97, 58, 53, 53, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 106, 100, 98, 99, 46, 80, 103, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 105, 110, 116, 101, 114, 110, 97, 108, 69, 120, 101, 99, 117, 116, 101, 66, 97, 116, 99, 104, 40, 80, 103, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 56, 56, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 106, 100, 98, 99, 46, 80, 103, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 101, 120, 101, 99, 117, 116, 101, 66, 97, 116, 99, 104, 40, 80, 103, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 57, 49, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 106, 100, 98, 99, 46, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 101, 120, 101, 99, 117, 116, 101, 66, 97, 116, 99, 104, 40, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 49, 54, 52, 57, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 122, 97, 120, 120, 101, 114, 46, 104, 105, 107, 97, 114, 105, 46, 112, 111, 111, 108, 46, 80, 114, 111, 120, 121, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 101, 120, 101, 99, 117, 116, 101, 66, 97, 116, 99, 104, 40, 80, 114, 111, 120, 121, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 49, 50, 55, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 122, 97, 120, 120, 101, 114, 46, 104, 105, 107, 97, 114, 105, 46, 112, 111, 111, 108, 46, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 101, 120, 101, 99, 117, 116, 101, 66, 97, 116, 99, 104, 40, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 112, 54, 115, 112, 121, 46, 101, 110, 103, 105, 110, 101, 46, 119, 114, 97, 112, 112, 101, 114, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 101, 120, 101, 99, 117, 116, 101, 66, 97, 116, 99, 104, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 106, 97, 118, 97, 58, 57, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 108, 97, 109, 98, 100, 97, 36, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 36, 52, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 53, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 53, 48, 41, 10, 9, 46, 46, 46, 32, 53, 50, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 49]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -114, -98, 36, -71, 90]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "ISIN1",
  "timestamp": "2024-04-02T12:28:27.287",
  "security": {
    "isin": "ISIN1",
    "name": "isin1 has reg num",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "ISIN"
          
          , "value": "ISIN1" 
          
        } ,
      
        {
          "code": "RULE_NUMBER"
          
          , "value": "REGN1" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin = ?),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveIds(SecurityRepository.kt:292)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:239)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$59c57eab.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:118)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:102)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:78)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$82d436b3.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$d26c2327.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 61 common frames omitted
12:29:57.165 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
12:29:57.166 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1 @coroutine#214] WARN  r.a.m.a.s.service.SecurityService.invokeSuspend - Security invalid field will be ignored: isin=RU0001011101, BASE_VALUE=0
12:29:58.430 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
12:29:59.719 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<2>but was:<0>]
12:30:01.071 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<2>but was:<0>]
12:30:14.834 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
12:30:15.900 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<4>but was:<0>]
12:30:18.026 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<4>but was:<0>]
12:30:20.148 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<4>but was:<0>]
12:30:21.272 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
12:30:22.351 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<2>but was:<0>]
12:30:23.522 [http-nio-6486-exec-13] INFO  r.a.m.a.s.service.SecurityService.saveManualField - Adding field value: PARENT_ISIN, ISIN2, ISIN1, 2022-09-12
12:30:23.532 [http-nio-6486-exec-13] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b3360d532a9fdffa",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6486/securities/ISIN1/field",
  "host" : "localhost",
  "path" : "/securities/ISIN1/field",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "79" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:30:23.532 [http-nio-6486-exec-13] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b3360d532a9fdffa",
  "duration" : 15,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Date" : [ "Tue, 02 Apr 2024 09:30:23 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:30:23.551 [http-nio-6486-exec-2] INFO  r.a.m.a.s.service.SecurityService.saveManualField - Adding field value: PARENT_ISIN, NEW_ISIN, ISIN1, 2022-09-13
12:30:23.558 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f285e0462b059f03",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6486/securities/ISIN1/field",
  "host" : "localhost",
  "path" : "/securities/ISIN1/field",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "82" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:30:23.558 [http-nio-6486-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f285e0462b059f03",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Date" : [ "Tue, 02 Apr 2024 09:30:23 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:30:23.573 [http-nio-6486-exec-15] INFO  r.a.m.a.s.service.SecurityService.saveManualField - Adding field value: PARENT_ISIN, NEW_ISIN_2, ISIN1, 2022-09-13
12:30:23.582 [http-nio-6486-exec-15] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "ff1106254c09bcbb",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6486/securities/ISIN1/field",
  "host" : "localhost",
  "path" : "/securities/ISIN1/field",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "84" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
12:30:23.583 [http-nio-6486-exec-15] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "ff1106254c09bcbb",
  "duration" : 10,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Date" : [ "Tue, 02 Apr 2024 09:30:23 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
12:30:23.710 [http-nio-6486-exec-14] INFO  r.a.m.a.s.service.SecurityService.saveManualField - Adding field value: FIELD-1234, NEW_ISIN_2, ISIN1, 2022-09-13
12:30:23.715 [http-nio-6486-exec-14] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "ec3a0dc4a49f6218",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6486/securities/ISIN1/field",
  "host" : "localhost",
  "path" : "/securities/ISIN1/field",
  "scheme" : "http",
  "port" : "6486",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "83" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6486" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  },
  "body" : {"code":"FIELD-1234","value":"NEW_ISIN_2","timestamp":"2022-09-13T00:00:00"}
}
12:30:23.716 [http-nio-6486-exec-14] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "ec3a0dc4a49f6218",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Tue, 02 Apr 2024 09:30:23 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"message":"Unknown field FIELD-1234"}
}
12:30:23.842 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] INFO  r.a.m.a.s.l.IssuerEventsListener.issuerEvent - Got issuer event: IssuerAddedEvent(securityIds=[ISIN1, ISIN0, ABSENT], fields=[Field(code=NAME, value=Some issuer, timestamp=2024-04-02T12:28:27.287), Field(code=COUNTRY_AC, value=RU, timestamp=2024-04-02T12:28:27.287)], timestamp=2024-04-02T12:28:27.287)
