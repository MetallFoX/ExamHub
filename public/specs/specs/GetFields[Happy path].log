16:09:43.203 [Test worker] WARN  i.g.a.c.e.exam.core.ContentVerifier.verify-gIAlu-s - Content verification error
org.opentest4j.AssertionFailedError: JSON documents are different:
Array "" has different content. Missing values: [{"code":"WKN","name":"Правило 144A","type":"STRING","identifier":false}, {"code":"RULE_144A","name":"WKN код","type":"STRING","identifier":false}], extra values: [{"code":"WKN","name":"WKN код","type":"STRING","identifier":false}, {"code":"RULE_144A","name":"Правило 144A","type":"STRING","identifier":false}], expected: <[{"code":"BASE_VALUE","name":"Амортизируемый номинал","type":"NUMBER","identifier":false},{"code":"FACE_VALUE","name":"Номинал","type":"NUMBER","identifier":false},{"code":"CURRENCY","name":"Валюта номинала","type":"NUMBER","identifier":false},{"code":"EXPIRY_DATE","name":"Дата погашения","type":"DATE","identifier":false},{"code":"OPEN_DATE","name":"Дата начала","type":"DATE","identifier":false},{"code":"CLOSE_DATE","name":"Дата окончания","type":"DATE","identifier":false},{"code":"ACCRUED_INTEREST","name":"НКД","type":"NUMBER","identifier":false},{"code":"CFI","name":"CFI","type":"STRING","identifier":false},{"code":"REG_CODE","type":"STRING","identifier":false},{"code":"SHORT_NAME","name":"Краткое наименование","type":"STRING","identifier":false},{"code":"NAME","name":"Наименование ФИ","type":"STRING","identifier":false},{"code":"NAME_ENG","name":"Наименование ФИ Eng","type":"STRING","identifier":false},{"code":"SHORT_NAME_ENG","name":"Краткое наименование ФИ Eng","type":"STRING","identifier":false},{"code":"SEDOL","name":"Идентификатор SEDOL","type":"STRING","identifier":false},{"code":"DOMESTIC_CODE","name":"Внутренний рег. код","type":"STRING","identifier":false},{"code":"ISSUER_COUNTRY","name":"Страна эмитента","type":"STRING","identifier":false},{"code":"PRIMARY_EXCH","name":"Код основной площадки","type":"STRING","identifier":false},{"code":"AMOUNT_ISSUED","name":"Объем выпуска","type":"NUMBER","identifier":false},{"code":"LEGAL_EXPIRY_DATE","name":"Дата погашения согласно документам","type":"DATE","identifier":false},{"code":"ACCRUED_INTEREST_DAYS_COUNT","name":"Базис расчета НКД","type":"NUMBER","identifier":false},{"code":"ACCRUED_INTEREST_CALC_TYPE","name":"Тип расчета НКД","type":"STRING","identifier":false},{"code":"INDUSTRY_SECTOR","name":"Промышленная отрасль","type":"STRING","identifier":false},{"code":"LEGAL_ENTITY_ID","name":"Идентификатор юр. лица","type":"STRING","identifier":false},{"code":"COUPONS_FREQUENCY","name":"Частота выплаты купонов","type":"NUMBER","identifier":false},{"code":"NEXT_CALL_DATE","name":"Дата следующего кол опциона","type":"DATE","identifier":false},{"code":"COUPON_TYPE","name":"Тип купона","type":"STRING","identifier":false},{"code":"COUPON_VALUE","name":"Размер купона","type":"NUMBER","identifier":false},{"code":"SP_RATING","name":"Рейтинг инструмента от Standard & Poor's","type":"STRING","identifier":false},{"code":"FITCH_RATING","name":"Рейтинг инструмента от Fitch","type":"STRING","identifier":false},{"code":"MOODY_RATING","name":"Рейтинг инструмента от Moody's","type":"STRING","identifier":false},{"code":"BLOOMBERG_RATING","name":"Композитный рейтинг от Bloomberg","type":"STRING","identifier":false},{"code":"SP_ISSUER_CREDIT_RATING_LONG_TERM","name":"Долгосрочный кредитный рейтинг эмитента инструмента от Standard & Poor's ","type":"STRING","identifier":false},{"code":"FITCH_ISSUER_DEFAULT_RATING_LONG_TERM","name":"Долгосрочный рейтинг дефолта эмитента инструмента от Fitch","type":"STRING","identifier":false},{"code":"MOODY_ISSUER_RATING_LONG_TERM","name":"Долгосрочный комплексный рейтинг эмитента от Moody's","type":"STRING","identifier":false},{"code":"NEXT_COUPON_DATE","name":"Дата следующей выплаты по купону","type":"DATE","identifier":false},{"code":"MOODY_ISSUER_RATING","name":"Рейтинг эмитента от Moody's","type":"STRING","identifier":false},{"code":"PLACEMENT_DATE","name":"Дата выпуска","type":"DATE","identifier":false},{"code":"ACCRUED_INTEREST_PER_100","name":"НКД на 100 единиц номинала","type":"NUMBER","identifier":false},{"code":"MIN_LOT","name":"Минимальный лот","type":"NUMBER","identifier":false},{"code":"RISK_COUNTRY","name":"Страна риска","type":"STRING","identifier":false},{"code":"MARKET_SECTOR","name":"Рыночный сектор инструмента","type":"STRING","identifier":false},{"code":"ISSUER","name":"Код эмитента в источнике","type":"STRING","identifier":false},{"code":"ISSUER_NAME","name":"Наименование эмитента","type":"STRING","identifier":false},{"code":"FOR_QUAL_INVESTOR","name":"Для квалифицированных инвесторов","type":"BOOLEAN","identifier":false},{"code":"INDEXATION","name":"Облигация с индексируемым номиналом","type":"BOOLEAN","identifier":false},{"code":"CUSIP","name":"CUSIP-код","type":"STRING","identifier":false},{"code":"ISIN","name":"ISIN","type":"STRING","identifier":true},{"code":"WKN","name":"Правило 144A","type":"STRING","identifier":false},{"code":"RULE_144A","name":"WKN код","type":"STRING","identifier":false},{"code":"RULE_NUMBER","name":"Номер правила ПИФ","type":"STRING","identifier":true},{"code":"BOND_RANK","name":"Тип облигации по приоритету","type":"STRING","identifier":false},{"code":"IS_CONVERTABLE","name":"Конвертируемая в акции облигация","type":"BOOLEAN","identifier":false},{"code":"IS_COCOS","name":"Условно конвертируемая в капитал облигация","type":"BOOLEAN","identifier":false},{"code":"NSD_DATE_FROM","name":"Дата приема на обслуживание в НРД","type":"DATE","identifier":false},{"code":"NSD_DATE_TO","name":"Дата снятия с обслуживания в НРД","type":"DATE","identifier":false},{"code":"HAS_DEFAULT","name":"Наличие дефолта","type":"BOOLEAN","identifier":false},{"code":"BR_TYPE","name":"Тип по класификатору ЦБРФ","type":"STRING","identifier":false},{"code":"STRUCTURED","name":"Структурный продукт","type":"BOOLEAN","identifier":false},{"code":"PARENT_ISIN","name":"ISIN родительского ФИ","type":"STRING","identifier":false},{"code":"PARENT_RATE","name":"Отношение цены текущего ФИ к родительскому","type":"NUMBER","identifier":false},{"code":"NOTE","name":"Нота","type":"BOOLEAN","identifier":false},{"code":"AMORTIZED","name":"Амортизация номинала","type":"BOOLEAN","identifier":false},{"code":"COUPON_RATE","name":"Ставка купона","type":"NUMBER","identifier":false},{"code":"SECURITY_ISSUER_COUNTRY_AC","name":"Страна риска бумаги от АК","type":"STRING","identifier":false},{"code":"SECURITY_ISSUER_INDUSTRY_AC","name":"Индустрия бумаги от АК","type":"STRING","identifier":false},{"code":"UNDERLYINGISIN","name":"ISIN базового актива","type":"STRING","identifier":false},{"code":"UNDERLYINGRATE","name":"Коэффициент базового актива","type":"NUMBER","identifier":false},{"code":"PAYMENT_CURRENCY","name":"Валюта выплат","type":"STRING","identifier":false},{"code":"EXCHANGED_ISINS","name":"Замещенные облигации","type":"STRING","identifier":false},{"code":"HAS_ACCRUED_INTEREST","name":"Флаг наличия НКД по ФИ","type":"BOOLEAN","identifier":false},{"code":"SECURITY_TYPE_AC","name":"Класс актива","type":"STRING","identifier":false}]> but was: <[{"code":"BASE_VALUE","name":"Амортизируемый номинал","type":"NUMBER","identifier":false},{"code":"FACE_VALUE","name":"Номинал","type":"NUMBER","identifier":false},{"code":"CURRENCY","name":"Валюта номинала","type":"NUMBER","identifier":false},{"code":"EXPIRY_DATE","name":"Дата погашения","type":"DATE","identifier":false},{"code":"OPEN_DATE","name":"Дата начала","type":"DATE","identifier":false},{"code":"CLOSE_DATE","name":"Дата окончания","type":"DATE","identifier":false},{"code":"ACCRUED_INTEREST","name":"НКД","type":"NUMBER","identifier":false},{"code":"CFI","name":"CFI","type":"STRING","identifier":false},{"code":"REG_CODE","type":"STRING","identifier":false},{"code":"SHORT_NAME","name":"Краткое наименование","type":"STRING","identifier":false},{"code":"SEDOL","name":"Идентификатор SEDOL","type":"STRING","identifier":false},{"code":"DOMESTIC_CODE","name":"Внутренний рег. код","type":"STRING","identifier":false},{"code":"ISSUER_COUNTRY","name":"Страна эмитента","type":"STRING","identifier":false},{"code":"PRIMARY_EXCH","name":"Код основной площадки","type":"STRING","identifier":false},{"code":"AMOUNT_ISSUED","name":"Объем выпуска","type":"NUMBER","identifier":false},{"code":"LEGAL_EXPIRY_DATE","name":"Дата погашения согласно документам","type":"DATE","identifier":false},{"code":"ACCRUED_INTEREST_DAYS_COUNT","name":"Базис расчета НКД","type":"NUMBER","identifier":false},{"code":"ACCRUED_INTEREST_CALC_TYPE","name":"Тип расчета НКД","type":"STRING","identifier":false},{"code":"INDUSTRY_SECTOR","name":"Промышленная отрасль","type":"STRING","identifier":false},{"code":"LEGAL_ENTITY_ID","name":"Идентификатор юр. лица","type":"STRING","identifier":false},{"code":"COUPONS_FREQUENCY","name":"Частота выплаты купонов","type":"NUMBER","identifier":false},{"code":"NEXT_CALL_DATE","name":"Дата следующего кол опциона","type":"DATE","identifier":false},{"code":"COUPON_TYPE","name":"Тип купона","type":"STRING","identifier":false},{"code":"COUPON_VALUE","name":"Размер купона","type":"NUMBER","identifier":false},{"code":"SP_RATING","name":"Рейтинг инструмента от Standard & Poor's","type":"STRING","identifier":false},{"code":"FITCH_RATING","name":"Рейтинг инструмента от Fitch","type":"STRING","identifier":false},{"code":"MOODY_RATING","name":"Рейтинг инструмента от Moody's","type":"STRING","identifier":false},{"code":"BLOOMBERG_RATING","name":"Композитный рейтинг от Bloomberg","type":"STRING","identifier":false},{"code":"SP_ISSUER_CREDIT_RATING_LONG_TERM","name":"Долгосрочный кредитный рейтинг эмитента инструмента от Standard & Poor's ","type":"STRING","identifier":false},{"code":"FITCH_ISSUER_DEFAULT_RATING_LONG_TERM","name":"Долгосрочный рейтинг дефолта эмитента инструмента от Fitch","type":"STRING","identifier":false},{"code":"MOODY_ISSUER_RATING_LONG_TERM","name":"Долгосрочный комплексный рейтинг эмитента от Moody's","type":"STRING","identifier":false},{"code":"NEXT_COUPON_DATE","name":"Дата следующей выплаты по купону","type":"DATE","identifier":false},{"code":"MOODY_ISSUER_RATING","name":"Рейтинг эмитента от Moody's","type":"STRING","identifier":false},{"code":"PLACEMENT_DATE","name":"Дата выпуска","type":"DATE","identifier":false},{"code":"ACCRUED_INTEREST_PER_100","name":"НКД на 100 единиц номинала","type":"NUMBER","identifier":false},{"code":"MIN_LOT","name":"Минимальный лот","type":"NUMBER","identifier":false},{"code":"RISK_COUNTRY","name":"Страна риска","type":"STRING","identifier":false},{"code":"MARKET_SECTOR","name":"Рыночный сектор инструмента","type":"STRING","identifier":false},{"code":"ISSUER","name":"Код эмитента в источнике","type":"STRING","identifier":false},{"code":"ISSUER_NAME","name":"Наименование эмитента","type":"STRING","identifier":false},{"code":"FOR_QUAL_INVESTOR","name":"Для квалифицированных инвесторов","type":"BOOLEAN","identifier":false},{"code":"INDEXATION","name":"Облигация с индексируемым номиналом","type":"BOOLEAN","identifier":false},{"code":"CUSIP","name":"CUSIP-код","type":"STRING","identifier":false},{"code":"BOND_RANK","name":"Тип облигации по приоритету","type":"STRING","identifier":false},{"code":"IS_CONVERTABLE","name":"Конвертируемая в акции облигация","type":"BOOLEAN","identifier":false},{"code":"IS_COCOS","name":"Условно конвертируемая в капитал облигация","type":"BOOLEAN","identifier":false},{"code":"NSD_DATE_FROM","name":"Дата приема на обслуживание в НРД","type":"DATE","identifier":false},{"code":"NSD_DATE_TO","name":"Дата снятия с обслуживания в НРД","type":"DATE","identifier":false},{"code":"HAS_DEFAULT","name":"Наличие дефолта","type":"BOOLEAN","identifier":false},{"code":"BR_TYPE","name":"Тип по класификатору ЦБРФ","type":"STRING","identifier":false},{"code":"STRUCTURED","name":"Структурный продукт","type":"BOOLEAN","identifier":false},{"code":"PARENT_ISIN","name":"ISIN родительского ФИ","type":"STRING","identifier":false},{"code":"PARENT_RATE","name":"Отношение цены текущего ФИ к родительскому","type":"NUMBER","identifier":false},{"code":"NOTE","name":"Нота","type":"BOOLEAN","identifier":false},{"code":"AMORTIZED","name":"Амортизация номинала","type":"BOOLEAN","identifier":false},{"code":"COUPON_RATE","name":"Ставка купона","type":"NUMBER","identifier":false},{"code":"SECURITY_ISSUER_COUNTRY_AC","name":"Страна риска бумаги от АК","type":"STRING","identifier":false},{"code":"SECURITY_ISSUER_INDUSTRY_AC","name":"Индустрия бумаги от АК","type":"STRING","identifier":false},{"code":"UNDERLYINGISIN","name":"ISIN базового актива","type":"STRING","identifier":false},{"code":"PAYMENT_CURRENCY","name":"Валюта выплат","type":"STRING","identifier":false},{"code":"EXCHANGED_ISINS","name":"Замещенные облигации","type":"STRING","identifier":false},{"code":"HAS_ACCRUED_INTEREST","name":"Флаг наличия НКД по ФИ","type":"BOOLEAN","identifier":false},{"code":"UNDERLYINGRATE","name":"Коэффициент базового актива","type":"NUMBER","identifier":false},{"code":"SECURITY_TYPE_AC","name":"Класс актива","type":"STRING","identifier":false},{"code":"ISIN","name":"ISIN","type":"STRING","identifier":true},{"code":"RULE_NUMBER","name":"Номер правила ПИФ","type":"STRING","identifier":true},{"code":"NAME","name":"Наименование ФИ","type":"STRING","identifier":false},{"code":"NAME_ENG","name":"Наименование ФИ Eng","type":"STRING","identifier":false},{"code":"SHORT_NAME_ENG","name":"Краткое наименование ФИ Eng","type":"STRING","identifier":false},{"code":"WKN","name":"WKN код","type":"STRING","identifier":false},{"code":"RULE_144A","name":"Правило 144A","type":"STRING","identifier":false}]>

	at net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory.createException(ExceptionFactory.java:35)
	at net.javacrumbs.jsonunit.core.internal.ExceptionUtils.createException(ExceptionUtils.java:45)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:617)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:612)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonPartEquals(JsonAssert.java:84)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals(JsonAssert.java:69)
	at io.github.adven27.concordion.extensions.exam.core.JsonVerifier.assertThat(Content.kt:181)
	at io.github.adven27.concordion.extensions.exam.core.ContentVerifier$Default.verify-gIAlu-s(Content.kt:122)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:411)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:394)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.execute(RestCommands.kt:275)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at io.github.adven27.concordion.extensions.exam.core.commands.ExamCommand.execute(ExamCommand.kt:62)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at org.concordion.internal.command.ExampleCommand.execute(ExampleCommand.java:49)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.internal.XMLSpecification.processNode(XMLSpecification.java:60)
	at org.concordion.internal.XMLSpecification.processExample(XMLSpecification.java:76)
	at org.concordion.Concordion.processExample(Concordion.java:92)
	at org.concordion.internal.FixtureRunner.run(FixtureRunner.java:41)
	at org.concordion.integration.junit4.ConcordionRunner.invoke(ConcordionRunner.java:207)
	at org.concordion.integration.junit4.ConcordionRunner$1.invoke(ConcordionRunner.java:31)
	at org.concordion.integration.junit4.ConcordionFrameworkMethod.invokeExplosively(ConcordionFrameworkMethod.java:58)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:191)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:23)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.concordion.integration.junit4.ConcordionRunner.run(ConcordionRunner.java:150)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:110)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:90)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:85)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy2/jdk.proxy2.$Proxy5.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
16:09:43.360 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "ba1a89908d9e9527",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/registries",
  "host" : "localhost",
  "path" : "/securities/registries",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:43.360 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "ba1a89908d9e9527",
  "duration" : 19,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:42 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:43.538 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c4bb3b51aaf9f628",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/registries/moex-high-tech/records",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:43.538 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c4bb3b51aaf9f628",
  "duration" : 38,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:42 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:43.566 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8043b0dec74150fd",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/registries/moex-high-tech/records?isin=ISIN5",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:43.567 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8043b0dec74150fd",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:42 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:43.587 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "cb2ff88d1233968d",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/registries/moex-high-tech/records?from=2020-01-01",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:43.588 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "cb2ff88d1233968d",
  "duration" : 10,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:42 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:43.614 [http-nio-6311-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f49f0d3b1f56110c",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/registries/moex-high-tech/records?to=2022-01-01",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:43.615 [http-nio-6311-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f49f0d3b1f56110c",
  "duration" : 11,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:42 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:43.644 [http-nio-6311-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c4aaee98686a1a24",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/registries/moex-high-tech/records?from=2010-01-01&to=2022-01-01",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:43.644 [http-nio-6311-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c4aaee98686a1a24",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:42 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:43.699 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b1226e53ab4d9c62",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/registries/moex-high-tech/records?size=2",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:43.699 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b1226e53ab4d9c62",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:42 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:43.727 [http-nio-6311-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "e69faaffe57263f8",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/registries/moex-high-tech/records?page=0&size=4",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:43.728 [http-nio-6311-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "e69faaffe57263f8",
  "duration" : 16,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:42 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:43.770 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "93ca8beb2a8a4cf2",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/registries/moex-high-tech/records?page=1&size=4",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:43.771 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "93ca8beb2a8a4cf2",
  "duration" : 17,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:42 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:43.809 [http-nio-6311-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "fd2603dc5c1620d2",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/registries/moex-high-tech/records?page=2&size=4",
  "host" : "localhost",
  "path" : "/securities/registries/moex-high-tech/records",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:43.810 [http-nio-6311-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "fd2603dc5c1620d2",
  "duration" : 15,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:42 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.117 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a1b6b224051d004b",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?securityIds=STRUCTURED1",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.118 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a1b6b224051d004b",
  "duration" : 57,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.141 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c0ad7de9477f2f96",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?securityIds=STRUCTURED1%2CSTRUCTURED2",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.141 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c0ad7de9477f2f96",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.157 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "e8f2e2c3a1fdb1ba",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?securityIds=UNKNOWN",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.158 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "e8f2e2c3a1fdb1ba",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.178 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "e7d21d1dabc6081a",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?securityTypeCodes=SEC",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.179 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "e7d21d1dabc6081a",
  "duration" : 9,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.198 [http-nio-6311-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f8db3d4e43982a2c",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?securityTypeCodes=SEC%2CAFORSEC",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.199 [http-nio-6311-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f8db3d4e43982a2c",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.216 [http-nio-6311-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "de005cbb72a84a67",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?securityTypeCodes=UNKNOWN",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.217 [http-nio-6311-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "de005cbb72a84a67",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.338 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "ed3438dd8acefb45",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?assetIds=ASSET_ISIN1",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.339 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "ed3438dd8acefb45",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.362 [http-nio-6311-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8ea6d6ab1778e9b8",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?assetIds=ASSET_ISIN1%2CASSET_ISIN2",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.362 [http-nio-6311-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8ea6d6ab1778e9b8",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.379 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "9f3d4474a4571525",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?assetIds=UNKNOWN",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.380 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "9f3d4474a4571525",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.520 [http-nio-6311-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b91a0c743afc3b1e",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?size=3",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.521 [http-nio-6311-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b91a0c743afc3b1e",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.553 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "d21b4b3ebf3ff6a6",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?page=1&size=2",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.554 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "d21b4b3ebf3ff6a6",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.572 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f67c0409677d6e62",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?sort=securityId%2Casc",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.573 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f67c0409677d6e62",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.590 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "e35ab818d4f52e1b",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/assets?sort=assetId%2Casc",
  "host" : "localhost",
  "path" : "/securities/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.590 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "e35ab818d4f52e1b",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.746 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "d6f06dbd05cfee47",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/STRUCTURED1/assets",
  "host" : "localhost",
  "path" : "/securities/STRUCTURED1/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.747 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "d6f06dbd05cfee47",
  "duration" : 11,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:44.909 [http-nio-6311-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "91c6062c5efdcb5a",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/NOT_STRUCTURED/assets",
  "host" : "localhost",
  "path" : "/securities/NOT_STRUCTURED/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:44.909 [http-nio-6311-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "91c6062c5efdcb5a",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:44 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:45.174 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "82f26f8333158106",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/UNKNOWN/assets",
  "host" : "localhost",
  "path" : "/securities/UNKNOWN/assets",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.175 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "82f26f8333158106",
  "duration" : 106,
  "protocol" : "HTTP/1.1",
  "status" : 404,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"SECURITY_NOT_FOUND"}
}
16:09:45.408 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "87169a8f6b5406d4",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/byFields?face_value=231",
  "host" : "localhost",
  "path" : "/securities/byFields",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.408 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "87169a8f6b5406d4",
  "duration" : 10,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:45.423 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "9eceb8dc59f14229",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/byFields?source=NSD&face_value=130&currency=122",
  "host" : "localhost",
  "path" : "/securities/byFields",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.424 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "9eceb8dc59f14229",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:45.580 [http-nio-6311-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "9b2c6c0cfcd7af32",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/byFields?source=NSD",
  "host" : "localhost",
  "path" : "/securities/byFields",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.582 [http-nio-6311-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "9b2c6c0cfcd7af32",
  "duration" : 3,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"message":"Fields are required"}
}
16:09:45.772 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8871d8754c96469e",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/search?text=e",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.772 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8871d8754c96469e",
  "duration" : 20,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:45.787 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "929db2744dc0071e",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/search?ids=e",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.787 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "929db2744dc0071e",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:45.800 [http-nio-6311-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "df92d0159ea5486b",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/search?isin=test&name=i",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.800 [http-nio-6311-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "df92d0159ea5486b",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:45.814 [http-nio-6311-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c312d7b5e99d970c",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/search?name=i&size=2",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.814 [http-nio-6311-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c312d7b5e99d970c",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:45.827 [http-nio-6311-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a86a41ec60e87536",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/search?name=i&page=0&size=3",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.827 [http-nio-6311-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a86a41ec60e87536",
  "duration" : 4,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:45.841 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "9420d22834fc921b",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/search?name=i&page=1&size=3",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.841 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "9420d22834fc921b",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:45.857 [http-nio-6311-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c34e274069b760f6",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/search?name=i&page=2&size=3",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.858 [http-nio-6311-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c34e274069b760f6",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:45.975 [http-nio-6311-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "87ed03ffbc529b02",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/search",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.976 [http-nio-6311-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "87ed03ffbc529b02",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:45.989 [http-nio-6311-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f79f5f18851fac5f",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/search?unknown=1&size=wrong&page=wrong",
  "host" : "localhost",
  "path" : "/securities/search",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:45.989 [http-nio-6311-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f79f5f18851fac5f",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:45 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.249 [http-nio-6311-exec-8] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, REG_CODE3], fields=null, sources=null, at=null, from=null, to=null)
16:09:46.256 [http-nio-6311-exec-8] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, REG_CODE3], fields=null, sources=null, at=null, from=null, to=null)
16:09:46.281 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "ab8515e4c9f2564c",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CREG_CODE3",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.282 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "ab8515e4c9f2564c",
  "duration" : 79,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.318 [http-nio-6311-exec-5] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN], ids=[ISIN1, ISIN2, REG_CODE3], fields=null, sources=null, at=null, from=null, to=null)
16:09:46.322 [http-nio-6311-exec-5] DEBUG r.a.m.a.s.service.SecurityService.find - Found 2 securities by filter: SecurityFilter(idTypes=[ISIN], ids=[ISIN1, ISIN2, REG_CODE3], fields=null, sources=null, at=null, from=null, to=null)
16:09:46.328 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8da6e0a68e798ffc",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CREG_CODE3&idTypes=ISIN",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.330 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8da6e0a68e798ffc",
  "duration" : 12,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.348 [http-nio-6311-exec-12] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, RN1], fields=null, sources=null, at=null, from=null, to=null)
16:09:46.353 [http-nio-6311-exec-12] DEBUG r.a.m.a.s.service.SecurityService.find - Found 1 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, RN1], fields=null, sources=null, at=null, from=null, to=null)
16:09:46.356 [http-nio-6311-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a1cde72d684e566c",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CRN1",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.356 [http-nio-6311-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a1cde72d684e566c",
  "duration" : 9,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.368 [http-nio-6311-exec-6] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN], ids=[ISIN1, RN1], fields=null, sources=null, at=null, from=null, to=null)
16:09:46.372 [http-nio-6311-exec-6] DEBUG r.a.m.a.s.service.SecurityService.find - Found 1 securities by filter: SecurityFilter(idTypes=[ISIN], ids=[ISIN1, RN1], fields=null, sources=null, at=null, from=null, to=null)
16:09:46.374 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "d8eeae62380e1273",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CRN1&idTypes=ISIN",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.375 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "d8eeae62380e1273",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.561 [http-nio-6311-exec-7] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=[BASE_VALUE, CURRENCY], sources=null, at=null, from=null, to=null)
16:09:46.566 [http-nio-6311-exec-7] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=[BASE_VALUE, CURRENCY], sources=null, at=null, from=null, to=null)
16:09:46.569 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "940d22eb075e863e",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&fields=BASE_VALUE%2CCURRENCY",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.569 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "940d22eb075e863e",
  "duration" : 9,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.587 [http-nio-6311-exec-1] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=[FACE_VALUE, CURRENCY], sources=null, at=null, from=null, to=null)
16:09:46.598 [http-nio-6311-exec-1] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=[FACE_VALUE, CURRENCY], sources=null, at=null, from=null, to=null)
16:09:46.604 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "ce1ac01c4dd8689c",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&fields=FACE_VALUE%2CCURRENCY",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.605 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "ce1ac01c4dd8689c",
  "duration" : 17,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.628 [http-nio-6311-exec-5] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=[CURRENCY], sources=null, at=null, from=null, to=null)
16:09:46.634 [http-nio-6311-exec-5] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=[CURRENCY], sources=null, at=null, from=null, to=null)
16:09:46.636 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f48d4dcbbd09f4cd",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&fields=CURRENCY",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.637 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f48d4dcbbd09f4cd",
  "duration" : 9,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.649 [http-nio-6311-exec-12] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN2], fields=[FACE_VALUE], sources=null, at=null, from=null, to=null)
16:09:46.652 [http-nio-6311-exec-12] DEBUG r.a.m.a.s.service.SecurityService.find - Found 1 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN2], fields=[FACE_VALUE], sources=null, at=null, from=null, to=null)
16:09:46.654 [http-nio-6311-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "cf65796cab740e29",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN2&fields=FACE_VALUE",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.655 [http-nio-6311-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "cf65796cab740e29",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.666 [http-nio-6311-exec-6] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-01-31T18:45, from=null, to=null)
16:09:46.671 [http-nio-6311-exec-6] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-01-31T18:45, from=null, to=null)
16:09:46.673 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c57adc06280679d1",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&at=2024-01-31T18%3A45%3A00",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.674 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c57adc06280679d1",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.688 [http-nio-6311-exec-7] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-01-31T13:40:02, from=null, to=null)
16:09:46.692 [http-nio-6311-exec-7] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-01-31T13:40:02, from=null, to=null)
16:09:46.695 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c406b3588c1947d2",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&at=2024-01-31T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.695 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c406b3588c1947d2",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.710 [http-nio-6311-exec-1] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-01-30T16:20:02, from=null, to=null)
16:09:46.714 [http-nio-6311-exec-1] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-01-30T16:20:02, from=null, to=null)
16:09:46.716 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "bdd732f283f299f8",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&at=2024-01-30T16%3A20%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.717 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "bdd732f283f299f8",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.728 [http-nio-6311-exec-2] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-01-30T16:20:01, from=null, to=null)
16:09:46.731 [http-nio-6311-exec-2] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=2024-01-30T16:20:01, from=null, to=null)
16:09:46.733 [http-nio-6311-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8e8c3ec367cecc72",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&at=2024-01-30T16%3A20%3A01",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.733 [http-nio-6311-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8e8c3ec367cecc72",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.746 [http-nio-6311-exec-3] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-01-30T16:20:01, to=null)
16:09:46.750 [http-nio-6311-exec-3] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-01-30T16:20:01, to=null)
16:09:46.754 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "ec2cc4dd1748b447",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-01-30T16%3A20%3A01",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.755 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "ec2cc4dd1748b447",
  "duration" : 9,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.775 [http-nio-6311-exec-10] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-01-31T13:40:01, to=null)
16:09:46.780 [http-nio-6311-exec-10] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-01-31T13:40:01, to=null)
16:09:46.783 [http-nio-6311-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f66e2050081e521a",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-01-31T13%3A40%3A01",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.784 [http-nio-6311-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f66e2050081e521a",
  "duration" : 9,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.802 [http-nio-6311-exec-9] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-01-31T13:40:02, to=null)
16:09:46.807 [http-nio-6311-exec-9] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-01-31T13:40:02, to=null)
16:09:46.811 [http-nio-6311-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "917896eac547582e",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-01-31T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.811 [http-nio-6311-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "917896eac547582e",
  "duration" : 10,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.829 [http-nio-6311-exec-11] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-01-30T23:55:55, to=2024-01-30T23:55:55)
16:09:46.832 [http-nio-6311-exec-11] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-01-30T23:55:55, to=2024-01-30T23:55:55)
16:09:46.835 [http-nio-6311-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c2762eba95858224",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-01-30T23%3A55%3A55&to=2024-01-30T23%3A55%3A55",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.835 [http-nio-6311-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c2762eba95858224",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.848 [http-nio-6311-exec-8] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-01-30T16:20:01, to=2024-01-31T13:40:02)
16:09:46.853 [http-nio-6311-exec-8] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-01-30T16:20:01, to=2024-01-31T13:40:02)
16:09:46.857 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a072eab24c016fec",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-01-30T16%3A20%3A01&to=2024-01-31T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.858 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a072eab24c016fec",
  "duration" : 9,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.873 [http-nio-6311-exec-4] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-01-30T23:55:55, to=2024-01-31T00:00)
16:09:46.878 [http-nio-6311-exec-4] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=null, at=null, from=2024-01-30T23:55:55, to=2024-01-31T00:00)
16:09:46.881 [http-nio-6311-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a61df6415ffc74bd",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-01-30T23%3A55%3A55&to=2024-01-31T00%3A00%3A00",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.881 [http-nio-6311-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a61df6415ffc74bd",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:46.897 [http-nio-6311-exec-5] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[UNKNOWN_ISIN], fields=null, sources=null, at=null, from=null, to=null)
16:09:46.899 [http-nio-6311-exec-5] DEBUG r.a.m.a.s.service.SecurityService.find - Found 0 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[UNKNOWN_ISIN], fields=null, sources=null, at=null, from=null, to=null)
16:09:46.901 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8557030e68ee58be",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=UNKNOWN_ISIN",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:46.902 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8557030e68ee58be",
  "duration" : 5,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:47.128 [http-nio-6311-exec-1] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=2024-01-31T18:45, from=null, to=null)
16:09:47.131 [http-nio-6311-exec-1] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=2024-01-31T18:45, from=null, to=null)
16:09:47.135 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f53db8c60034f878",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&at=2024-01-31T18%3A45%3A00&sources=NSD%2CBDL",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.136 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f53db8c60034f878",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:47.150 [http-nio-6311-exec-3] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=null, from=2024-01-30T16:20:01, to=null)
16:09:47.153 [http-nio-6311-exec-3] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=null, from=2024-01-30T16:20:01, to=null)
16:09:47.156 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f75834bb0d6ee3a7",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-01-30T16%3A20%3A01&sources=NSD%2CBDL",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.156 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f75834bb0d6ee3a7",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:47.171 [http-nio-6311-exec-12] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=null, from=2024-01-30T23:55:55, to=2024-01-31T00:00)
16:09:47.175 [http-nio-6311-exec-12] DEBUG r.a.m.a.s.service.SecurityService.find - Found 3 securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=null, from=2024-01-30T23:55:55, to=2024-01-31T00:00)
16:09:47.177 [http-nio-6311-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8a5d41f04ba415b1",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1%2CISIN2%2CISIN3&from=2024-01-30T23%3A55%3A55&to=2024-01-31T00%3A00%3A00&sources=NSD%2CBDL",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.178 [http-nio-6311-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8a5d41f04ba415b1",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:46 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:47.586 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "eb15370f34b718fd",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.587 [http-nio-6311-exec-8] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "eb15370f34b718fd",
  "duration" : 29,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:47 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"ids","message":"must not be null"}]}
}
16:09:47.620 [http-nio-6311-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "9d50ab4c5e90d2fa",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.621 [http-nio-6311-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "9d50ab4c5e90d2fa",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:47 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"ids","message":"size must be between 1 and 100"}]}
}
16:09:47.640 [http-nio-6311-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "db1def42c7662c94",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1&fields=",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.641 [http-nio-6311-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "db1def42c7662c94",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:47 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"fields","message":"size must be between 1 and 100"}]}
}
16:09:47.665 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8402f58c62c8b52e",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1&at=2024-01-31T13%3A40%3A01&from=2024-01-31T13%3A40%3A02&to=2024-01-31T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.667 [http-nio-6311-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8402f58c62c8b52e",
  "duration" : 13,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:47 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"must be null when 'at' not null"},{"path":"to","message":"must be null when 'at' not null"}]}
}
16:09:47.680 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b9d8a658cb278638",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1&at=2024-01-31T13%3A40%3A01&from=2024-01-31T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.681 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b9d8a658cb278638",
  "duration" : 3,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:47 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"must be null when 'at' not null"}]}
}
16:09:47.692 [http-nio-6311-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "e6f0937cd93f1934",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1&at=2024-01-31T13%3A40%3A01&to=2024-01-31T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.692 [http-nio-6311-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "e6f0937cd93f1934",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:47 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"to","message":"must be null when 'at' not null"}]}
}
16:09:47.705 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "d310d52619fea0af",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1&to=2024-01-31T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.705 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "d310d52619fea0af",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:47 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"must not be null when 'to' not null"}]}
}
16:09:47.715 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "c4eda5d64265979f",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1&from=2021-05-01T13%3A40%3A02&to=2021-08-01T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.715 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "c4eda5d64265979f",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:47 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"more than 90 days between 'from' and 'to'"},{"path":"to","message":"more than 90 days between 'from' and 'to'"}]}
}
16:09:47.731 [http-nio-6311-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "e7d6199cf1f6eb5f",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities?ids=ISIN1&from=2021-05-01T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.731 [http-nio-6311-exec-12] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "e7d6199cf1f6eb5f",
  "duration" : 3,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:47 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"more than 90 days between 'from' and now"}]}
}
16:09:47.812 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "b2a2986069a17bea",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:6311/securities/types",
  "host" : "localhost",
  "path" : "/securities/types",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:09:47.812 [http-nio-6311-exec-6] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "b2a2986069a17bea",
  "duration" : 22,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:09:47 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:09:48.635 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
16:09:50.756 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 2, CreateTime = 1707311388491, serialized key size = -1, serialized value size = 437, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [99, 51, 49, 52, 98, 102, 55, 50, 100, 99, 48, 50, 99, 100, 101, 97, 45, 99, 51, 49, 52, 98, 102, 55, 50, 100, 99, 48, 50, 99, 100, 101, 97, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-01-01T00:01:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "11" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where id in (?)),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where id in (?)),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where id in (?)),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:171)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$a0030e51.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:110)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:100)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:76)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$3899c024.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
16:09:50.778 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 3, CreateTime = 1707311388499, serialized key size = -1, serialized value size = 440, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [99, 51, 49, 52, 98, 102, 55, 50, 100, 99, 48, 50, 99, 100, 101, 97, 45, 99, 51, 49, 52, 98, 102, 55, 50, 100, 99, 48, 50, 99, 100, 101, 97, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-01-01T01:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "11.22" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where id in (?)),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where id in (?)),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where id in (?)),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:171)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$a0030e51.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:110)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:100)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:76)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$3899c024.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
16:09:50.787 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 4, CreateTime = 1707311388506, serialized key size = -1, serialized value size = 457, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [99, 51, 49, 52, 98, 102, 55, 50, 100, 99, 48, 50, 99, 100, 101, 97, 45, 99, 51, 49, 52, 98, 102, 55, 50, 100, 99, 48, 50, 99, 100, 101, 97, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-02-02T00:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "0.00800000000000000001" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where id in (?)),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where id in (?)),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where id in (?)),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:171)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$a0030e51.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:110)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:100)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:76)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$3899c024.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
16:09:50.806 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 5, CreateTime = 1707311388513, serialized key size = -1, serialized value size = 456, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [99, 51, 49, 52, 98, 102, 55, 50, 100, 99, 48, 50, 99, 100, 101, 97, 45, 99, 51, 49, 52, 98, 102, 55, 50, 100, 99, 48, 50, 99, 100, 101, 97, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-02-01T00:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "999999999999999999.99" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where id in (?)),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where id in (?)),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into field_value as fv
    using (
        with
         ids as (select distinct security from security_id where id in (?)),
         src as (select id from source where code = ?)
        select
            ids.security as security,
            ? as field,
            ? as value,
            src.id as source,
            (select id from field where code = 'ACCRUED_INTEREST') = ? as accri,
            (?)::date as date,
          (
                select max(xdate)
                from (
                    select first_value(date) over (partition by security, field, source order by date desc, created_at desc) xdate
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_date,
            (
                select max(xcreated_at)
                from (
                    select first_value(created_at) over (partition by security, field, source order by date desc, created_at desc) xcreated_at
                    from field_value
                    where security = ids.security
                      AND field = ?
                      AND source = src.id
                      AND date <= ?
                ) x
            ) as latest_created
        from src left join ids on true) inc
        on (
        (inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.source = inc.source and
        fv.date = inc.date and
        fv.created_at = latest_created)
        or
        (not inc.accri and
        fv.security = inc.security and
        fv.field = inc.field and
        fv.value = inc.value and
        fv.source = inc.source and
        fv.date = latest_date and
        fv.created_at = latest_created)
    )
    when not matched then
        insert (security, field, value, source, date)
        values (inc.security, inc.field, inc.value, inc.source, inc.date)
    ]; ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:171)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$a0030e51.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:110)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:100)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:76)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$3899c024.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "field_value_sec_fld_date_created_src_uk"
  Подробности: Key (security, field, date, source, created_at)=(5, 2, 2020-01-01, 11, 2024-02-07 16:09:48.580659) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
16:09:50.821 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
16:09:53.380 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 7, CreateTime = 1707311393364, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [55, 99, 48, 56, 56, 99, 48, 57, 100, 57, 57, 97, 102, 102, 98, 55, 45, 55, 99, 48, 56, 56, 99, 48, 57, 100, 57, 57, 97, 102, 102, 98, 55, 45, 48]), RecordHeader(key = springDeserializerExceptionValue, value = [-84, -19, 0, 5, 115, 114, 0, 69, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 114, -24, -116, 126, -45, 78, 67, -115, 2, 0, 2, 90, 0, 5, 105, 115, 75, 101, 121, 91, 0, 4, 100, 97, 116, 97, 116, 0, 2, 91, 66, 120, 114, 0, 40, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 55, -37, -114, -57, -118, -114, 85, 2, 0, 1, 76, 0, 8, 108, 111, 103, 76, 101, 118, 101, 108, 116, 0, 48, 76, 111, 114, 103, 47, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 47, 107, 97, 102, 107, 97, 47, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 59, 120, 114, 0, 47, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 111, 114, 101, 46, 78, 101, 115, 116, 101, 100, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 75, 126, 118, 72, -53, -113, -97, 0, 2, 0, 0, 120, 114, 0, 26, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -98, 95, 6, 71, 10, 52, -125, -27, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 120, 99, 101, 112, 116, 105, 111, 110, -48, -3, 31, 62, 26, 59, 28, -60, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 111, 119, 97, 98, 108, 101, -43, -58, 53, 39, 57, 119, -72, -53, 3, 0, 4, 76, 0, 5, 99, 97, 117, 115, 101, 116, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 76, 0, 13, 100, 101, 116, 97, 105, 108, 77, 101, 115, 115, 97, 103, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 0, 10, 115, 116, 97, 99, 107, 84, 114, 97, 99, 101, 116, 0, 30, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 76, 0, 20, 115, 117, 112, 112, 114, 101, 115, 115, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 113, 0, 126, 0, 5, 113, 0, 126, 0, 13, 116, 2, -60, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 117, 114, 0, 30, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 2, 70, 42, 60, 60, -3, 34, 57, 2, 0, 0, 120, 112, 0, 0, 0, 19, 115, 114, 0, 27, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 97, 9, -59, -102, 38, 54, -35, -123, 2, 0, 8, 66, 0, 6, 102, 111, 114, 109, 97, 116, 73, 0, 10, 108, 105, 110, 101, 78, 117, 109, 98, 101, 114, 76, 0, 15, 99, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 14, 100, 101, 99, 108, 97, 114, 105, 110, 103, 67, 108, 97, 115, 115, 113, 0, 126, 0, 9, 76, 0, 8, 102, 105, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 101, 116, 104, 111, 100, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 111, 100, 117, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 13, 109, 111, 100, 117, 108, 101, 86, 101, 114, 115, 105, 111, 110, 113, 0, 126, 0, 9, 120, 112, 1, 0, 0, 0, -95, 116, 0, 3, 97, 112, 112, 116, 0, 63, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 116, 0, 23, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 116, 0, 24, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 116, 0, 74, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 116, 0, 35, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 7, 99, 111, 110, 118, 101, 114, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 13, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 9, 116, 111, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 116, 0, 79, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 116, 0, 41, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 18, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 116, 0, 9, 111, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 116, 0, 81, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 116, 0, 34, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 116, 0, 22, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 37, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 20, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 21, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 14, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 13, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 3, 114, 117, 110, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 116, 0, 46, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 116, 0, 14, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 116, 0, 4, 99, 97, 108, 108, 116, 0, 9, 106, 97, 118, 97, 46, 98, 97, 115, 101, 116, 0, 8, 49, 56, 46, 48, 46, 49, 46, 49, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 116, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 116, 0, 15, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 116, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 116, 0, 11, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 114, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 69, 109, 112, 116, 121, 76, 105, 115, 116, 122, -72, 23, -76, 60, -89, -98, -34, 2, 0, 0, 120, 112, 120, 116, 0, 21, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 117, 113, 0, 126, 0, 15, 0, 0, 0, 19, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 20, 113, 0, 126, 0, 21, 113, 0, 126, 0, 22, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 26, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 28, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 30, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 34, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 41, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 43, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 45, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 47, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 49, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 51, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 53, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 55, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 57, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 113, 0, 126, 0, 59, 113, 0, 126, 0, 60, 113, 0, 126, 0, 61, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 113, 0, 126, 0, 65, 113, 0, 126, 0, 66, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 113, 0, 126, 0, 68, 113, 0, 126, 0, 69, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 113, 0, 126, 0, 71, 120, 126, 114, 0, 46, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 112, 116, 0, 5, 69, 82, 82, 79, 82, 0, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 2, 123, 125])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.convert(BatchMessagingMessageConverter.java:247)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.obtainPayload(BatchMessagingMessageConverter.java:216)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.toMessage(BatchMessagingMessageConverter.java:175)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.toMessagingMessage(BatchMessagingMessageListenerAdapter.java:212)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:165)
	... 13 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 19 common frames omitted
16:09:53.394 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 4, CreateTime = 1707311393388, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 99, 111, 110, 118, 101, 114, 116, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 54, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 46, 46, 46, 32, 49, 57, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 7]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, -125, -80, 106, 84]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
16:09:53.398 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 8, CreateTime = 1707311393366, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [55, 100, 49, 57, 97, 97, 48, 55, 53, 52, 51, 54, 50, 53, 102, 100, 45, 55, 100, 49, 57, 97, 97, 48, 55, 53, 52, 51, 54, 50, 53, 102, 100, 45, 48]), RecordHeader(key = springDeserializerExceptionValue, value = [-84, -19, 0, 5, 115, 114, 0, 69, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 114, -24, -116, 126, -45, 78, 67, -115, 2, 0, 2, 90, 0, 5, 105, 115, 75, 101, 121, 91, 0, 4, 100, 97, 116, 97, 116, 0, 2, 91, 66, 120, 114, 0, 40, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 55, -37, -114, -57, -118, -114, 85, 2, 0, 1, 76, 0, 8, 108, 111, 103, 76, 101, 118, 101, 108, 116, 0, 48, 76, 111, 114, 103, 47, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 47, 107, 97, 102, 107, 97, 47, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 59, 120, 114, 0, 47, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 111, 114, 101, 46, 78, 101, 115, 116, 101, 100, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 75, 126, 118, 72, -53, -113, -97, 0, 2, 0, 0, 120, 114, 0, 26, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -98, 95, 6, 71, 10, 52, -125, -27, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 120, 99, 101, 112, 116, 105, 111, 110, -48, -3, 31, 62, 26, 59, 28, -60, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 111, 119, 97, 98, 108, 101, -43, -58, 53, 39, 57, 119, -72, -53, 3, 0, 4, 76, 0, 5, 99, 97, 117, 115, 101, 116, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 76, 0, 13, 100, 101, 116, 97, 105, 108, 77, 101, 115, 115, 97, 103, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 0, 10, 115, 116, 97, 99, 107, 84, 114, 97, 99, 101, 116, 0, 30, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 76, 0, 20, 115, 117, 112, 112, 114, 101, 115, 115, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 113, 0, 126, 0, 5, 113, 0, 126, 0, 13, 116, 2, -60, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 117, 114, 0, 30, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 2, 70, 42, 60, 60, -3, 34, 57, 2, 0, 0, 120, 112, 0, 0, 0, 19, 115, 114, 0, 27, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 97, 9, -59, -102, 38, 54, -35, -123, 2, 0, 8, 66, 0, 6, 102, 111, 114, 109, 97, 116, 73, 0, 10, 108, 105, 110, 101, 78, 117, 109, 98, 101, 114, 76, 0, 15, 99, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 14, 100, 101, 99, 108, 97, 114, 105, 110, 103, 67, 108, 97, 115, 115, 113, 0, 126, 0, 9, 76, 0, 8, 102, 105, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 101, 116, 104, 111, 100, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 111, 100, 117, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 13, 109, 111, 100, 117, 108, 101, 86, 101, 114, 115, 105, 111, 110, 113, 0, 126, 0, 9, 120, 112, 1, 0, 0, 0, -95, 116, 0, 3, 97, 112, 112, 116, 0, 63, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 116, 0, 23, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 116, 0, 24, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 116, 0, 74, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 116, 0, 35, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 7, 99, 111, 110, 118, 101, 114, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 13, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 9, 116, 111, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 116, 0, 79, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 116, 0, 41, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 18, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 116, 0, 9, 111, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 116, 0, 81, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 116, 0, 34, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 116, 0, 22, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 37, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 20, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 21, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 14, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 13, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 3, 114, 117, 110, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 116, 0, 46, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 116, 0, 14, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 116, 0, 4, 99, 97, 108, 108, 116, 0, 9, 106, 97, 118, 97, 46, 98, 97, 115, 101, 116, 0, 8, 49, 56, 46, 48, 46, 49, 46, 49, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 116, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 116, 0, 15, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 116, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 116, 0, 11, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 114, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 69, 109, 112, 116, 121, 76, 105, 115, 116, 122, -72, 23, -76, 60, -89, -98, -34, 2, 0, 0, 120, 112, 120, 116, 0, 21, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 117, 113, 0, 126, 0, 15, 0, 0, 0, 19, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 20, 113, 0, 126, 0, 21, 113, 0, 126, 0, 22, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 26, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 28, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 30, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 34, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 41, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 43, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 45, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 47, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 49, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 51, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 53, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 55, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 57, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 113, 0, 126, 0, 59, 113, 0, 126, 0, 60, 113, 0, 126, 0, 61, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 113, 0, 126, 0, 65, 113, 0, 126, 0, 66, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 113, 0, 126, 0, 68, 113, 0, 126, 0, 69, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 113, 0, 126, 0, 71, 120, 126, 114, 0, 46, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 112, 116, 0, 5, 69, 82, 82, 79, 82, 0, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 2, 123, 125])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.convert(BatchMessagingMessageConverter.java:247)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.obtainPayload(BatchMessagingMessageConverter.java:216)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.toMessage(BatchMessagingMessageConverter.java:175)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.toMessagingMessage(BatchMessagingMessageListenerAdapter.java:212)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:165)
	... 13 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 19 common frames omitted
16:09:53.419 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 9, CreateTime = 1707311393367, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [52, 54, 57, 55, 50, 99, 49, 102, 49, 48, 54, 52, 102, 54, 50, 55, 45, 52, 54, 57, 55, 50, 99, 49, 102, 49, 48, 54, 52, 102, 54, 50, 55, 45, 48]), RecordHeader(key = springDeserializerExceptionValue, value = [-84, -19, 0, 5, 115, 114, 0, 69, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 114, -24, -116, 126, -45, 78, 67, -115, 2, 0, 2, 90, 0, 5, 105, 115, 75, 101, 121, 91, 0, 4, 100, 97, 116, 97, 116, 0, 2, 91, 66, 120, 114, 0, 40, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 55, -37, -114, -57, -118, -114, 85, 2, 0, 1, 76, 0, 8, 108, 111, 103, 76, 101, 118, 101, 108, 116, 0, 48, 76, 111, 114, 103, 47, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 47, 107, 97, 102, 107, 97, 47, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 59, 120, 114, 0, 47, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 111, 114, 101, 46, 78, 101, 115, 116, 101, 100, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 75, 126, 118, 72, -53, -113, -97, 0, 2, 0, 0, 120, 114, 0, 26, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -98, 95, 6, 71, 10, 52, -125, -27, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 120, 99, 101, 112, 116, 105, 111, 110, -48, -3, 31, 62, 26, 59, 28, -60, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 111, 119, 97, 98, 108, 101, -43, -58, 53, 39, 57, 119, -72, -53, 3, 0, 4, 76, 0, 5, 99, 97, 117, 115, 101, 116, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 76, 0, 13, 100, 101, 116, 97, 105, 108, 77, 101, 115, 115, 97, 103, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 0, 10, 115, 116, 97, 99, 107, 84, 114, 97, 99, 101, 116, 0, 30, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 76, 0, 20, 115, 117, 112, 112, 114, 101, 115, 115, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 113, 0, 126, 0, 5, 113, 0, 126, 0, 13, 116, 2, -60, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 117, 114, 0, 30, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 2, 70, 42, 60, 60, -3, 34, 57, 2, 0, 0, 120, 112, 0, 0, 0, 19, 115, 114, 0, 27, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 97, 9, -59, -102, 38, 54, -35, -123, 2, 0, 8, 66, 0, 6, 102, 111, 114, 109, 97, 116, 73, 0, 10, 108, 105, 110, 101, 78, 117, 109, 98, 101, 114, 76, 0, 15, 99, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 14, 100, 101, 99, 108, 97, 114, 105, 110, 103, 67, 108, 97, 115, 115, 113, 0, 126, 0, 9, 76, 0, 8, 102, 105, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 101, 116, 104, 111, 100, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 111, 100, 117, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 13, 109, 111, 100, 117, 108, 101, 86, 101, 114, 115, 105, 111, 110, 113, 0, 126, 0, 9, 120, 112, 1, 0, 0, 0, -95, 116, 0, 3, 97, 112, 112, 116, 0, 63, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 116, 0, 23, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 116, 0, 24, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 116, 0, 74, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 116, 0, 35, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 7, 99, 111, 110, 118, 101, 114, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 13, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 9, 116, 111, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 116, 0, 79, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 116, 0, 41, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 18, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 116, 0, 9, 111, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 116, 0, 81, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 116, 0, 34, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 116, 0, 22, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 37, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 20, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 21, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 14, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 13, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 3, 114, 117, 110, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 116, 0, 46, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 116, 0, 14, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 116, 0, 4, 99, 97, 108, 108, 116, 0, 9, 106, 97, 118, 97, 46, 98, 97, 115, 101, 116, 0, 8, 49, 56, 46, 48, 46, 49, 46, 49, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 116, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 116, 0, 15, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 116, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 116, 0, 11, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 114, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 69, 109, 112, 116, 121, 76, 105, 115, 116, 122, -72, 23, -76, 60, -89, -98, -34, 2, 0, 0, 120, 112, 120, 116, 0, 21, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 117, 113, 0, 126, 0, 15, 0, 0, 0, 19, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 20, 113, 0, 126, 0, 21, 113, 0, 126, 0, 22, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 26, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 28, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 30, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 34, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 41, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 43, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 45, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 47, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 49, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 51, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 53, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 55, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 57, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 113, 0, 126, 0, 59, 113, 0, 126, 0, 60, 113, 0, 126, 0, 61, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 113, 0, 126, 0, 65, 113, 0, 126, 0, 66, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 113, 0, 126, 0, 68, 113, 0, 126, 0, 69, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 113, 0, 126, 0, 71, 120, 126, 114, 0, 46, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 112, 116, 0, 5, 69, 82, 82, 79, 82, 0, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 2, 123, 125])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.convert(BatchMessagingMessageConverter.java:247)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.obtainPayload(BatchMessagingMessageConverter.java:216)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.toMessage(BatchMessagingMessageConverter.java:175)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.toMessagingMessage(BatchMessagingMessageListenerAdapter.java:212)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:165)
	... 13 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 19 common frames omitted
16:09:53.430 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 5, CreateTime = 1707311393401, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 99, 111, 110, 118, 101, 114, 116, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 54, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 46, 46, 46, 32, 49, 57, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 8]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, -125, -80, 106, 86]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
16:09:53.432 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at org.springframework.kafka.listener.FailedBatchProcessor.seekOrRecover(FailedBatchProcessor.java:202)
	at org.springframework.kafka.listener.FailedBatchProcessor.doHandle(FailedBatchProcessor.java:136)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleBatch(DefaultErrorHandler.java:143)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchErrorHandler(KafkaMessageListenerContainer.java:2325)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2160)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	... 8 common frames omitted
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.convert(BatchMessagingMessageConverter.java:247)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.obtainPayload(BatchMessagingMessageConverter.java:216)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.toMessage(BatchMessagingMessageConverter.java:175)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.toMessagingMessage(BatchMessagingMessageListenerAdapter.java:212)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:165)
	... 13 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 19 common frames omitted
16:09:53.441 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 6, CreateTime = 1707311393421, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 99, 111, 110, 118, 101, 114, 116, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 54, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 46, 46, 46, 32, 49, 57, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 9]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, -125, -80, 106, 87]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
16:09:53.962 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 11, CreateTime = 1707311393370, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [101, 97, 57, 53, 50, 101, 49, 55, 102, 56, 57, 102, 51, 101, 51, 57, 45, 101, 97, 57, 53, 50, 101, 49, 55, 102, 56, 57, 102, 51, 101, 51, 57, 45, 48]), RecordHeader(key = springDeserializerExceptionValue, value = [-84, -19, 0, 5, 115, 114, 0, 69, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 114, -24, -116, 126, -45, 78, 67, -115, 2, 0, 2, 90, 0, 5, 105, 115, 75, 101, 121, 91, 0, 4, 100, 97, 116, 97, 116, 0, 2, 91, 66, 120, 114, 0, 40, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 55, -37, -114, -57, -118, -114, 85, 2, 0, 1, 76, 0, 8, 108, 111, 103, 76, 101, 118, 101, 108, 116, 0, 48, 76, 111, 114, 103, 47, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 47, 107, 97, 102, 107, 97, 47, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 59, 120, 114, 0, 47, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 111, 114, 101, 46, 78, 101, 115, 116, 101, 100, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 75, 126, 118, 72, -53, -113, -97, 0, 2, 0, 0, 120, 114, 0, 26, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -98, 95, 6, 71, 10, 52, -125, -27, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 120, 99, 101, 112, 116, 105, 111, 110, -48, -3, 31, 62, 26, 59, 28, -60, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 111, 119, 97, 98, 108, 101, -43, -58, 53, 39, 57, 119, -72, -53, 3, 0, 4, 76, 0, 5, 99, 97, 117, 115, 101, 116, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 76, 0, 13, 100, 101, 116, 97, 105, 108, 77, 101, 115, 115, 97, 103, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 0, 10, 115, 116, 97, 99, 107, 84, 114, 97, 99, 101, 116, 0, 30, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 76, 0, 20, 115, 117, 112, 112, 114, 101, 115, 115, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 113, 0, 126, 0, 5, 113, 0, 126, 0, 13, 116, 2, -60, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 117, 114, 0, 30, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 2, 70, 42, 60, 60, -3, 34, 57, 2, 0, 0, 120, 112, 0, 0, 0, 19, 115, 114, 0, 27, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 97, 9, -59, -102, 38, 54, -35, -123, 2, 0, 8, 66, 0, 6, 102, 111, 114, 109, 97, 116, 73, 0, 10, 108, 105, 110, 101, 78, 117, 109, 98, 101, 114, 76, 0, 15, 99, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 14, 100, 101, 99, 108, 97, 114, 105, 110, 103, 67, 108, 97, 115, 115, 113, 0, 126, 0, 9, 76, 0, 8, 102, 105, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 101, 116, 104, 111, 100, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 111, 100, 117, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 13, 109, 111, 100, 117, 108, 101, 86, 101, 114, 115, 105, 111, 110, 113, 0, 126, 0, 9, 120, 112, 1, 0, 0, 0, -95, 116, 0, 3, 97, 112, 112, 116, 0, 63, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 116, 0, 23, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 116, 0, 24, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 116, 0, 74, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 116, 0, 35, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 7, 99, 111, 110, 118, 101, 114, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 13, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 9, 116, 111, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 116, 0, 79, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 116, 0, 41, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 18, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 116, 0, 9, 111, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 116, 0, 81, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 116, 0, 34, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 116, 0, 22, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 37, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 20, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 21, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 14, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 13, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 3, 114, 117, 110, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 116, 0, 46, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 116, 0, 14, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 116, 0, 4, 99, 97, 108, 108, 116, 0, 9, 106, 97, 118, 97, 46, 98, 97, 115, 101, 116, 0, 8, 49, 56, 46, 48, 46, 49, 46, 49, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 116, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 116, 0, 15, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 116, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 116, 0, 11, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 114, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 69, 109, 112, 116, 121, 76, 105, 115, 116, 122, -72, 23, -76, 60, -89, -98, -34, 2, 0, 0, 120, 112, 120, 116, 0, 21, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 117, 113, 0, 126, 0, 15, 0, 0, 0, 19, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 20, 113, 0, 126, 0, 21, 113, 0, 126, 0, 22, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 26, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 28, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 30, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 34, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 41, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 43, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 45, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 47, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 49, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 51, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 53, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 55, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 57, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 113, 0, 126, 0, 59, 113, 0, 126, 0, 60, 113, 0, 126, 0, 61, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 113, 0, 126, 0, 65, 113, 0, 126, 0, 66, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 113, 0, 126, 0, 68, 113, 0, 126, 0, 69, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 113, 0, 126, 0, 71, 120, 126, 114, 0, 46, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 112, 116, 0, 5, 69, 82, 82, 79, 82, 0, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 2, 123, 125])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-1; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-1
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-1
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.convert(BatchMessagingMessageConverter.java:247)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.obtainPayload(BatchMessagingMessageConverter.java:216)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.toMessage(BatchMessagingMessageConverter.java:175)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.toMessagingMessage(BatchMessagingMessageListenerAdapter.java:212)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:165)
	... 13 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 19 common frames omitted
16:09:53.966 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 7, CreateTime = 1707311393964, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 99, 111, 110, 118, 101, 114, 116, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 54, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 46, 46, 46, 32, 49, 57, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 11]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, -125, -80, 106, 90]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
16:09:55.653 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 12, CreateTime = 1707311395646, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [98, 54, 51, 101, 48, 101, 99, 57, 52, 98, 53, 55, 49, 99, 51, 98, 45, 98, 54, 51, 101, 48, 101, 99, 57, 52, 98, 53, 55, 49, 99, 51, 98, 45, 48]), RecordHeader(key = springDeserializerExceptionValue, value = [-84, -19, 0, 5, 115, 114, 0, 69, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 114, -24, -116, 126, -45, 78, 67, -115, 2, 0, 2, 90, 0, 5, 105, 115, 75, 101, 121, 91, 0, 4, 100, 97, 116, 97, 116, 0, 2, 91, 66, 120, 114, 0, 40, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 67, 55, -37, -114, -57, -118, -114, 85, 2, 0, 1, 76, 0, 8, 108, 111, 103, 76, 101, 118, 101, 108, 116, 0, 48, 76, 111, 114, 103, 47, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 47, 107, 97, 102, 107, 97, 47, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 59, 120, 114, 0, 47, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 111, 114, 101, 46, 78, 101, 115, 116, 101, 100, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 75, 126, 118, 72, -53, -113, -97, 0, 2, 0, 0, 120, 114, 0, 26, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, -98, 95, 6, 71, 10, 52, -125, -27, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 120, 99, 101, 112, 116, 105, 111, 110, -48, -3, 31, 62, 26, 59, 28, -60, 2, 0, 0, 120, 114, 0, 19, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 111, 119, 97, 98, 108, 101, -43, -58, 53, 39, 57, 119, -72, -53, 3, 0, 4, 76, 0, 5, 99, 97, 117, 115, 101, 116, 0, 21, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 76, 0, 13, 100, 101, 116, 97, 105, 108, 77, 101, 115, 115, 97, 103, 101, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 0, 10, 115, 116, 97, 99, 107, 84, 114, 97, 99, 101, 116, 0, 30, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 76, 0, 20, 115, 117, 112, 112, 114, 101, 115, 115, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 116, 0, 16, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 76, 105, 115, 116, 59, 120, 112, 115, 113, 0, 126, 0, 5, 113, 0, 126, 0, 13, 116, 2, -60, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 117, 114, 0, 30, 91, 76, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 59, 2, 70, 42, 60, 60, -3, 34, 57, 2, 0, 0, 120, 112, 0, 0, 0, 19, 115, 114, 0, 27, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101, 69, 108, 101, 109, 101, 110, 116, 97, 9, -59, -102, 38, 54, -35, -123, 2, 0, 8, 66, 0, 6, 102, 111, 114, 109, 97, 116, 73, 0, 10, 108, 105, 110, 101, 78, 117, 109, 98, 101, 114, 76, 0, 15, 99, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 14, 100, 101, 99, 108, 97, 114, 105, 110, 103, 67, 108, 97, 115, 115, 113, 0, 126, 0, 9, 76, 0, 8, 102, 105, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 101, 116, 104, 111, 100, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 10, 109, 111, 100, 117, 108, 101, 78, 97, 109, 101, 113, 0, 126, 0, 9, 76, 0, 13, 109, 111, 100, 117, 108, 101, 86, 101, 114, 115, 105, 111, 110, 113, 0, 126, 0, 9, 120, 112, 1, 0, 0, 0, -95, 116, 0, 3, 97, 112, 112, 116, 0, 63, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 116, 0, 23, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 116, 0, 24, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 116, 0, 74, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 116, 0, 35, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 7, 99, 111, 110, 118, 101, 114, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 13, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 116, 0, 9, 116, 111, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 116, 0, 79, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 116, 0, 41, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 116, 0, 18, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 116, 0, 9, 111, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 116, 0, 81, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 116, 0, 34, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 116, 0, 22, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 37, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 20, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 21, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 14, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 19, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 13, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 116, 0, 3, 114, 117, 110, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 116, 0, 46, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 116, 0, 14, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 116, 0, 4, 99, 97, 108, 108, 116, 0, 9, 106, 97, 118, 97, 46, 98, 97, 115, 101, 116, 0, 8, 49, 56, 46, 48, 46, 49, 46, 49, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 116, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 116, 0, 15, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 116, 0, 16, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 116, 0, 11, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 114, 0, 31, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 69, 109, 112, 116, 121, 76, 105, 115, 116, 122, -72, 23, -76, 60, -89, -98, -34, 2, 0, 0, 120, 112, 120, 116, 0, 21, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 117, 113, 0, 126, 0, 15, 0, 0, 0, 19, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 20, 113, 0, 126, 0, 21, 113, 0, 126, 0, 22, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 1, 7, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 26, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -40, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 28, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -81, 113, 0, 126, 0, 19, 113, 0, 126, 0, 24, 113, 0, 126, 0, 25, 113, 0, 126, 0, 30, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -44, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 34, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, -91, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 0, 61, 113, 0, 126, 0, 19, 113, 0, 126, 0, 32, 113, 0, 126, 0, 33, 113, 0, 126, 0, 36, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -6, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 41, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -16, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 43, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, -73, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 45, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 8, 93, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 47, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -24, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 49, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 7, -45, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 51, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 95, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 53, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 5, 86, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 55, 112, 112, 115, 113, 0, 126, 0, 17, 1, 0, 0, 4, -23, 113, 0, 126, 0, 19, 113, 0, 126, 0, 39, 113, 0, 126, 0, 40, 113, 0, 126, 0, 57, 112, 112, 115, 113, 0, 126, 0, 17, 2, 0, 0, 2, 27, 112, 113, 0, 126, 0, 59, 113, 0, 126, 0, 60, 113, 0, 126, 0, 61, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 1, 8, 112, 113, 0, 126, 0, 65, 113, 0, 126, 0, 66, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 115, 113, 0, 126, 0, 17, 2, 0, 0, 3, 65, 112, 113, 0, 126, 0, 68, 113, 0, 126, 0, 69, 113, 0, 126, 0, 57, 113, 0, 126, 0, 62, 113, 0, 126, 0, 63, 113, 0, 126, 0, 71, 120, 126, 114, 0, 46, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 75, 97, 102, 107, 97, 69, 120, 99, 101, 112, 116, 105, 111, 110, 36, 76, 101, 118, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 114, 0, 14, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 69, 110, 117, 109, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 120, 112, 116, 0, 5, 69, 82, 82, 79, 82, 0, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 2, 123, 125])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0; nested exception is org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.kafka.listener.BatchListenerFailedException: Conversion error; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"]) @-0
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:46)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.convert(BatchMessagingMessageConverter.java:247)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.obtainPayload(BatchMessagingMessageConverter.java:216)
	at org.springframework.kafka.support.converter.BatchMessagingMessageConverter.toMessage(BatchMessagingMessageConverter.java:175)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.toMessagingMessage(BatchMessagingMessageListenerAdapter.java:212)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:165)
	... 13 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 19 common frames omitted
16:09:55.658 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 8, CreateTime = 1707311395655, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 68, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 101, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 115, 101, 114, 105, 97, 108, 105, 122, 101, 114, 46, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 100, 101, 115, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 83, 101, 114, 105, 97, 108, 105, 122, 97, 116, 105, 111, 110, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 99, 111, 110, 118, 101, 114, 116, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 111, 98, 116, 97, 105, 110, 80, 97, 121, 108, 111, 97, 100, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 67, 111, 110, 118, 101, 114, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 116, 111, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 54, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 114, 105, 97, 108, 105, 122, 101, 32, 116, 121, 112, 101, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 101, 115, 115, 97, 103, 101, 32, 107, 111, 116, 108, 105, 110, 46, 114, 101, 102, 108, 101, 99, 116, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 75, 80, 97, 114, 97, 109, 101, 116, 101, 114, 73, 109, 112, 108, 46, 32, 79, 114, 105, 103, 105, 110, 97, 108, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 109, 101, 115, 115, 97, 103, 101, 58, 32, 70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 102, 114, 111, 109, 32, 74, 83, 79, 78, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 99, 111, 109, 46, 102, 97, 115, 116, 101, 114, 120, 109, 108, 46, 106, 97, 99, 107, 115, 111, 110, 46, 109, 111, 100, 117, 108, 101, 46, 107, 111, 116, 108, 105, 110, 46, 77, 105, 115, 115, 105, 110, 103, 75, 111, 116, 108, 105, 110, 80, 97, 114, 97, 109, 101, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 73, 110, 115, 116, 97, 110, 116, 105, 97, 116, 105, 111, 110, 32, 111, 102, 32, 91, 115, 105, 109, 112, 108, 101, 32, 116, 121, 112, 101, 44, 32, 99, 108, 97, 115, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 93, 32, 118, 97, 108, 117, 101, 32, 102, 97, 105, 108, 101, 100, 32, 102, 111, 114, 32, 74, 83, 79, 78, 32, 112, 114, 111, 112, 101, 114, 116, 121, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 40, 116, 104, 101, 114, 101, 102, 111, 114, 101, 32, 78, 85, 76, 76, 41, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 99, 114, 101, 97, 116, 111, 114, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 32, 119, 104, 105, 99, 104, 32, 105, 115, 32, 97, 32, 110, 111, 110, 45, 110, 117, 108, 108, 97, 98, 108, 101, 32, 116, 121, 112, 101, 10, 32, 97, 116, 32, 91, 83, 111, 117, 114, 99, 101, 58, 32, 40, 83, 116, 114, 105, 110, 103, 41, 34, 123, 125, 34, 59, 32, 108, 105, 110, 101, 58, 32, 49, 44, 32, 99, 111, 108, 117, 109, 110, 58, 32, 50, 93, 32, 40, 116, 104, 114, 111, 117, 103, 104, 32, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 105, 110, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 91, 34, 105, 110, 116, 101, 103, 114, 97, 116, 105, 111, 110, 83, 111, 117, 114, 99, 101, 34, 93, 41, 10, 9, 46, 46, 46, 32, 49, 57, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 12]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, -125, -80, 115, 62]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent] value failed for JSON property integrationSource due to missing (therefore NULL) value for creator parameter integrationSource which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent["integrationSource"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
16:09:56.784 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
16:09:58.883 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 13, CreateTime = 1707311396779, serialized key size = -1, serialized value size = 434, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [53, 100, 101, 100, 51, 99, 54, 97, 49, 100, 53, 101, 55, 49, 101, 48, 45, 53, 100, 101, 100, 51, 99, 54, 97, 49, 100, 53, 101, 55, 49, 101, 48, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001706947",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001706947",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
16:09:58.935 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
16:09:58.949 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
16:09:59.973 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)])
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
16:10:01.005 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)])
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
16:10:01.013 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 14, CreateTime = 1707311396781, serialized key size = -1, serialized value size = 435, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [97, 49, 48, 56, 100, 54, 97, 101, 53, 50, 100, 102, 99, 48, 98, 52, 45, 97, 49, 48, 56, 100, 54, 97, 101, 53, 50, 100, 102, 99, 48, 98, 52, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001706947",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001706947",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": " " 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
16:10:01.013 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 9, CreateTime = 1707311398912, serialized key size = -1, serialized value size = 434, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 75, 116, 46, 118, 97, 108, 105, 100, 97, 116, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 55, 57, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 75, 116, 46, 118, 97, 108, 105, 100, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 53, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 75, 116, 46, 97, 99, 99, 101, 115, 115, 36, 118, 97, 108, 105, 100, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 49, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 13]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, -125, -80, 119, -85]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001706947",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001706947",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value=, timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
16:10:01.018 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
16:10:02.062 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)])
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
16:10:03.097 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)])
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
16:10:03.101 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 10, CreateTime = 1707311401014, serialized key size = -1, serialized value size = 435, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 32, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 32, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 32, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 32, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 32, 104, 97, 115, 32, 98, 108, 97, 110, 107, 32, 102, 105, 101, 108, 100, 115, 58, 32, 83, 101, 99, 117, 114, 105, 116, 121, 68, 116, 111, 40, 105, 115, 105, 110, 61, 82, 85, 48, 48, 48, 49, 55, 48, 54, 57, 52, 55, 44, 32, 110, 97, 109, 101, 61, 77, 73, 78, 70, 73, 78, 32, 82, 79, 83, 83, 73, 73, 32, 50, 32, 51, 49, 47, 49, 48, 47, 50, 48, 44, 32, 116, 121, 112, 101, 61, 83, 69, 67, 44, 32, 97, 99, 116, 105, 118, 101, 61, 116, 114, 117, 101, 44, 32, 115, 116, 97, 116, 117, 115, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 61, -48, -96, -48, -80, -48, -73, -48, -68, -48, -75, -47, -119, -48, -75, -48, -67, 44, 32, 102, 105, 101, 108, 100, 115, 61, 91, 83, 101, 99, 117, 114, 105, 116, 121, 70, 105, 101, 108, 100, 68, 116, 111, 40, 99, 111, 100, 101, 61, 70, 65, 67, 69, 95, 86, 65, 76, 85, 69, 44, 32, 118, 97, 108, 117, 101, 61, 32, 44, 32, 116, 105, 109, 101, 115, 116, 97, 109, 112, 61, 110, 117, 108, 108, 41, 93, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 75, 116, 46, 118, 97, 108, 105, 100, 97, 116, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 55, 57, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 75, 116, 46, 118, 97, 108, 105, 100, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 53, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 75, 116, 46, 97, 99, 99, 101, 115, 115, 36, 118, 97, 108, 105, 100, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 49, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 14]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, -125, -80, 119, -83]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001706947",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001706947",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": " " 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)]); nested exception is java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.IllegalArgumentException: Security has blank fields: SecurityDto(isin=RU0001706947, name=MINFIN ROSSII 2 31/10/20, type=SEC, active=true, statusDescription=Размещен, fields=[SecurityFieldDto(code=FACE_VALUE, value= , timestamp=null)])
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validate(SecurityDataListener.kt:79)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.validSecurities(SecurityDataListener.kt:58)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataListenerKt.access$validSecurities(SecurityDataListener.kt:1)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
16:10:05.290 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
16:10:07.413 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 17, CreateTime = 1707311405272, serialized key size = -1, serialized value size = 446, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [49, 48, 50, 56, 98, 101, 101, 100, 57, 52, 53, 97, 101, 54, 101, 49, 45, 49, 48, 50, 56, 98, 101, 101, 100, 57, 52, 53, 97, 101, 54, 101, 49, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001706947",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001706947",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "UNKNOWN_FIELD_CODE"
          
          , "value": "1000" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is ru.alfacapital.mda.api.securitiesapi.service.SecurityService$FieldNotFound: Could not find field by code 'UNKNOWN_FIELD_CODE'; nested exception is ru.alfacapital.mda.api.securitiesapi.service.SecurityService$FieldNotFound: Could not find field by code 'UNKNOWN_FIELD_CODE'
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: ru.alfacapital.mda.api.securitiesapi.service.SecurityService$FieldNotFound: Could not find field by code 'UNKNOWN_FIELD_CODE'
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.fetchField(SecurityService.kt:253)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.access$fetchField(SecurityService.kt:48)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$toModel$1$1$3$2$1.invokeSuspend(SecurityService.kt:232)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:570)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:750)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:677)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:664)
16:10:07.427 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
16:10:07.434 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 11, CreateTime = 1707311407415, serialized key size = -1, serialized value size = 446, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 70, 105, 101, 108, 100, 78, 111, 116, 70, 111, 117, 110, 100]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 70, 105, 101, 108, 100, 78, 111, 116, 70, 111, 117, 110, 100, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 102, 105, 101, 108, 100, 32, 98, 121, 32, 99, 111, 100, 101, 32, 39, 85, 78, 75, 78, 79, 87, 78, 95, 70, 73, 69, 76, 68, 95, 67, 79, 68, 69, 39, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 70, 105, 101, 108, 100, 78, 111, 116, 70, 111, 117, 110, 100, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 102, 105, 101, 108, 100, 32, 98, 121, 32, 99, 111, 100, 101, 32, 39, 85, 78, 75, 78, 79, 87, 78, 95, 70, 73, 69, 76, 68, 95, 67, 79, 68, 69, 39]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 70, 105, 101, 108, 100, 78, 111, 116, 70, 111, 117, 110, 100, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 102, 105, 101, 108, 100, 32, 98, 121, 32, 99, 111, 100, 101, 32, 39, 85, 78, 75, 78, 79, 87, 78, 95, 70, 73, 69, 76, 68, 95, 67, 79, 68, 69, 39, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 70, 105, 101, 108, 100, 78, 111, 116, 70, 111, 117, 110, 100, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 102, 105, 101, 108, 100, 32, 98, 121, 32, 99, 111, 100, 101, 32, 39, 85, 78, 75, 78, 79, 87, 78, 95, 70, 73, 69, 76, 68, 95, 67, 79, 68, 69, 39, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 70, 105, 101, 108, 100, 78, 111, 116, 70, 111, 117, 110, 100, 58, 32, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 102, 105, 101, 108, 100, 32, 98, 121, 32, 99, 111, 100, 101, 32, 39, 85, 78, 75, 78, 79, 87, 78, 95, 70, 73, 69, 76, 68, 95, 67, 79, 68, 69, 39, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 102, 101, 116, 99, 104, 70, 105, 101, 108, 100, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 50, 53, 51, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 97, 99, 99, 101, 115, 115, 36, 102, 101, 116, 99, 104, 70, 105, 101, 108, 100, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 52, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 116, 111, 77, 111, 100, 101, 108, 36, 49, 36, 49, 36, 51, 36, 50, 36, 49, 46, 105, 110, 118, 111, 107, 101, 83, 117, 115, 112, 101, 110, 100, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 50, 51, 50, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 106, 118, 109, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 66, 97, 115, 101, 67, 111, 110, 116, 105, 110, 117, 97, 116, 105, 111, 110, 73, 109, 112, 108, 46, 114, 101, 115, 117, 109, 101, 87, 105, 116, 104, 40, 67, 111, 110, 116, 105, 110, 117, 97, 116, 105, 111, 110, 73, 109, 112, 108, 46, 107, 116, 58, 51, 51, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 68, 105, 115, 112, 97, 116, 99, 104, 101, 100, 84, 97, 115, 107, 46, 114, 117, 110, 40, 68, 105, 115, 112, 97, 116, 99, 104, 101, 100, 84, 97, 115, 107, 46, 107, 116, 58, 49, 48, 54, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 115, 99, 104, 101, 100, 117, 108, 105, 110, 103, 46, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 46, 114, 117, 110, 83, 97, 102, 101, 108, 121, 40, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 46, 107, 116, 58, 53, 55, 48, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 115, 99, 104, 101, 100, 117, 108, 105, 110, 103, 46, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 36, 87, 111, 114, 107, 101, 114, 46, 101, 120, 101, 99, 117, 116, 101, 84, 97, 115, 107, 40, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 46, 107, 116, 58, 55, 53, 48, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 115, 99, 104, 101, 100, 117, 108, 105, 110, 103, 46, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 36, 87, 111, 114, 107, 101, 114, 46, 114, 117, 110, 87, 111, 114, 107, 101, 114, 40, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 46, 107, 116, 58, 54, 55, 55, 41, 10, 9, 97, 116, 32, 107, 111, 116, 108, 105, 110, 120, 46, 99, 111, 114, 111, 117, 116, 105, 110, 101, 115, 46, 115, 99, 104, 101, 100, 117, 108, 105, 110, 103, 46, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 36, 87, 111, 114, 107, 101, 114, 46, 114, 117, 110, 40, 67, 111, 114, 111, 117, 116, 105, 110, 101, 83, 99, 104, 101, 100, 117, 108, 101, 114, 46, 107, 116, 58, 54, 54, 52, 41, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 17]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, -125, -80, -104, -40]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001706947",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001706947",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "UNKNOWN_FIELD_CODE"
          
          , "value": "1000" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is ru.alfacapital.mda.api.securitiesapi.service.SecurityService$FieldNotFound: Could not find field by code 'UNKNOWN_FIELD_CODE'; nested exception is ru.alfacapital.mda.api.securitiesapi.service.SecurityService$FieldNotFound: Could not find field by code 'UNKNOWN_FIELD_CODE'
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: ru.alfacapital.mda.api.securitiesapi.service.SecurityService$FieldNotFound: Could not find field by code 'UNKNOWN_FIELD_CODE'
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.fetchField(SecurityService.kt:253)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.access$fetchField(SecurityService.kt:48)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$toModel$1$1$3$2$1.invokeSuspend(SecurityService.kt:232)
	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106)
	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:570)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:750)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:677)
	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:664)
16:10:08.610 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<2>but was:<0>]
16:10:09.864 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<3>but was:<1>]
16:10:12.120 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<2>but was:<1>]
16:10:13.453 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<2>but was:<0>]
16:10:16.082 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN0 value=2024-02-07
16:10:17.252 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN1 value=2024-02-07
16:10:18.435 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN1 value=2024-02-07
16:10:19.648 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN2 value=2024-02-07
16:10:33.671 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN0 value=2020-01-01
16:10:33.780 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN1 value=2022-01-01
16:10:37.322 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.issuerIndustryAc - Update industry field: isin=ISIN2 value=2022-01-02
16:10:42.006 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
16:10:44.115 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 50, CreateTime = 1707311441986, serialized key size = -1, serialized value size = 423, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [53, 52, 98, 52, 56, 53, 100, 102, 57, 56, 97, 102, 100, 48, 102, 51, 45, 53, 52, 98, 52, 56, 53, 100, 102, 57, 56, 97, 102, 100, 48, 102, 51, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "ISIN1",
  "timestamp": "2024-02-07T16:09:27.585",
  "security": {
    "isin": "ISIN1",
    "name": "isin1 has reg num",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "RULE_NUMBER"
          
          , "value": "REGN1" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveIds(SecurityRepository.kt:189)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:155)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$a0030e51.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:110)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:100)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:76)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$3899c024.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 52 common frames omitted
16:10:44.122 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
16:10:45.159 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveIds(SecurityRepository.kt:189)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:155)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$a0030e51.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:110)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:100)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:76)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$3899c024.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 61 common frames omitted
16:10:46.205 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveIds(SecurityRepository.kt:189)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:155)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$a0030e51.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:110)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:100)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:76)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$3899c024.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 61 common frames omitted
16:10:46.232 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 12, CreateTime = 1707311444118, serialized key size = -1, serialized value size = 423, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 68, 117, 112, 108, 105, 99, 97, 116, 101, 75, 101, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 68, 117, 112, 108, 105, 99, 97, 116, 101, 75, 101, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 83, 81, 76, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 97, 115, 32, 115, 105, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 119, 104, 101, 114, 101, 32, 105, 115, 105, 110, 32, 105, 110, 32, 40, 63, 44, 32, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 116, 121, 112, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 46, 105, 100, 32, 97, 115, 32, 115, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 46, 105, 100, 32, 97, 115, 32, 105, 100, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 101, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 111, 105, 110, 32, 116, 121, 112, 32, 111, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 105, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 61, 32, 105, 110, 99, 46, 115, 32, 97, 110, 100, 32, 115, 105, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 116, 105, 100, 32, 97, 110, 100, 32, 115, 105, 46, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 105, 100, 116, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 100, 44, 32, 116, 121, 112, 101, 44, 32, 115, 101, 99, 117, 114, 105, 116, 121, 41, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 116, 105, 100, 44, 32, 105, 110, 99, 46, 105, 100, 116, 44, 32, 105, 110, 99, 46, 115, 41, 10, 32, 32, 32, 32, 93, 59, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 68, 117, 112, 108, 105, 99, 97, 116, 101, 75, 101, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 83, 81, 76, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 97, 115, 32, 115, 105, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 119, 104, 101, 114, 101, 32, 105, 115, 105, 110, 32, 105, 110, 32, 40, 63, 44, 32, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 116, 121, 112, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 46, 105, 100, 32, 97, 115, 32, 115, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 46, 105, 100, 32, 97, 115, 32, 105, 100, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 101, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 111, 105, 110, 32, 116, 121, 112, 32, 111, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 105, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 61, 32, 105, 110, 99, 46, 115, 32, 97, 110, 100, 32, 115, 105, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 116, 105, 100, 32, 97, 110, 100, 32, 115, 105, 46, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 105, 100, 116, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 100, 44, 32, 116, 121, 112, 101, 44, 32, 115, 101, 99, 117, 114, 105, 116, 121, 41, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 116, 105, 100, 44, 32, 105, 110, 99, 46, 105, 100, 116, 44, 32, 105, 110, 99, 46, 115, 41, 10, 32, 32, 32, 32, 93, 59, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 68, 117, 112, 108, 105, 99, 97, 116, 101, 75, 101, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 83, 81, 76, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 97, 115, 32, 115, 105, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 119, 104, 101, 114, 101, 32, 105, 115, 105, 110, 32, 105, 110, 32, 40, 63, 44, 32, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 116, 121, 112, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 46, 105, 100, 32, 97, 115, 32, 115, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 46, 105, 100, 32, 97, 115, 32, 105, 100, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 101, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 111, 105, 110, 32, 116, 121, 112, 32, 111, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 105, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 61, 32, 105, 110, 99, 46, 115, 32, 97, 110, 100, 32, 115, 105, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 116, 105, 100, 32, 97, 110, 100, 32, 115, 105, 46, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 105, 100, 116, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 100, 44, 32, 116, 121, 112, 101, 44, 32, 115, 101, 99, 117, 114, 105, 116, 121, 41, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 116, 105, 100, 44, 32, 105, 110, 99, 46, 105, 100, 116, 44, 32, 105, 110, 99, 46, 115, 41, 10, 32, 32, 32, 32, 93, 59, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 68, 117, 112, 108, 105, 99, 97, 116, 101, 75, 101, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 83, 81, 76, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 97, 115, 32, 115, 105, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 119, 104, 101, 114, 101, 32, 105, 115, 105, 110, 32, 105, 110, 32, 40, 63, 44, 32, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 116, 121, 112, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 46, 105, 100, 32, 97, 115, 32, 115, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 46, 105, 100, 32, 97, 115, 32, 105, 100, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 101, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 111, 105, 110, 32, 116, 121, 112, 32, 111, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 105, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 61, 32, 105, 110, 99, 46, 115, 32, 97, 110, 100, 32, 115, 105, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 116, 105, 100, 32, 97, 110, 100, 32, 115, 105, 46, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 105, 100, 116, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 100, 44, 32, 116, 121, 112, 101, 44, 32, 115, 101, 99, 117, 114, 105, 116, 121, 41, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 116, 105, 100, 44, 32, 105, 110, 99, 46, 105, 100, 116, 44, 32, 105, 110, 99, 46, 115, 41, 10, 32, 32, 32, 32, 93, 59, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 68, 117, 112, 108, 105, 99, 97, 116, 101, 75, 101, 121, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 83, 81, 76, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 97, 115, 32, 115, 105, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 119, 104, 101, 114, 101, 32, 105, 115, 105, 110, 32, 105, 110, 32, 40, 63, 44, 32, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 116, 121, 112, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 99, 46, 105, 100, 32, 97, 115, 32, 115, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 46, 105, 100, 32, 97, 115, 32, 105, 100, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 101, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 106, 111, 105, 110, 32, 116, 121, 112, 32, 111, 110, 32, 116, 114, 117, 101, 10, 32, 32, 32, 32, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 105, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 61, 32, 105, 110, 99, 46, 115, 32, 97, 110, 100, 32, 115, 105, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 116, 105, 100, 32, 97, 110, 100, 32, 115, 105, 46, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 105, 100, 116, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 100, 44, 32, 116, 121, 112, 101, 44, 32, 115, 101, 99, 117, 114, 105, 116, 121, 41, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 116, 105, 100, 44, 32, 105, 110, 99, 46, 105, 100, 116, 44, 32, 105, 110, 99, 46, 115, 41, 10, 32, 32, 32, 32, 93, 59, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 83, 81, 76, 69, 114, 114, 111, 114, 67, 111, 100, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 100, 111, 84, 114, 97, 110, 115, 108, 97, 116, 101, 40, 83, 81, 76, 69, 114, 114, 111, 114, 67, 111, 100, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 50, 52, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 55, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 57, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 51, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 55, 54, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 115, 97, 118, 101, 73, 100, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 107, 116, 58, 49, 56, 57, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 115, 97, 118, 101, 70, 105, 101, 108, 100, 86, 97, 108, 117, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 107, 116, 58, 49, 53, 53, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 99, 102, 48, 53, 101, 100, 99, 100, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 115, 117, 112, 112, 111, 114, 116, 46, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 97, 48, 48, 51, 48, 101, 53, 49, 46, 115, 97, 118, 101, 70, 105, 101, 108, 100, 86, 97, 108, 117, 101, 115, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 112, 114, 105, 111, 114, 105, 116, 105, 101, 115, 65, 119, 97, 114, 101, 83, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 49, 49, 48, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 49, 48, 48, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 55, 54, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 50, 100, 54, 49, 54, 98, 49, 98, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 36, 49, 46, 112, 114, 111, 99, 101, 101, 100, 87, 105, 116, 104, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 50, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 105, 110, 118, 111, 107, 101, 87, 105, 116, 104, 105, 110, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 106, 97, 118, 97, 58, 51, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 51, 56, 57, 57, 99, 48, 50, 52, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 69, 82, 82, 79, 82, 58, 32, 100, 117, 112, 108, 105, 99, 97, 116, 101, 32, 107, 101, 121, 32, 118, 97, 108, 117, 101, 32, 118, 105, 111, 108, 97, 116, 101, 115, 32, 117, 110, 105, 113, 117, 101, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 116, 32, 34, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 95, 115, 101, 99, 117, 114, 105, 116, 121, 95, 116, 121, 112, 101, 95, 117, 107, 34, 10, 32, 32, -48, -97, -48, -66, -48, -76, -47, -128, -48, -66, -48, -79, -48, -67, -48, -66, -47, -127, -47, -126, -48, -72, 58, 32, 75, 101, 121, 32, 40, 115, 101, 99, 117, 114, 105, 116, 121, 44, 32, 116, 121, 112, 101, 41, 61, 40, 51, 52, 44, 32, 50, 41, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 99, 111, 114, 101, 46, 118, 51, 46, 81, 117, 101, 114, 121, 69, 120, 101, 99, 117, 116, 111, 114, 73, 109, 112, 108, 46, 114, 101, 99, 101, 105, 118, 101, 69, 114, 114, 111, 114, 82, 101, 115, 112, 111, 110, 115, 101, 40, 81, 117, 101, 114, 121, 69, 120, 101, 99, 117, 116, 111, 114, 73, 109, 112, 108, 46, 106, 97, 118, 97, 58, 50, 54, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 99, 111, 114, 101, 46, 118, 51, 46, 81, 117, 101, 114, 121, 69, 120, 101, 99, 117, 116, 111, 114, 73, 109, 112, 108, 46, 112, 114, 111, 99, 101, 115, 115, 82, 101, 115, 117, 108, 116, 115, 40, 81, 117, 101, 114, 121, 69, 120, 101, 99, 117, 116, 111, 114, 73, 109, 112, 108, 46, 106, 97, 118, 97, 58, 50, 51, 54, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 99, 111, 114, 101, 46, 118, 51, 46, 81, 117, 101, 114, 121, 69, 120, 101, 99, 117, 116, 111, 114, 73, 109, 112, 108, 46, 101, 120, 101, 99, 117, 116, 101, 40, 81, 117, 101, 114, 121, 69, 120, 101, 99, 117, 116, 111, 114, 73, 109, 112, 108, 46, 106, 97, 118, 97, 58, 53, 53, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 106, 100, 98, 99, 46, 80, 103, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 105, 110, 116, 101, 114, 110, 97, 108, 69, 120, 101, 99, 117, 116, 101, 66, 97, 116, 99, 104, 40, 80, 103, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 56, 56, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 106, 100, 98, 99, 46, 80, 103, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 101, 120, 101, 99, 117, 116, 101, 66, 97, 116, 99, 104, 40, 80, 103, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 57, 49, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 106, 100, 98, 99, 46, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 101, 120, 101, 99, 117, 116, 101, 66, 97, 116, 99, 104, 40, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 49, 54, 52, 57, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 122, 97, 120, 120, 101, 114, 46, 104, 105, 107, 97, 114, 105, 46, 112, 111, 111, 108, 46, 80, 114, 111, 120, 121, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 101, 120, 101, 99, 117, 116, 101, 66, 97, 116, 99, 104, 40, 80, 114, 111, 120, 121, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 49, 50, 55, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 122, 97, 120, 120, 101, 114, 46, 104, 105, 107, 97, 114, 105, 46, 112, 111, 111, 108, 46, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 101, 120, 101, 99, 117, 116, 101, 66, 97, 116, 99, 104, 40, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 112, 54, 115, 112, 121, 46, 101, 110, 103, 105, 110, 101, 46, 119, 114, 97, 112, 112, 101, 114, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 101, 120, 101, 99, 117, 116, 101, 66, 97, 116, 99, 104, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 106, 97, 118, 97, 58, 57, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 108, 97, 109, 98, 100, 97, 36, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 36, 52, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 53, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 53, 48, 41, 10, 9, 46, 46, 46, 32, 53, 50, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 50]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, -125, -79, 40, 66]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "ISIN1",
  "timestamp": "2024-02-07T16:09:27.585",
  "security": {
    "isin": "ISIN1",
    "name": "isin1 has reg num",
    "type": "SEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "RULE_NUMBER"
          
          , "value": "REGN1" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.dao.DuplicateKeyException: PreparedStatementCallback; SQL [
    merge into security_id as si
    using (
        with
         sec as (select distinct id from security where isin in (?, ?)),
         typ as (select id from security_id_type where code = ?)
        select
            sec.id as s,
            ? as tid,
            typ.id as idt
        from sec
        join typ on true
    ) inc
    on (si.security = inc.s and si.id = inc.tid and si.type = inc.idt)
    when matched then update set updated_at = current_timestamp
    when not matched then insert (id, type, security) values (inc.tid, inc.idt, inc.s)
    ]; ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.; nested exception is org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:244)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveIds(SecurityRepository.kt:189)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveFieldValues(SecurityRepository.kt:155)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$a0030e51.saveFieldValues(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:110)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:100)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:76)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$3899c024.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint "security_id_security_type_uk"
  Подробности: Key (security, type)=(34, 2) already exists.
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2675)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2365)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:559)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:887)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:910)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1649)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.StatementWrapper.executeBatch(StatementWrapper.java:98)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1050)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 61 common frames omitted
16:10:47.351 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1 @coroutine#175] WARN  r.a.m.a.s.service.SecurityService.invokeSuspend - Security invalid field will be ignored: isin=RU0001011101, BASE_VALUE=0
16:10:47.358 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
16:10:48.619 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
16:10:49.883 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<2>but was:<0>]
16:10:51.159 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<2>but was:<0>]
16:11:04.910 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
16:11:06.023 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<4>but was:<0>]
16:11:08.170 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<4>but was:<0>]
16:11:09.275 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<4>but was:<0>]
16:11:10.388 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
16:11:11.513 [awaitility[Await DB table field_value]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=field_value)expected:<8>but was:<0>]
16:11:12.791 [http-nio-6311-exec-7] INFO  r.a.m.a.s.service.SecurityService.saveManualField - Adding field value: PARENT_ISIN, ISIN2, ISIN1, 2022-09-12
16:11:12.799 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "f42d366326ccb7fd",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6311/securities/ISIN1/field",
  "host" : "localhost",
  "path" : "/securities/ISIN1/field",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "79" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:11:12.800 [http-nio-6311-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "f42d366326ccb7fd",
  "duration" : 17,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Date" : [ "Wed, 07 Feb 2024 13:11:12 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:11:12.821 [http-nio-6311-exec-10] INFO  r.a.m.a.s.service.SecurityService.saveManualField - Adding field value: PARENT_ISIN, NEW_ISIN, ISIN1, 2022-09-13
16:11:12.826 [http-nio-6311-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a08798a7fcb82378",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6311/securities/ISIN1/field",
  "host" : "localhost",
  "path" : "/securities/ISIN1/field",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "82" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:11:12.826 [http-nio-6311-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a08798a7fcb82378",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Date" : [ "Wed, 07 Feb 2024 13:11:12 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:11:12.844 [http-nio-6311-exec-1] INFO  r.a.m.a.s.service.SecurityService.saveManualField - Adding field value: PARENT_ISIN, NEW_ISIN_2, ISIN1, 2022-09-13
16:11:12.850 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "9b51ba8692fac3ff",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6311/securities/ISIN1/field",
  "host" : "localhost",
  "path" : "/securities/ISIN1/field",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "84" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:11:12.851 [http-nio-6311-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "9b51ba8692fac3ff",
  "duration" : 8,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Date" : [ "Wed, 07 Feb 2024 13:11:12 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:11:12.982 [http-nio-6311-exec-3] INFO  r.a.m.a.s.service.SecurityService.saveManualField - Adding field value: FIELD-1234, NEW_ISIN_2, ISIN1, 2022-09-13
16:11:12.988 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "dc606bd42cc60f88",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6311/securities/ISIN1/field",
  "host" : "localhost",
  "path" : "/securities/ISIN1/field",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "83" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  },
  "body" : {"code":"FIELD-1234","value":"NEW_ISIN_2","timestamp":"2022-09-13T00:00:00"}
}
16:11:12.988 [http-nio-6311-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "dc606bd42cc60f88",
  "duration" : 6,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Wed, 07 Feb 2024 13:11:12 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"message":"Unknown field FIELD-1234"}
}
16:11:13.149 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] INFO  r.a.m.a.s.l.IssuerEventsListener.issuerEvent - Got issuer event: IssuerAddedEvent(securityIds=[ISIN1, ISIN0, ABSENT], fields=[Field(code=COUNTRY_AC, value=RU, timestamp=2024-02-07T16:09:27.585), Field(code=NAME, value=Some issuer, timestamp=2024-02-07T16:09:27.585)], timestamp=2024-02-07T16:09:27.585)
16:11:15.465 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] INFO  r.a.m.a.s.l.IssuerEventsListener.issuerEvent - Got issuer event: IssuerUpdatedEvent(securityIds=[ISIN1, ISIN0, ABSENT], fields={COUNTRY=Update(new=CB, old=null), COUNTRY_AC=Update(new=RU, old=null)}, timestamp=2024-02-07T16:09:27.585)
16:11:17.796 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] INFO  r.a.m.a.s.l.IssuerEventsListener.issuerEvent - Got issuer event: IssuerAddedEvent(securityIds=[ISIN2, ISIN1, ISIN0, ISIN3], fields=[Field(code=COUNTRY_AC, value=RU, timestamp=2024-02-06T16:09:27.585), Field(code=NAME, value=Some issuer, timestamp=2024-02-07T16:09:27.585)], timestamp=2024-02-06T16:09:27.585)
16:11:19.024 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] INFO  r.a.m.a.s.l.IssuerEventsListener.issuerEvent - Got issuer event: IssuerAddedEvent(securityIds=[ISIN1, ISIN0], fields=[Field(code=NAME, value=Some issuer, timestamp=2024-02-07T16:09:27.585)], timestamp=2024-02-07T00:00)
16:11:19.027 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] INFO  r.a.m.a.s.l.IssuerEventsListener.issuerEvent - Got issuer event: IssuerUpdatedEvent(securityIds=[ISIN1, ISIN0], fields={COUNTRY=Update(new=CB, old=null)}, timestamp=2024-02-07T00:00)
16:11:20.260 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.issuer.events, partition = 0, leaderEpoch = 0, offset = 5, CreateTime = 1707311480255, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {}), sending to DLQ: md.issuer.events.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve subtype of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.IssuerEvent]: missing type id property 'type'
 at [Source: (String)"{}"; line: 1, column: 2]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve subtype of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.IssuerEvent]: missing type id property 'type'
 at [Source: (String)"{}"; line: 1, column: 2]
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve subtype of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.IssuerEvent]: missing type id property 'type'
 at [Source: (String)"{}"; line: 1, column: 2]
	at com.fasterxml.jackson.databind.exc.InvalidTypeIdException.from(InvalidTypeIdException.java:43)
	at com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException(DeserializationContext.java:2083)
	at com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId(DeserializationContext.java:1596)
	at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._handleMissingTypeId(TypeDeserializerBase.java:307)
	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:185)
	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:119)
	at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:263)
	at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:74)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
16:11:20.274 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.issuer.events, partition = 0, leaderEpoch = 0, offset = 6, CreateTime = 1707311480256, serialized key size = -1, serialized value size = 193, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {
"securityIds": [ "ISIN0", "ISIN1" ],
"fields": [ {"code": "COUNTRY_AC", "value": "some", "timestamp": "2024-02-07T00:00:00"} ],
"timestamp": "2024-02-07T16:09:27.585",
"type": "UNSUPPORTED"
}), sending to DLQ: md.issuer.events.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'UNSUPPORTED' as a subtype of `ru.alfacapital.mda.api.securitiesapi.listener.IssuerEvent`: known type ids = [ISSUER_ADDED, ISSUER_UPDATED]
 at [Source: (String)"{
"securityIds": [ "ISIN0", "ISIN1" ],
"fields": [ {"code": "COUNTRY_AC", "value": "some", "timestamp": "2024-02-07T00:00:00"} ],
"timestamp": "2024-02-07T16:09:27.585",
"type": "UNSUPPORTED"
}"; line: 5, column: 9]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'UNSUPPORTED' as a subtype of `ru.alfacapital.mda.api.securitiesapi.listener.IssuerEvent`: known type ids = [ISSUER_ADDED, ISSUER_UPDATED]
 at [Source: (String)"{
"securityIds": [ "ISIN0", "ISIN1" ],
"fields": [ {"code": "COUNTRY_AC", "value": "some", "timestamp": "2024-02-07T00:00:00"} ],
"timestamp": "2024-02-07T16:09:27.585",
"type": "UNSUPPORTED"
}"; line: 5, column: 9]
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'UNSUPPORTED' as a subtype of `ru.alfacapital.mda.api.securitiesapi.listener.IssuerEvent`: known type ids = [ISSUER_ADDED, ISSUER_UPDATED]
 at [Source: (String)"{
"securityIds": [ "ISIN0", "ISIN1" ],
"fields": [ {"code": "COUNTRY_AC", "value": "some", "timestamp": "2024-02-07T00:00:00"} ],
"timestamp": "2024-02-07T16:09:27.585",
"type": "UNSUPPORTED"
}"; line: 5, column: 9]
	at com.fasterxml.jackson.databind.exc.InvalidTypeIdException.from(InvalidTypeIdException.java:43)
	at com.fasterxml.jackson.databind.DeserializationContext.invalidTypeIdException(DeserializationContext.java:2073)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId(DeserializationContext.java:1564)
	at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._handleUnknownTypeId(TypeDeserializerBase.java:298)
	at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDeserializer(TypeDeserializerBase.java:165)
	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:125)
	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:110)
	at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:263)
	at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:74)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
16:11:21.667 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] INFO  r.a.m.a.s.l.IssuerEventsListener.issuerEvent - Got issuer event: IssuerAddedEvent(securityIds=[ISIN2, ISIN1, ISIN0, ABSENT, ISIN3], fields=[Field(code=INDUSTRY_AC, value=Холдинги, timestamp=2024-02-07T16:09:27.585), Field(code=NAME, value=Some issuer, timestamp=2024-02-07T16:09:27.585)], timestamp=2024-02-07T16:09:27.585)
16:11:21.693 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN0 value=Холдинги brTypeTs=null issuerTs=2024-02-07
16:11:21.693 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN1 value=Госбумаги brTypeTs=2024-02-06 issuerTs=2024-02-07
16:11:21.693 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN2 value=Холдинги brTypeTs=2024-02-06 issuerTs=2024-02-07
16:11:21.693 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN3 value=Холдинги brTypeTs=2024-02-06 issuerTs=2024-02-07
16:11:24.089 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] INFO  r.a.m.a.s.l.IssuerEventsListener.issuerEvent - Got issuer event: IssuerUpdatedEvent(securityIds=[ISIN2, ISIN1, ISIN0, ABSENT, ISIN3], fields={COUNTRY=Update(new=CB, old=null), INDUSTRY_AC=Update(new=Холдинги, old=null)}, timestamp=2024-02-07T16:09:27.585)
16:11:24.097 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN0 value=Холдинги brTypeTs=null issuerTs=2024-02-07
16:11:24.097 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN1 value=Госбумаги brTypeTs=2024-02-06 issuerTs=2024-02-07
16:11:24.097 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN2 value=Холдинги brTypeTs=2024-02-06 issuerTs=2024-02-07
16:11:24.097 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN3 value=Холдинги brTypeTs=2024-02-06 issuerTs=2024-02-07
16:11:26.456 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] INFO  r.a.m.a.s.l.IssuerEventsListener.issuerEvent - Got issuer event: IssuerAddedEvent(securityIds=[ISIN2, ISIN1, ISIN0, ISIN3], fields=[Field(code=INDUSTRY_AC, value=Холдинги, timestamp=2024-02-06T16:09:27.585), Field(code=NAME, value=Some issuer, timestamp=2024-02-07T16:09:27.585)], timestamp=2024-02-06T16:09:27.585)
16:11:26.462 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN0 value=Холдинги brTypeTs=null issuerTs=2024-02-06
16:11:26.462 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN1 value=Холдинги brTypeTs=2024-02-05 issuerTs=2024-02-06
16:11:26.462 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN2 value=Холдинги brTypeTs=2024-02-06 issuerTs=2024-02-06
16:11:26.462 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN3 value=Холдинги brTypeTs=2024-02-07 issuerTs=2024-02-06
16:11:27.790 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] INFO  r.a.m.a.s.l.IssuerEventsListener.issuerEvent - Got issuer event: IssuerAddedEvent(securityIds=[ISIN1, ISIN0], fields=[Field(code=NAME, value=Some issuer, timestamp=2024-02-07T16:09:27.585)], timestamp=2024-02-07T16:09:27.585)
16:11:27.795 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] INFO  r.a.m.a.s.l.IssuerEventsListener.issuerEvent - Got issuer event: IssuerUpdatedEvent(securityIds=[ISIN1, ISIN0], fields={COUNTRY=Update(new=CB, old=null)}, timestamp=2024-02-07T16:09:27.585)
16:11:29.025 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.issuer.events, partition = 0, leaderEpoch = 0, offset = 12, CreateTime = 1707311489022, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {}), sending to DLQ: md.issuer.events.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve subtype of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.IssuerEvent]: missing type id property 'type'
 at [Source: (String)"{}"; line: 1, column: 2]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve subtype of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.IssuerEvent]: missing type id property 'type'
 at [Source: (String)"{}"; line: 1, column: 2]
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve subtype of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.IssuerEvent]: missing type id property 'type'
 at [Source: (String)"{}"; line: 1, column: 2]
	at com.fasterxml.jackson.databind.exc.InvalidTypeIdException.from(InvalidTypeIdException.java:43)
	at com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException(DeserializationContext.java:2083)
	at com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId(DeserializationContext.java:1596)
	at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._handleMissingTypeId(TypeDeserializerBase.java:307)
	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:185)
	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:119)
	at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:263)
	at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:74)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
16:11:29.030 [org.springframework.kafka.KafkaListenerEndpointContainer#1-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.issuer.events, partition = 0, leaderEpoch = 0, offset = 13, CreateTime = 1707311489023, serialized key size = -1, serialized value size = 210, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {
"securityIds": [ "ISIN0", "ISIN1" ],
"fields": [ {"code": "INDUSTRY_AC", "value": "Холдинги", "timestamp": "2024-02-07T16:09:27.585"} ],
"timestamp": "2024-02-07T16:09:27.585",
"type": "UNSUPPORTED"
}), sending to DLQ: md.issuer.events.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'UNSUPPORTED' as a subtype of `ru.alfacapital.mda.api.securitiesapi.listener.IssuerEvent`: known type ids = [ISSUER_ADDED, ISSUER_UPDATED]
 at [Source: (String)"{
"securityIds": [ "ISIN0", "ISIN1" ],
"fields": [ {"code": "INDUSTRY_AC", "value": "Холдинги", "timestamp": "2024-02-07T16:09:27.585"} ],
"timestamp": "2024-02-07T16:09:27.585",
"type": "UNSUPPORTED"
}"; line: 5, column: 9]
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'UNSUPPORTED' as a subtype of `ru.alfacapital.mda.api.securitiesapi.listener.IssuerEvent`: known type ids = [ISSUER_ADDED, ISSUER_UPDATED]
 at [Source: (String)"{
"securityIds": [ "ISIN0", "ISIN1" ],
"fields": [ {"code": "INDUSTRY_AC", "value": "Холдинги", "timestamp": "2024-02-07T16:09:27.585"} ],
"timestamp": "2024-02-07T16:09:27.585",
"type": "UNSUPPORTED"
}"; line: 5, column: 9]
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'UNSUPPORTED' as a subtype of `ru.alfacapital.mda.api.securitiesapi.listener.IssuerEvent`: known type ids = [ISSUER_ADDED, ISSUER_UPDATED]
 at [Source: (String)"{
"securityIds": [ "ISIN0", "ISIN1" ],
"fields": [ {"code": "INDUSTRY_AC", "value": "Холдинги", "timestamp": "2024-02-07T16:09:27.585"} ],
"timestamp": "2024-02-07T16:09:27.585",
"type": "UNSUPPORTED"
}"; line: 5, column: 9]
	at com.fasterxml.jackson.databind.exc.InvalidTypeIdException.from(InvalidTypeIdException.java:43)
	at com.fasterxml.jackson.databind.DeserializationContext.invalidTypeIdException(DeserializationContext.java:2073)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId(DeserializationContext.java:1564)
	at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._handleUnknownTypeId(TypeDeserializerBase.java:298)
	at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDeserializer(TypeDeserializerBase.java:165)
	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(AsPropertyTypeDeserializer.java:125)
	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:110)
	at com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(AbstractDeserializer.java:263)
	at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:74)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
16:11:30.558 [qtp1534956355-49] INFO  w.o.e.j.s.h.ContextHandler.__admin.log - RequestHandlerClass from context returned com.github.tomakehurst.wiremock.http.AdminRequestHandler. Normalized mapped under returned 'null'
16:11:30.664 [http-nio-6311-exec-2] INFO  r.a.m.a.s.s.SecurityExpositionActualizer.actualize - Actualizing security expositions...
16:11:30.850 [http-nio-6311-exec-2] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN1 value=Холдинги brTypeTs=2022-04-28 issuerTs=2022-04-27
16:11:30.850 [http-nio-6311-exec-2] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN2 value=Холдинги brTypeTs=null issuerTs=2022-04-27
16:11:30.881 [http-nio-6311-exec-2] DEBUG r.a.m.a.s.service.SecurityService.updateIndustryField - Update industry field: isin=ISIN3 value=Холдинги brTypeTs=null issuerTs=2022-04-27
16:11:30.901 [http-nio-6311-exec-2] WARN  r.a.m.a.s.scheduler.IssuersApi.invoke - Issuers with empty securityIds: requested securityIds = [ISIN5, ISIN6], issuers = [Issuer(securityIds=[], fields=[Field(code=COUNTRY_AC, value=BL, timestamp=2022-04-27T17:20:04)])]
16:11:30.903 [http-nio-6311-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "8b46b269ed1e1d8d",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "POST",
  "uri" : "http://localhost:6311/internal/jobs/expositions-actualize",
  "host" : "localhost",
  "path" : "/internal/jobs/expositions-actualize",
  "scheme" : "http",
  "port" : "6311",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-length" : [ "0" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:6311" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
16:11:30.903 [http-nio-6311-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "8b46b269ed1e1d8d",
  "duration" : 239,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Date" : [ "Wed, 07 Feb 2024 13:11:30 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
16:11:31.234 [org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1] INFO  r.a.m.a.s.l.RegistryRecordsEventListener.listen - Got registry records event: RegistryRecordsEvent(registry=moex-high-tech, records=[RegistryRecord(isin=ISIN1, includedAt=2001-01-01, excludedAt=2002-01-01), RegistryRecord(isin=NEW_ISIN1, includedAt=2000-01-01, excludedAt=2001-01-01), RegistryRecord(isin=NEW_ISIN2, includedAt=2001-01-01, excludedAt=2002-01-01), RegistryRecord(isin=NEW_ISIN3, includedAt=2002-01-01, excludedAt=2003-01-01)])
16:11:32.441 [org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1] INFO  r.a.m.a.s.l.RegistryRecordsEventListener.listen - Got registry records event: RegistryRecordsEvent(registry=new-registry, records=[RegistryRecord(isin=ISIN1, includedAt=2001-01-01, excludedAt=2002-01-01), RegistryRecord(isin=NEW_ISIN1, includedAt=2000-01-01, excludedAt=2001-01-01), RegistryRecord(isin=NEW_ISIN2, includedAt=2001-01-01, excludedAt=2002-01-01), RegistryRecord(isin=NEW_ISIN3, includedAt=2002-01-01, excludedAt=2003-01-01)])
16:11:33.618 [org.springframework.kafka.KafkaListenerEndpointContainer#2-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.registry-records.data, partition = 0, leaderEpoch = 0, offset = 2, CreateTime = 1707311493608, serialized key size = -1, serialized value size = 2, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {}), sending to DLQ: md.security.registry-records.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener failed; nested exception is org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.RegistryRecordsEventListener$RegistryRecordsEvent] value failed for JSON property registry due to missing (therefore NULL) value for creator parameter registry which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.RegistryRecordsEventListener$RegistryRecordsEvent["registry"])
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2724)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.support.converter.ConversionException: Failed to convert from JSON; nested exception is com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.RegistryRecordsEventListener$RegistryRecordsEvent] value failed for JSON property registry due to missing (therefore NULL) value for creator parameter registry which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.RegistryRecordsEventListener$RegistryRecordsEvent["registry"])
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:116)
	at org.springframework.kafka.support.converter.MessagingMessageConverter.toMessage(MessagingMessageConverter.java:174)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.toMessagingMessage(MessagingMessageListenerAdapter.java:322)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:83)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$768083c2.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class ru.alfacapital.mda.api.securitiesapi.listener.RegistryRecordsEventListener$RegistryRecordsEvent] value failed for JSON property registry due to missing (therefore NULL) value for creator parameter registry which is a non-nullable type
 at [Source: (String)"{}"; line: 1, column: 2] (through reference chain: ru.alfacapital.mda.api.securitiesapi.listener.RegistryRecordsEventListener$RegistryRecordsEvent["registry"])
	at com.fasterxml.jackson.module.kotlin.KotlinValueInstantiator.createFromObjectWith(KotlinValueInstantiator.kt:84)
	at com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator.build(PropertyBasedCreator.java:202)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(BeanDeserializer.java:519)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1405)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:352)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
ckson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:185)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:323)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4674)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3629)
	at org.springframework.kafka.support.converter.JsonMessageConverter.extractAndConvertValue(JsonMessageConverter.java:113)
	... 26 common frames omitted
