19:16:23.423 [Test worker] WARN  i.g.a.c.e.exam.core.ContentVerifier.verify-gIAlu-s - Content verification error
org.opentest4j.AssertionFailedError: JSON documents are different:
Different value found in node "", expected: <[{"id":1,"isin":"ISIN1","name":"SOGOU Inc","typeCode":"SEC","cfiType":{"fullCode":"ESVUFR","category":{"code":"E","name":"Equity","nameRus":"Капитал"},"group":{"code":"S","name":"Common/Ordinary shares","nameRus":"Обычные акции"},"attributes":[{"position":1,"name":"Voting right","nameRus":"Право голоса","value":{"code":"V","name":"Voting","nameRus":"Голосование"}},{"position":2,"name":"Ownership","nameRus":"Владение","value":{"code":"U","name":"Free","nameRus":"Свободно"}},{"position":3,"name":"Payment Status","nameRus":"Статус платежа","value":{"code":"F","name":"Fully Paid","nameRus":"Полностью оплачено"}},{"position":4,"name":"Form","nameRus":"Форма","value":{"code":"R","name":"Registered","nameRus":"Зарегистрированный"}}]},"active":true,"statusDescription":"Размещен","createdAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.422","updatedAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.422","fields":[{"source":"BDL","code":"BASE_VALUE","value":"112","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"BASE_VALUE","value":"111","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"CFI","value":"ESVUFR","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"FACE_VALUE","value":"132","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"CURRENCY","value":"122","timestamp":"2024-01-29T00:00:00"}]},{"id":2,"isin":"ISIN2","name":"Apple Inc. ао","typeCode":"SEC","cfiType":{"fullCode":"DBFUFB","category":{"code":"D","name":"Debt instruments","nameRus":"Долговые инструменты"},"group":{"code":"B","name":"Bonds","nameRus":"Облигации"},"attributes":[{"position":1,"name":"Type of interest","nameRus":"Тип интереса","value":{"code":"F","name":"Fixed Rate","nameRus":"Фиксированная ставка"}},{"position":2,"name":"Guarantee","nameRus":"Гарантия","value":{"code":"U","name":"Unsecured/Unguaranteed","nameRus":"Необеспеченный / Негарантированное"}},{"position":3,"name":"Redemption/Reimbursement","nameRus":"Выкуп / Компенсации","value":{"code":"F","name":"Fixed Maturity","nameRus":"Фиксированная зрелость"}},{"position":4,"name":"Form","nameRus":"Форма","value":{"code":"B","name":"Bearer","nameRus":"Податель"}}]},"active":true,"statusDescription":"В обращении","createdAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.422","updatedAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.422","fields":[{"source":"NSD","code":"BASE_VALUE","value":"212","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"CFI","value":"DBFUFB","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"FACE_VALUE","value":"233","timestamp":"2024-01-29T00:00:00"},{"source":"BDL","code":"FACE_VALUE","value":"231","timestamp":"2024-01-29T00:00:00"}]},{"id":3,"isin":"ISIN3","name":"ADIDAS AG ORD SHS","typeCode":"AFORSEC","active":true,"createdAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.423","updatedAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.423","fields":[]}]> but was: <{"timestamp":"2024-02-05T16:16:23.419+00:00","status":500,"error":"Internal Server Error","path":"/securities"}>.

	at net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory.createException(ExceptionFactory.java:35)
	at net.javacrumbs.jsonunit.core.internal.ExceptionUtils.createException(ExceptionUtils.java:45)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:617)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:612)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonPartEquals(JsonAssert.java:84)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals(JsonAssert.java:69)
	at io.github.adven27.concordion.extensions.exam.core.JsonVerifier.assertThat(Content.kt:181)
	at io.github.adven27.concordion.extensions.exam.core.ContentVerifier$Default.verify-gIAlu-s(Content.kt:122)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:411)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:394)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.execute(RestCommands.kt:275)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at io.github.adven27.concordion.extensions.exam.core.commands.ExamCommand.execute(ExamCommand.kt:62)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at org.concordion.internal.command.ExampleCommand.execute(ExampleCommand.java:49)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.internal.XMLSpecification.processNode(XMLSpecification.java:60)
	at org.concordion.internal.XMLSpecification.processExample(XMLSpecification.java:76)
	at org.concordion.Concordion.processExample(Concordion.java:92)
	at org.concordion.internal.FixtureRunner.run(FixtureRunner.java:41)
	at org.concordion.integration.junit4.ConcordionRunner.invoke(ConcordionRunner.java:207)
	at org.concordion.integration.junit4.ConcordionRunner$1.invoke(ConcordionRunner.java:31)
	at org.concordion.integration.junit4.ConcordionFrameworkMethod.invokeExplosively(ConcordionFrameworkMethod.java:58)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:191)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:23)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.concordion.integration.junit4.ConcordionRunner.run(ConcordionRunner.java:150)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:110)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:90)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:85)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy2/jdk.proxy2.$Proxy5.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
19:16:23.432 [http-nio-63657-exec-6] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=null, from=2024-01-28T16:20:01, to=null)
19:16:23.438 [http-nio-63657-exec-6] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet].log - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    SELECT
        s.id          security_id,
        s.isin,
        s.name        security_name,
        s.is_active,
        s.created_at,
        s.updated_at,
        s.status_description,
        src.code       src_code,
        st.id         security_type_id,
        st.code       security_type_code,
        f.id          field_id,
        f.type        field_type,
        f.code        field_code,
        fv3.value     field_value,
        fv3.date      field_date,
        fv3.code      field_src
    FROM security s
    JOIN security_type st ON st.id = s.type
    JOIN source src ON src.id = s.source
    LEFT JOIN (
        SELECT fv2.*,
            FIRST_VALUE(fv2.created_at) OVER ( PARTITION BY fv2.security, fv2.field, fv2.date, fv2.source ORDER BY fv2.created_at DESC ) AS best_created
        FROM (
            SELECT fv.*, src.code FROM field_value fv
            JOIN SOURCE src on src.id = fv.source
            WHERE fv.date >= ?
                AND fv.date <= ?
                AND src.code IN(?, ?)
                and fv.security IN(?, ?, ?)
        ) fv2
    ) fv3
    ON fv3.security = s.id AND fv3.created_at = fv3.best_created
    LEFT JOIN FIELD f ON f.id = fv3.field 
    WHERE s.id IN(?, ?, ?)
    ]; nested exception is org.postgresql.util.PSQLException: Колонки identifier не найдено в этом ResultSet’’е.] with root cause
org.postgresql.util.PSQLException: Колонки identifier не найдено в этом ResultSet’’е.
	at org.postgresql.jdbc.PgResultSet.findColumn(PgResultSet.java:2958)
	at org.postgresql.jdbc.PgResultSet.getBoolean(PgResultSet.java:2821)
	at com.zaxxer.hikari.pool.HikariProxyResultSet.getBoolean(HikariProxyResultSet.java)
	at com.p6spy.engine.wrapper.ResultSetWrapper.getBoolean(ResultSetWrapper.java:359)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$SecurityExtractor.extractSecurity(SecurityRepository.kt:230)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$SecurityExtractor.extractData(SecurityRepository.kt:189)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$SecurityExtractor.extractData(SecurityRepository.kt:185)
	at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:725)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:715)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:740)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.query(NamedParameterJdbcTemplate.java:172)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.find(SecurityRepository.kt:106)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.find(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.find(SecurityService.kt:83)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.find(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.controller.SecurityController.getSecurities(SecurityController.kt:38)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.zalando.logbook.servlet.LogbookFilter.doFilter(LogbookFilter.java:74)
	at org.zalando.logbook.servlet.HttpFilter.doFilter(HttpFilter.java:31)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.cloud.sleuth.instrument.web.servlet.TracingFilter.doFilter(TracingFilter.java:68)
	at org.springframework.cloud.sleuth.autoconfig.instrument.web.TraceWebServletConfiguration$LazyTracingFilter.doFilter(TraceWebServletConfiguration.java:131)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:102)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.springframework.cloud.sleuth.instrument.web.tomcat.TraceValve.invoke(TraceValve.java:90)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1790)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
19:16:23.442 [Test worker] WARN  i.g.a.c.e.exam.core.ContentVerifier.verify-gIAlu-s - Content verification error
org.opentest4j.AssertionFailedError: JSON documents are different:
Different value found in node "", expected: <[{"id":1,"isin":"ISIN1","name":"SOGOU Inc","typeCode":"SEC","cfiType":{"fullCode":"ESVUFR","category":{"code":"E","name":"Equity","nameRus":"Капитал"},"group":{"code":"S","name":"Common/Ordinary shares","nameRus":"Обычные акции"},"attributes":[{"position":1,"name":"Voting right","nameRus":"Право голоса","value":{"code":"V","name":"Voting","nameRus":"Голосование"}},{"position":2,"name":"Ownership","nameRus":"Владение","value":{"code":"U","name":"Free","nameRus":"Свободно"}},{"position":3,"name":"Payment Status","nameRus":"Статус платежа","value":{"code":"F","name":"Fully Paid","nameRus":"Полностью оплачено"}},{"position":4,"name":"Form","nameRus":"Форма","value":{"code":"R","name":"Registered","nameRus":"Зарегистрированный"}}]},"active":true,"statusDescription":"Размещен","createdAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.442","updatedAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.442","fields":[{"source":"BDL","code":"BASE_VALUE","value":"112","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"CFI","value":"ESVUFR","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"FACE_VALUE","value":"132","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"CURRENCY","value":"122","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"BASE_VALUE","value":"111","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"BASE_VALUE","value":"110","timestamp":"2024-01-28T00:00:00"},{"source":"NSD","code":"FACE_VALUE","value":"130","timestamp":"2024-01-28T00:00:00"}]},{"id":2,"isin":"ISIN2","name":"Apple Inc. ао","typeCode":"SEC","cfiType":{"fullCode":"DBFUFB","category":{"code":"D","name":"Debt instruments","nameRus":"Долговые инструменты"},"group":{"code":"B","name":"Bonds","nameRus":"Облигации"},"attributes":[{"position":1,"name":"Type of interest","nameRus":"Тип интереса","value":{"code":"F","name":"Fixed Rate","nameRus":"Фиксированная ставка"}},{"position":2,"name":"Guarantee","nameRus":"Гарантия","value":{"code":"U","name":"Unsecured/Unguaranteed","nameRus":"Необеспеченный / Негарантированное"}},{"position":3,"name":"Redemption/Reimbursement","nameRus":"Выкуп / Компенсации","value":{"code":"F","name":"Fixed Maturity","nameRus":"Фиксированная зрелость"}},{"position":4,"name":"Form","nameRus":"Форма","value":{"code":"B","name":"Bearer","nameRus":"Податель"}}]},"active":true,"statusDescription":"В обращении","createdAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.442","updatedAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.442","fields":[{"source":"NSD","code":"BASE_VALUE","value":"212","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"CFI","value":"DBFUFB","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"FACE_VALUE","value":"233","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"BASE_VALUE","value":"210","timestamp":"2024-01-28T00:00:00"},{"source":"BDL","code":"FACE_VALUE","value":"231","timestamp":"2024-01-29T00:00:00"}]},{"id":3,"isin":"ISIN3","name":"ADIDAS AG ORD SHS","typeCode":"AFORSEC","active":true,"createdAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.442","updatedAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.442","fields":[]}]> but was: <{"timestamp":"2024-02-05T16:16:23.439+00:00","status":500,"error":"Internal Server Error","path":"/securities"}>.

	at net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory.createException(ExceptionFactory.java:35)
	at net.javacrumbs.jsonunit.core.internal.ExceptionUtils.createException(ExceptionUtils.java:45)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:617)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:612)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonPartEquals(JsonAssert.java:84)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals(JsonAssert.java:69)
	at io.github.adven27.concordion.extensions.exam.core.JsonVerifier.assertThat(Content.kt:181)
	at io.github.adven27.concordion.extensions.exam.core.ContentVerifier$Default.verify-gIAlu-s(Content.kt:122)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:411)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:394)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.execute(RestCommands.kt:275)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at io.github.adven27.concordion.extensions.exam.core.commands.ExamCommand.execute(ExamCommand.kt:62)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at org.concordion.internal.command.ExampleCommand.execute(ExampleCommand.java:49)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.internal.XMLSpecification.processNode(XMLSpecification.java:60)
	at org.concordion.internal.XMLSpecification.processExample(XMLSpecification.java:76)
	at org.concordion.Concordion.processExample(Concordion.java:92)
	at org.concordion.internal.FixtureRunner.run(FixtureRunner.java:41)
	at org.concordion.integration.junit4.ConcordionRunner.invoke(ConcordionRunner.java:207)
	at org.concordion.integration.junit4.ConcordionRunner$1.invoke(ConcordionRunner.java:31)
	at org.concordion.integration.junit4.ConcordionFrameworkMethod.invokeExplosively(ConcordionFrameworkMethod.java:58)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:191)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:23)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.concordion.integration.junit4.ConcordionRunner.run(ConcordionRunner.java:150)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:110)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:90)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:85)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy2/jdk.proxy2.$Proxy5.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
19:16:23.450 [http-nio-63657-exec-12] DEBUG r.a.m.a.s.service.SecurityService.find - Finding securities by filter: SecurityFilter(idTypes=[ISIN, RULE_NUMBER], ids=[ISIN1, ISIN2, ISIN3], fields=null, sources=[NSD, BDL], at=null, from=2024-01-28T23:55:55, to=2024-01-29T00:00)
19:16:23.456 [http-nio-63657-exec-12] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet].log - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    SELECT
        s.id          security_id,
        s.isin,
        s.name        security_name,
        s.is_active,
        s.created_at,
        s.updated_at,
        s.status_description,
        src.code       src_code,
        st.id         security_type_id,
        st.code       security_type_code,
        f.id          field_id,
        f.type        field_type,
        f.code        field_code,
        fv3.value     field_value,
        fv3.date      field_date,
        fv3.code      field_src
    FROM security s
    JOIN security_type st ON st.id = s.type
    JOIN source src ON src.id = s.source
    LEFT JOIN (
        SELECT fv2.*,
            FIRST_VALUE(fv2.created_at) OVER ( PARTITION BY fv2.security, fv2.field, fv2.date, fv2.source ORDER BY fv2.created_at DESC ) AS best_created
        FROM (
            SELECT fv.*, src.code FROM field_value fv
            JOIN SOURCE src on src.id = fv.source
            WHERE fv.date >= ?
                AND fv.date <= ?
                AND src.code IN(?, ?)
                and fv.security IN(?, ?, ?)
        ) fv2
    ) fv3
    ON fv3.security = s.id AND fv3.created_at = fv3.best_created
    LEFT JOIN FIELD f ON f.id = fv3.field 
    WHERE s.id IN(?, ?, ?)
    ]; nested exception is org.postgresql.util.PSQLException: Колонки identifier не найдено в этом ResultSet’’е.] with root cause
org.postgresql.util.PSQLException: Колонки identifier не найдено в этом ResultSet’’е.
	at org.postgresql.jdbc.PgResultSet.findColumn(PgResultSet.java:2958)
	at org.postgresql.jdbc.PgResultSet.getBoolean(PgResultSet.java:2821)
	at com.zaxxer.hikari.pool.HikariProxyResultSet.getBoolean(HikariProxyResultSet.java)
	at com.p6spy.engine.wrapper.ResultSetWrapper.getBoolean(ResultSetWrapper.java:359)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$SecurityExtractor.extractSecurity(SecurityRepository.kt:230)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$SecurityExtractor.extractData(SecurityRepository.kt:189)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$SecurityExtractor.extractData(SecurityRepository.kt:185)
	at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:725)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:715)
	at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:740)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.query(NamedParameterJdbcTemplate.java:172)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.find(SecurityRepository.kt:106)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.find(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.find(SecurityService.kt:83)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.find(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.controller.SecurityController.getSecurities(SecurityController.kt:38)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.zalando.logbook.servlet.LogbookFilter.doFilter(LogbookFilter.java:74)
	at org.zalando.logbook.servlet.HttpFilter.doFilter(HttpFilter.java:31)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.cloud.sleuth.instrument.web.servlet.TracingFilter.doFilter(TracingFilter.java:68)
	at org.springframework.cloud.sleuth.autoconfig.instrument.web.TraceWebServletConfiguration$LazyTracingFilter.doFilter(TraceWebServletConfiguration.java:131)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:102)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:168)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.springframework.cloud.sleuth.instrument.web.tomcat.TraceValve.invoke(TraceValve.java:90)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1790)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
19:16:23.461 [Test worker] WARN  i.g.a.c.e.exam.core.ContentVerifier.verify-gIAlu-s - Content verification error
org.opentest4j.AssertionFailedError: JSON documents are different:
Different value found in node "", expected: <[{"id":1,"isin":"ISIN1","name":"SOGOU Inc","typeCode":"SEC","cfiType":{"fullCode":"ESVUFR","category":{"code":"E","name":"Equity","nameRus":"Капитал"},"group":{"code":"S","name":"Common/Ordinary shares","nameRus":"Обычные акции"},"attributes":[{"position":1,"name":"Voting right","nameRus":"Право голоса","value":{"code":"V","name":"Voting","nameRus":"Голосование"}},{"position":2,"name":"Ownership","nameRus":"Владение","value":{"code":"U","name":"Free","nameRus":"Свободно"}},{"position":3,"name":"Payment Status","nameRus":"Статус платежа","value":{"code":"F","name":"Fully Paid","nameRus":"Полностью оплачено"}},{"position":4,"name":"Form","nameRus":"Форма","value":{"code":"R","name":"Registered","nameRus":"Зарегистрированный"}}]},"active":true,"statusDescription":"Размещен","createdAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.461","updatedAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.461","fields":[{"source":"BDL","code":"BASE_VALUE","value":"112","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"CFI","value":"ESVUFR","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"FACE_VALUE","value":"132","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"CURRENCY","value":"122","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"BASE_VALUE","value":"111","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"BASE_VALUE","value":"110","timestamp":"2024-01-28T00:00:00"},{"source":"NSD","code":"FACE_VALUE","value":"130","timestamp":"2024-01-28T00:00:00"}]},{"id":2,"isin":"ISIN2","name":"Apple Inc. ао","typeCode":"SEC","cfiType":{"fullCode":"DBFUFB","category":{"code":"D","name":"Debt instruments","nameRus":"Долговые инструменты"},"group":{"code":"B","name":"Bonds","nameRus":"Облигации"},"attributes":[{"position":1,"name":"Type of interest","nameRus":"Тип интереса","value":{"code":"F","name":"Fixed Rate","nameRus":"Фиксированная ставка"}},{"position":2,"name":"Guarantee","nameRus":"Гарантия","value":{"code":"U","name":"Unsecured/Unguaranteed","nameRus":"Необеспеченный / Негарантированное"}},{"position":3,"name":"Redemption/Reimbursement","nameRus":"Выкуп / Компенсации","value":{"code":"F","name":"Fixed Maturity","nameRus":"Фиксированная зрелость"}},{"position":4,"name":"Form","nameRus":"Форма","value":{"code":"B","name":"Bearer","nameRus":"Податель"}}]},"active":true,"statusDescription":"В обращении","createdAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.461","updatedAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.461","fields":[{"source":"NSD","code":"BASE_VALUE","value":"212","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"BASE_VALUE","value":"210","timestamp":"2024-01-28T00:00:00"},{"source":"NSD","code":"CFI","value":"DBFUFB","timestamp":"2024-01-29T00:00:00"},{"source":"BDL","code":"FACE_VALUE","value":"231","timestamp":"2024-01-29T00:00:00"},{"source":"NSD","code":"FACE_VALUE","value":"233","timestamp":"2024-01-29T00:00:00"}]},{"id":3,"isin":"ISIN3","name":"ADIDAS AG ORD SHS","typeCode":"AFORSEC","active":true,"createdAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.461","updatedAt":"${json-unit.matches:formattedAndWithin}ISO_LOCAL|$|1m|$|2024-02-05T19:16:23.461","fields":[]}]> but was: <{"timestamp":"2024-02-05T16:16:23.457+00:00","status":500,"error":"Internal Server Error","path":"/securities"}>.

	at net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory.createException(ExceptionFactory.java:35)
	at net.javacrumbs.jsonunit.core.internal.ExceptionUtils.createException(ExceptionUtils.java:45)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:617)
	at net.javacrumbs.jsonunit.core.internal.Diff.failIfDifferent(Diff.java:612)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonPartEquals(JsonAssert.java:84)
	at net.javacrumbs.jsonunit.JsonAssert.assertJsonEquals(JsonAssert.java:69)
	at io.github.adven27.concordion.extensions.exam.core.JsonVerifier.assertThat(Content.kt:181)
	at io.github.adven27.concordion.extensions.exam.core.ContentVerifier$Default.verify-gIAlu-s(Content.kt:122)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:411)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.check(RestCommands.kt:394)
	at io.github.adven27.concordion.extensions.exam.ws.CaseCommand.execute(RestCommands.kt:275)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at io.github.adven27.concordion.extensions.exam.core.commands.ExamCommand.execute(ExamCommand.kt:62)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.api.CommandCallList.processSequentially(CommandCallList.java:33)
	at org.concordion.internal.command.ExampleCommand.execute(ExampleCommand.java:49)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.LocalTextDecorator.process(LocalTextDecorator.java:26)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.AbstractCommandDecorator$2.run(AbstractCommandDecorator.java:25)
	at org.concordion.internal.command.ThrowableCatchingDecorator.process(ThrowableCatchingDecorator.java:38)
	at org.concordion.api.AbstractCommandDecorator.execute(AbstractCommandDecorator.java:23)
	at org.concordion.api.CommandCall.execute(CommandCall.java:72)
	at org.concordion.internal.XMLSpecification.processNode(XMLSpecification.java:60)
	at org.concordion.internal.XMLSpecification.processExample(XMLSpecification.java:76)
	at org.concordion.Concordion.processExample(Concordion.java:92)
	at org.concordion.internal.FixtureRunner.run(FixtureRunner.java:41)
	at org.concordion.integration.junit4.ConcordionRunner.invoke(ConcordionRunner.java:207)
	at org.concordion.integration.junit4.ConcordionRunner$1.invoke(ConcordionRunner.java:31)
	at org.concordion.integration.junit4.ConcordionFrameworkMethod.invokeExplosively(ConcordionFrameworkMethod.java:58)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:191)
	at org.concordion.integration.junit4.ConcordionRunner.runChild(ConcordionRunner.java:23)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.concordion.integration.junit4.ConcordionRunner.run(ConcordionRunner.java:150)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
	at org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:42)
	at org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:80)
	at org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:72)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:110)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:90)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:85)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy2/jdk.proxy2.$Proxy5.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
19:16:23.648 [http-nio-63657-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "80514838b291fe1a",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:63657/securities",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "63657",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:63657" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
19:16:23.648 [http-nio-63657-exec-7] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "80514838b291fe1a",
  "duration" : 1,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Mon, 05 Feb 2024 16:16:23 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"ids","message":"must not be null"}]}
}
19:16:23.658 [http-nio-63657-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "d74eb169bea83e62",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:63657/securities?ids=",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "63657",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:63657" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
19:16:23.658 [http-nio-63657-exec-9] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "d74eb169bea83e62",
  "duration" : 3,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Mon, 05 Feb 2024 16:16:23 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"ids","message":"size must be between 1 and 100"}]}
}
19:16:23.668 [http-nio-63657-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "983776df06852742",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:63657/securities?ids=ISIN1&fields=",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "63657",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:63657" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
19:16:23.668 [http-nio-63657-exec-10] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "983776df06852742",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Mon, 05 Feb 2024 16:16:23 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"fields","message":"size must be between 1 and 100"}]}
}
19:16:23.689 [http-nio-63657-exec-13] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "eca113ba1481cd4b",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:63657/securities?ids=ISIN1&at=2024-01-29T13%3A40%3A01&from=2024-01-29T13%3A40%3A02&to=2024-01-29T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "63657",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:63657" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
19:16:23.690 [http-nio-63657-exec-13] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "eca113ba1481cd4b",
  "duration" : 10,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Mon, 05 Feb 2024 16:16:23 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"must be null when 'at' not null"},{"path":"to","message":"must be null when 'at' not null"}]}
}
19:16:23.700 [http-nio-63657-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a18f69dc74c13073",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:63657/securities?ids=ISIN1&at=2024-01-29T13%3A40%3A01&from=2024-01-29T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "63657",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:63657" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
19:16:23.700 [http-nio-63657-exec-5] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a18f69dc74c13073",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Mon, 05 Feb 2024 16:16:23 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"must be null when 'at' not null"}]}
}
19:16:23.711 [http-nio-63657-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "a12ca8bb3fe5bcf6",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:63657/securities?ids=ISIN1&at=2024-01-29T13%3A40%3A01&to=2024-01-29T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "63657",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:63657" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
19:16:23.711 [http-nio-63657-exec-1] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "a12ca8bb3fe5bcf6",
  "duration" : 3,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Mon, 05 Feb 2024 16:16:23 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"to","message":"must be null when 'at' not null"}]}
}
19:16:23.720 [http-nio-63657-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "fec96938ad22189b",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:63657/securities?ids=ISIN1&to=2024-01-29T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "63657",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:63657" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
19:16:23.721 [http-nio-63657-exec-3] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "fec96938ad22189b",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Mon, 05 Feb 2024 16:16:23 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"must not be null when 'to' not null"}]}
}
19:16:23.730 [http-nio-63657-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "cf6f52e983778fb2",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:63657/securities?ids=ISIN1&from=2021-05-01T13%3A40%3A02&to=2021-08-01T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "63657",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:63657" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
19:16:23.730 [http-nio-63657-exec-4] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "cf6f52e983778fb2",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Mon, 05 Feb 2024 16:16:23 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"more than 90 days between 'from' and 'to'"},{"path":"to","message":"more than 90 days between 'from' and 'to'"}]}
}
19:16:23.738 [http-nio-63657-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "9fcbcbe94f368ce9",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:63657/securities?ids=ISIN1&from=2021-05-01T13%3A40%3A02",
  "host" : "localhost",
  "path" : "/securities",
  "scheme" : "http",
  "port" : "63657",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:63657" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
19:16:23.739 [http-nio-63657-exec-2] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "9fcbcbe94f368ce9",
  "duration" : 2,
  "protocol" : "HTTP/1.1",
  "status" : 400,
  "headers" : {
    "Connection" : [ "close" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Mon, 05 Feb 2024 16:16:23 GMT" ],
    "Transfer-Encoding" : [ "chunked" ]
  },
  "body" : {"code":"INVALID_FORMAT","violations":[{"path":"from","message":"more than 90 days between 'from' and now"}]}
}
19:16:23.787 [http-nio-63657-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "remote",
  "type" : "request",
  "correlation" : "bf25d62e3e108e90",
  "protocol" : "HTTP/1.1",
  "remote" : "127.0.0.1",
  "method" : "GET",
  "uri" : "http://localhost:63657/securities/types",
  "host" : "localhost",
  "path" : "/securities/types",
  "scheme" : "http",
  "port" : "63657",
  "headers" : {
    "accept" : [ "*/*" ],
    "accept-encoding" : [ "gzip,deflate" ],
    "connection" : [ "Keep-Alive" ],
    "content-type" : [ "application/json" ],
    "host" : [ "localhost:63657" ],
    "user-agent" : [ "Apache-HttpClient/4.5.14 (Java/18.0.1.1)" ]
  }
}
19:16:23.788 [http-nio-63657-exec-11] TRACE org.zalando.logbook.Logbook.write - {
  "origin" : "local",
  "type" : "response",
  "correlation" : "bf25d62e3e108e90",
  "duration" : 7,
  "protocol" : "HTTP/1.1",
  "status" : 200,
  "headers" : {
    "Connection" : [ "keep-alive" ],
    "Content-Type" : [ "application/json" ],
    "Date" : [ "Mon, 05 Feb 2024 16:16:23 GMT" ],
    "Keep-Alive" : [ "timeout=60" ],
    "Transfer-Encoding" : [ "chunked" ]
  }
}
19:16:24.239 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
19:16:26.430 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 0, CreateTime = 1707149784183, serialized key size = -1, serialized value size = 436, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [55, 51, 51, 101, 56, 55, 48, 50, 99, 100, 99, 53, 54, 100, 50, 101, 45, 55, 51, 51, 101, 56, 55, 48, 50, 99, 100, 99, 53, 54, 100, 50, 101, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "0" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
19:16:26.482 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
19:16:26.548 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
19:16:27.543 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:28.695 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:28.811 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 1, CreateTime = 1707149784196, serialized key size = -1, serialized value size = 440, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [97, 57, 48, 52, 57, 54, 55, 52, 54, 100, 51, 52, 100, 51, 55, 97, 45, 97, 57, 48, 52, 57, 54, 55, 52, 54, 100, 51, 52, 100, 51, 55, 97, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-01-01T00:00:01",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "0.008" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
19:16:28.812 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 0, CreateTime = 1707149786462, serialized key size = -1, serialized value size = 436, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 83, 81, 76, 83, 116, 97, 116, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 100, 111, 84, 114, 97, 110, 115, 108, 97, 116, 101, 40, 83, 81, 76, 83, 116, 97, 116, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 55, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 57, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 51, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 55, 54, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 107, 116, 58, 49, 51, 48, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 99, 102, 48, 53, 101, 100, 99, 100, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 115, 117, 112, 112, 111, 114, 116, 46, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 102, 57, 51, 98, 98, 51, 53, 100, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 112, 114, 105, 111, 114, 105, 116, 105, 101, 115, 65, 119, 97, 114, 101, 83, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 49, 48, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 57, 57, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 55, 53, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 50, 100, 54, 49, 54, 98, 49, 98, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 36, 49, 46, 112, 114, 111, 99, 101, 101, 100, 87, 105, 116, 104, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 50, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 105, 110, 118, 111, 107, 101, 87, 105, 116, 104, 105, 110, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 106, 97, 118, 97, 58, 51, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 97, 52, 49, 97, 102, 57, 55, 50, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 106, 100, 98, 99, 46, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 49, 48, 49, 53, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 122, 97, 120, 120, 101, 114, 46, 104, 105, 107, 97, 114, 105, 46, 112, 111, 111, 108, 46, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 112, 54, 115, 112, 121, 46, 101, 110, 103, 105, 110, 101, 46, 119, 114, 97, 112, 112, 101, 114, 46, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 106, 97, 118, 97, 58, 51, 52, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 86, 97, 108, 117, 101, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 52, 49, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 86, 97, 108, 117, 101, 73, 110, 116, 101, 114, 110, 97, 108, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 50, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 86, 97, 108, 117, 101, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 53, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 70, 97, 99, 116, 111, 114, 121, 36, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 73, 109, 112, 108, 46, 115, 101, 116, 86, 97, 108, 117, 101, 115, 40, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 70, 97, 99, 116, 111, 114, 121, 46, 106, 97, 118, 97, 58, 50, 55, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 36, 49, 46, 115, 101, 116, 86, 97, 108, 117, 101, 115, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 108, 97, 109, 98, 100, 97, 36, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 36, 52, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 52, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 53, 48, 41, 10, 9, 46, 46, 46, 32, 53, 49, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, 122, 14, 116, 119]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-01-01T00:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "0" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:28.841 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
19:16:28.896 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerPausedEvent - Got ConsumerPausedEvent [reason=For batch retry, partitions=[md.security.data.batch-0]]
19:16:29.964 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:31.050 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:31.125 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 1, CreateTime = 1707149788823, serialized key size = -1, serialized value size = 440, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 83, 81, 76, 83, 116, 97, 116, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 100, 111, 84, 114, 97, 110, 115, 108, 97, 116, 101, 40, 83, 81, 76, 83, 116, 97, 116, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 55, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 57, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 51, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 55, 54, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 107, 116, 58, 49, 51, 48, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 99, 102, 48, 53, 101, 100, 99, 100, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 115, 117, 112, 112, 111, 114, 116, 46, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 102, 57, 51, 98, 98, 51, 53, 100, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 112, 114, 105, 111, 114, 105, 116, 105, 101, 115, 65, 119, 97, 114, 101, 83, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 49, 48, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 57, 57, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 55, 53, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 50, 100, 54, 49, 54, 98, 49, 98, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 36, 49, 46, 112, 114, 111, 99, 101, 101, 100, 87, 105, 116, 104, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 50, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 105, 110, 118, 111, 107, 101, 87, 105, 116, 104, 105, 110, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 106, 97, 118, 97, 58, 51, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 97, 52, 49, 97, 102, 57, 55, 50, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 106, 100, 98, 99, 46, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 49, 48, 49, 53, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 122, 97, 120, 120, 101, 114, 46, 104, 105, 107, 97, 114, 105, 46, 112, 111, 111, 108, 46, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 112, 54, 115, 112, 121, 46, 101, 110, 103, 105, 110, 101, 46, 119, 114, 97, 112, 112, 101, 114, 46, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 106, 97, 118, 97, 58, 51, 52, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 86, 97, 108, 117, 101, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 52, 49, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 86, 97, 108, 117, 101, 73, 110, 116, 101, 114, 110, 97, 108, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 50, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 86, 97, 108, 117, 101, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 53, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 70, 97, 99, 116, 111, 114, 121, 36, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 73, 109, 112, 108, 46, 115, 101, 116, 86, 97, 108, 117, 101, 115, 40, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 70, 97, 99, 116, 111, 114, 121, 46, 106, 97, 118, 97, 58, 50, 55, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 36, 49, 46, 115, 101, 116, 86, 97, 108, 117, 101, 115, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 108, 97, 109, 98, 100, 97, 36, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 36, 52, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 52, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 53, 48, 41, 10, 9, 46, 46, 46, 32, 53, 49, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 1]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, 122, 14, 116, -124]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-01-01T00:00:01",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "0.008" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:31.136 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 2, CreateTime = 1707149784211, serialized key size = -1, serialized value size = 437, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [51, 52, 55, 52, 51, 51, 100, 102, 49, 101, 48, 57, 56, 99, 53, 97, 45, 51, 52, 55, 52, 51, 51, 100, 102, 49, 101, 48, 57, 56, 99, 53, 97, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-01-01T00:01:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "11" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
19:16:31.177 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 3, CreateTime = 1707149784222, serialized key size = -1, serialized value size = 440, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [51, 52, 55, 52, 51, 51, 100, 102, 49, 101, 48, 57, 56, 99, 53, 97, 45, 51, 52, 55, 52, 51, 51, 100, 102, 49, 101, 48, 57, 56, 99, 53, 97, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-01-01T01:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "11.22" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
19:16:31.188 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 4, CreateTime = 1707149784228, serialized key size = -1, serialized value size = 457, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [51, 52, 55, 52, 51, 51, 100, 102, 49, 101, 48, 57, 56, 99, 53, 97, 45, 51, 52, 55, 52, 51, 51, 100, 102, 49, 101, 48, 57, 56, 99, 53, 97, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-02-02T00:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "0.00800000000000000001" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
19:16:31.196 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data.batch, partition = 0, leaderEpoch = 0, offset = 5, CreateTime = 1707149784234, serialized key size = -1, serialized value size = 456, headers = RecordHeaders(headers = [RecordHeader(key = b3, value = [51, 52, 55, 52, 51, 51, 100, 102, 49, 101, 48, 57, 56, 99, 53, 97, 45, 51, 52, 55, 52, 51, 51, 100, 102, 49, 101, 48, 57, 56, 99, 53, 97, 45, 48])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-02-01T00:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "999999999999999999.99" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(java.util.List<ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent>,java.util.List<? extends org.springframework.kafka.support.converter.ConversionException>)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2318)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessageWithRecordsOrList(KafkaMessageListenerContainer.java:2288)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchOnMessage(KafkaMessageListenerContainer.java:2231)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchListener(KafkaMessageListenerContainer.java:2141)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeBatchListener(KafkaMessageListenerContainer.java:2024)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2003)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
	Suppressed: org.springframework.kafka.listener.ListenerExecutionFailedException: Restored Stack Trace
		at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:363)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
		at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
		at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventBatchListener.securityDataEventBatch(SecurityDataListener.kt:45)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:339)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.invoke(BatchMessagingMessageListenerAdapter.java:180)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:172)
	at org.springframework.kafka.listener.adapter.BatchMessagingMessageListenerAdapter.onMessage(BatchMessagingMessageListenerAdapter.java:61)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeBatchOnMessage(KafkaMessageListenerContainer.java:2298)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 51 common frames omitted
19:16:31.208 [org.springframework.kafka.KafkaListenerEndpointContainer#3-0-C-1] INFO  r.a.m.a.s.c.i.ListenersController.consumerResumedEvent - Got ConsumerResumedEvent [partitions=[md.security.data.batch-0]]
19:16:31.631 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
19:16:32.252 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:32.640 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
19:16:33.333 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:33.344 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 2, CreateTime = 1707149791156, serialized key size = -1, serialized value size = 437, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 83, 81, 76, 83, 116, 97, 116, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 100, 111, 84, 114, 97, 110, 115, 108, 97, 116, 101, 40, 83, 81, 76, 83, 116, 97, 116, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 55, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 57, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 51, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 55, 54, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 107, 116, 58, 49, 51, 48, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 99, 102, 48, 53, 101, 100, 99, 100, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 115, 117, 112, 112, 111, 114, 116, 46, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 102, 57, 51, 98, 98, 51, 53, 100, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 112, 114, 105, 111, 114, 105, 116, 105, 101, 115, 65, 119, 97, 114, 101, 83, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 49, 48, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 57, 57, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 55, 53, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 50, 100, 54, 49, 54, 98, 49, 98, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 36, 49, 46, 112, 114, 111, 99, 101, 101, 100, 87, 105, 116, 104, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 50, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 105, 110, 118, 111, 107, 101, 87, 105, 116, 104, 105, 110, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 106, 97, 118, 97, 58, 51, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 97, 52, 49, 97, 102, 57, 55, 50, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 106, 100, 98, 99, 46, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 49, 48, 49, 53, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 122, 97, 120, 120, 101, 114, 46, 104, 105, 107, 97, 114, 105, 46, 112, 111, 111, 108, 46, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 112, 54, 115, 112, 121, 46, 101, 110, 103, 105, 110, 101, 46, 119, 114, 97, 112, 112, 101, 114, 46, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 106, 97, 118, 97, 58, 51, 52, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 86, 97, 108, 117, 101, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 52, 49, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 86, 97, 108, 117, 101, 73, 110, 116, 101, 114, 110, 97, 108, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 50, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 86, 97, 108, 117, 101, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 53, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 70, 97, 99, 116, 111, 114, 121, 36, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 73, 109, 112, 108, 46, 115, 101, 116, 86, 97, 108, 117, 101, 115, 40, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 70, 97, 99, 116, 111, 114, 121, 46, 106, 97, 118, 97, 58, 50, 55, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 36, 49, 46, 115, 101, 116, 86, 97, 108, 117, 101, 115, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 108, 97, 109, 98, 100, 97, 36, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 36, 52, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 52, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 53, 48, 41, 10, 9, 46, 46, 46, 32, 53, 49, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 2]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, 122, 14, 116, -109]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-01-01T00:01:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "11" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:33.649 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
19:16:34.656 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
19:16:34.905 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:35.664 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
19:16:35.947 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:35.966 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 3, CreateTime = 1707149791181, serialized key size = -1, serialized value size = 440, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 83, 81, 76, 83, 116, 97, 116, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 100, 111, 84, 114, 97, 110, 115, 108, 97, 116, 101, 40, 83, 81, 76, 83, 116, 97, 116, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 55, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 57, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 51, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 55, 54, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 107, 116, 58, 49, 51, 48, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 99, 102, 48, 53, 101, 100, 99, 100, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 115, 117, 112, 112, 111, 114, 116, 46, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 102, 57, 51, 98, 98, 51, 53, 100, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 112, 114, 105, 111, 114, 105, 116, 105, 101, 115, 65, 119, 97, 114, 101, 83, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 49, 48, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 57, 57, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 55, 53, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 50, 100, 54, 49, 54, 98, 49, 98, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 36, 49, 46, 112, 114, 111, 99, 101, 101, 100, 87, 105, 116, 104, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 50, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 105, 110, 118, 111, 107, 101, 87, 105, 116, 104, 105, 110, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 106, 97, 118, 97, 58, 51, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 97, 52, 49, 97, 102, 57, 55, 50, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 106, 100, 98, 99, 46, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 49, 48, 49, 53, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 122, 97, 120, 120, 101, 114, 46, 104, 105, 107, 97, 114, 105, 46, 112, 111, 111, 108, 46, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 112, 54, 115, 112, 121, 46, 101, 110, 103, 105, 110, 101, 46, 119, 114, 97, 112, 112, 101, 114, 46, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 106, 97, 118, 97, 58, 51, 52, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 86, 97, 108, 117, 101, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 52, 49, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 86, 97, 108, 117, 101, 73, 110, 116, 101, 114, 110, 97, 108, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 50, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 86, 97, 108, 117, 101, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 53, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 70, 97, 99, 116, 111, 114, 121, 36, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 73, 109, 112, 108, 46, 115, 101, 116, 86, 97, 108, 117, 101, 115, 40, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 70, 97, 99, 116, 111, 114, 121, 46, 106, 97, 118, 97, 58, 50, 55, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 36, 49, 46, 115, 101, 116, 86, 97, 108, 117, 101, 115, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 108, 97, 109, 98, 100, 97, 36, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 36, 52, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 52, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 53, 48, 41, 10, 9, 46, 46, 46, 32, 53, 49, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 3]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, 122, 14, 116, -98]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-01-01T01:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "11.22" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:36.670 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
19:16:37.519 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:37.679 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
19:16:38.567 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:38.582 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 4, CreateTime = 1707149791191, serialized key size = -1, serialized value size = 457, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 83, 81, 76, 83, 116, 97, 116, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 100, 111, 84, 114, 97, 110, 115, 108, 97, 116, 101, 40, 83, 81, 76, 83, 116, 97, 116, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 55, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 57, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 51, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 55, 54, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 107, 116, 58, 49, 51, 48, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 99, 102, 48, 53, 101, 100, 99, 100, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 115, 117, 112, 112, 111, 114, 116, 46, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 102, 57, 51, 98, 98, 51, 53, 100, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 112, 114, 105, 111, 114, 105, 116, 105, 101, 115, 65, 119, 97, 114, 101, 83, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 49, 48, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 57, 57, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 55, 53, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 50, 100, 54, 49, 54, 98, 49, 98, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 36, 49, 46, 112, 114, 111, 99, 101, 101, 100, 87, 105, 116, 104, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 50, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 105, 110, 118, 111, 107, 101, 87, 105, 116, 104, 105, 110, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 106, 97, 118, 97, 58, 51, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 97, 52, 49, 97, 102, 57, 55, 50, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 106, 100, 98, 99, 46, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 49, 48, 49, 53, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 122, 97, 120, 120, 101, 114, 46, 104, 105, 107, 97, 114, 105, 46, 112, 111, 111, 108, 46, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 112, 54, 115, 112, 121, 46, 101, 110, 103, 105, 110, 101, 46, 119, 114, 97, 112, 112, 101, 114, 46, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 106, 97, 118, 97, 58, 51, 52, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 86, 97, 108, 117, 101, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 52, 49, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 86, 97, 108, 117, 101, 73, 110, 116, 101, 114, 110, 97, 108, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 50, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 86, 97, 108, 117, 101, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 53, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 70, 97, 99, 116, 111, 114, 121, 36, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 73, 109, 112, 108, 46, 115, 101, 116, 86, 97, 108, 117, 101, 115, 40, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 70, 97, 99, 116, 111, 114, 121, 46, 106, 97, 118, 97, 58, 50, 55, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 36, 49, 46, 115, 101, 116, 86, 97, 108, 117, 101, 115, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 108, 97, 109, 98, 100, 97, 36, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 36, 52, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 52, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 53, 48, 41, 10, 9, 46, 46, 46, 32, 53, 49, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 4]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, 122, 14, 116, -92]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-02-02T00:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "0.00800000000000000001" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:38.688 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
19:16:39.697 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
19:16:40.127 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:40.706 [awaitility[Await DB table security]] ERROR o.dbunit.assertion.DbUnitAssertBase.compareRowCounts - org.dbunit.assertion.DbComparisonFailure[row count (table=security)expected:<1>but was:<0>]
19:16:41.170 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR o.s.k.l.KafkaMessageListenerContainer.error - Error handler threw an exception
org.springframework.kafka.KafkaException: Seek to current after exception; nested exception is org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.SeekUtils.seekOrRecover(SeekUtils.java:208)
	at org.springframework.kafka.listener.DefaultErrorHandler.handleRemaining(DefaultErrorHandler.java:135)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:2707)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2588)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	... 9 common frames omitted
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:41.184 [org.springframework.kafka.KafkaListenerEndpointContainer#4-0-C-1] ERROR r.a.m.a.securitiesapi.SecuritiesApi.dlqPublishingRecoverer$lambda$5 - Failed to process message: ConsumerRecord(topic = md.security.data, partition = 0, leaderEpoch = 0, offset = 5, CreateTime = 1707149791201, serialized key size = -1, serialized value size = 456, headers = RecordHeaders(headers = [RecordHeader(key = kafka_dlt-exception-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-cause-fqcn, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110]), RecordHeader(key = kafka_dlt-exception-message, value = [76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46]), RecordHeader(key = kafka_dlt-exception-stacktrace, value = [111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 76, 105, 115, 116, 101, 110, 101, 114, 32, 109, 101, 116, 104, 111, 100, 32, 39, 112, 117, 98, 108, 105, 99, 32, 118, 111, 105, 100, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 62, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 76, 105, 115, 116, 60, 63, 32, 101, 120, 116, 101, 110, 100, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 115, 117, 112, 112, 111, 114, 116, 46, 99, 111, 110, 118, 101, 114, 116, 101, 114, 46, 67, 111, 110, 118, 101, 114, 115, 105, 111, 110, 69, 120, 99, 101, 112, 116, 105, 111, 110, 62, 41, 39, 32, 116, 104, 114, 101, 119, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 101, 99, 111, 114, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 55, 50, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 51, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 87, 105, 116, 104, 82, 101, 99, 111, 114, 100, 115, 79, 114, 76, 105, 115, 116, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 51, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 49, 52, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 50, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 76, 105, 115, 116, 101, 110, 101, 114, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 48, 48, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 105, 110, 118, 111, 107, 101, 73, 102, 72, 97, 118, 101, 82, 101, 99, 111, 114, 100, 115, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 112, 111, 108, 108, 65, 110, 100, 73, 110, 118, 111, 107, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 51, 54, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 114, 117, 110, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 49, 50, 53, 55, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 69, 120, 101, 99, 117, 116, 111, 114, 115, 36, 82, 117, 110, 110, 97, 98, 108, 101, 65, 100, 97, 112, 116, 101, 114, 46, 99, 97, 108, 108, 40, 69, 120, 101, 99, 117, 116, 111, 114, 115, 46, 106, 97, 118, 97, 58, 53, 51, 57, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 99, 111, 110, 99, 117, 114, 114, 101, 110, 116, 46, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 114, 117, 110, 40, 70, 117, 116, 117, 114, 101, 84, 97, 115, 107, 46, 106, 97, 118, 97, 58, 50, 54, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 84, 104, 114, 101, 97, 100, 46, 114, 117, 110, 40, 84, 104, 114, 101, 97, 100, 46, 106, 97, 118, 97, 58, 56, 51, 51, 41, 10, 9, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 76, 105, 115, 116, 101, 110, 101, 114, 69, 120, 101, 99, 117, 116, 105, 111, 110, 70, 97, 105, 108, 101, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 82, 101, 115, 116, 111, 114, 101, 100, 32, 83, 116, 97, 99, 107, 32, 84, 114, 97, 99, 101, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 54, 51, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 66, 97, 100, 83, 113, 108, 71, 114, 97, 109, 109, 97, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 97, 108, 108, 98, 97, 99, 107, 59, 32, 98, 97, 100, 32, 83, 81, 76, 32, 103, 114, 97, 109, 109, 97, 114, 32, 91, 10, 32, 32, 32, 32, 109, 101, 114, 103, 101, 32, 105, 110, 116, 111, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 10, 32, 32, 32, 32, 117, 115, 105, 110, 103, 32, 40, 10, 32, 32, 32, 32, 32, 32, 32, 32, 119, 105, 116, 104, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 100, 105, 115, 116, 105, 110, 99, 116, 32, 115, 101, 99, 117, 114, 105, 116, 121, 32, 102, 114, 111, 109, 32, 115, 101, 99, 117, 114, 105, 116, 121, 95, 105, 100, 32, 119, 104, 101, 114, 101, 32, 105, 100, 32, 105, 110, 32, 40, 63, 41, 41, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 32, 97, 115, 32, 40, 115, 101, 108, 101, 99, 116, 32, 105, 100, 32, 102, 114, 111, 109, 32, 115, 111, 117, 114, 99, 101, 32, 119, 104, 101, 114, 101, 32, 99, 111, 100, 101, 32, 61, 32, 63, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 115, 101, 108, 101, 99, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 100, 115, 46, 115, 101, 99, 117, 114, 105, 116, 121, 32, 97, 115, 32, 115, 101, 99, 95, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 114, 99, 46, 105, 100, 32, 97, 115, 32, 115, 111, 117, 114, 99, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 117, 105, 100, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 63, 32, 97, 115, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 10, 32, 32, 32, 32, 32, 32, 32, 32, 102, 114, 111, 109, 32, 115, 114, 99, 32, 108, 101, 102, 116, 32, 106, 111, 105, 110, 32, 105, 100, 115, 32, 111, 110, 32, 116, 114, 117, 101, 41, 32, 105, 110, 99, 10, 32, 32, 32, 32, 111, 110, 32, 40, 115, 101, 99, 46, 105, 100, 32, 61, 32, 105, 110, 99, 46, 115, 101, 99, 95, 105, 100, 41, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 32, 115, 101, 116, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 110, 97, 109, 101, 32, 61, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 121, 112, 101, 32, 61, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 117, 112, 100, 97, 116, 101, 100, 95, 97, 116, 32, 61, 32, 99, 117, 114, 114, 101, 110, 116, 95, 116, 105, 109, 101, 115, 116, 97, 109, 112, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 32, 61, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 61, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 115, 111, 117, 114, 99, 101, 32, 61, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 10, 32, 32, 32, 32, 119, 104, 101, 110, 32, 110, 111, 116, 32, 109, 97, 116, 99, 104, 101, 100, 32, 116, 104, 101, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 110, 115, 101, 114, 116, 32, 40, 105, 115, 105, 110, 44, 32, 110, 97, 109, 101, 44, 32, 116, 121, 112, 101, 44, 32, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 44, 32, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 118, 97, 108, 117, 101, 115, 32, 40, 105, 110, 99, 46, 117, 105, 100, 44, 32, 105, 110, 99, 46, 110, 97, 109, 101, 44, 32, 105, 110, 99, 46, 116, 121, 112, 101, 44, 32, 105, 110, 99, 46, 105, 115, 95, 97, 99, 116, 105, 118, 101, 44, 32, 105, 110, 99, 46, 115, 116, 97, 116, 117, 115, 95, 100, 101, 115, 99, 44, 32, 105, 110, 99, 46, 115, 111, 117, 114, 99, 101, 41, 10, 32, 32, 32, 32, 93, 59, 32, 110, 101, 115, 116, 101, 100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 105, 115, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 83, 81, 76, 83, 116, 97, 116, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 100, 111, 84, 114, 97, 110, 115, 108, 97, 116, 101, 40, 83, 81, 76, 83, 116, 97, 116, 101, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 55, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 115, 117, 112, 112, 111, 114, 116, 46, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 40, 65, 98, 115, 116, 114, 97, 99, 116, 70, 97, 108, 108, 98, 97, 99, 107, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 111, 114, 46, 106, 97, 118, 97, 58, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 116, 114, 97, 110, 115, 108, 97, 116, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 57, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 51, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 55, 54, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 107, 116, 58, 49, 51, 48, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 99, 102, 48, 53, 101, 100, 99, 100, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 100, 97, 111, 46, 115, 117, 112, 112, 111, 114, 116, 46, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 80, 101, 114, 115, 105, 115, 116, 101, 110, 99, 101, 69, 120, 99, 101, 112, 116, 105, 111, 110, 84, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 114, 101, 112, 111, 115, 105, 116, 111, 114, 121, 46, 83, 101, 99, 117, 114, 105, 116, 121, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 102, 57, 51, 98, 98, 51, 53, 100, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 105, 101, 115, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 112, 114, 105, 111, 114, 105, 116, 105, 101, 115, 65, 119, 97, 114, 101, 83, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 49, 48, 56, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 57, 57, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 46, 107, 116, 58, 55, 53, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 70, 97, 115, 116, 67, 108, 97, 115, 115, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 50, 100, 54, 49, 54, 98, 49, 98, 46, 105, 110, 118, 111, 107, 101, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 99, 103, 108, 105, 98, 46, 112, 114, 111, 120, 121, 46, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 50, 49, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 105, 110, 118, 111, 107, 101, 74, 111, 105, 110, 112, 111, 105, 110, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 57, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 54, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 36, 49, 46, 112, 114, 111, 99, 101, 101, 100, 87, 105, 116, 104, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 50, 51, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 105, 110, 118, 111, 107, 101, 87, 105, 116, 104, 105, 110, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 65, 115, 112, 101, 99, 116, 83, 117, 112, 112, 111, 114, 116, 46, 106, 97, 118, 97, 58, 51, 56, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 84, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 82, 101, 102, 108, 101, 99, 116, 105, 118, 101, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 106, 97, 118, 97, 58, 49, 56, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 67, 103, 108, 105, 98, 77, 101, 116, 104, 111, 100, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 112, 114, 111, 99, 101, 101, 100, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 54, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 97, 111, 112, 46, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 36, 68, 121, 110, 97, 109, 105, 99, 65, 100, 118, 105, 115, 101, 100, 73, 110, 116, 101, 114, 99, 101, 112, 116, 111, 114, 46, 105, 110, 116, 101, 114, 99, 101, 112, 116, 40, 67, 103, 108, 105, 98, 65, 111, 112, 80, 114, 111, 120, 121, 46, 106, 97, 118, 97, 58, 55, 48, 55, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 115, 101, 114, 118, 105, 99, 101, 46, 83, 101, 99, 117, 114, 105, 116, 121, 83, 101, 114, 118, 105, 99, 101, 36, 36, 69, 110, 104, 97, 110, 99, 101, 114, 66, 121, 83, 112, 114, 105, 110, 103, 67, 71, 76, 73, 66, 36, 36, 97, 52, 49, 97, 102, 57, 55, 50, 46, 115, 97, 118, 101, 83, 101, 99, 117, 114, 105, 116, 121, 40, 60, 103, 101, 110, 101, 114, 97, 116, 101, 100, 62, 41, 10, 9, 97, 116, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 76, 105, 115, 116, 101, 110, 101, 114, 46, 115, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 69, 118, 101, 110, 116, 66, 97, 116, 99, 104, 40, 83, 101, 99, 117, 114, 105, 116, 121, 68, 97, 116, 97, 76, 105, 115, 116, 101, 110, 101, 114, 46, 107, 116, 58, 52, 53, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 100, 107, 46, 105, 110, 116, 101, 114, 110, 97, 108, 46, 114, 101, 102, 108, 101, 99, 116, 46, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 105, 110, 118, 111, 107, 101, 40, 68, 105, 114, 101, 99, 116, 77, 101, 116, 104, 111, 100, 72, 97, 110, 100, 108, 101, 65, 99, 99, 101, 115, 115, 111, 114, 46, 106, 97, 118, 97, 58, 49, 48, 52, 41, 10, 9, 97, 116, 32, 106, 97, 118, 97, 46, 98, 97, 115, 101, 47, 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 114, 101, 102, 108, 101, 99, 116, 46, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 53, 55, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 100, 111, 73, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 54, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 109, 101, 115, 115, 97, 103, 105, 110, 103, 46, 104, 97, 110, 100, 108, 101, 114, 46, 105, 110, 118, 111, 99, 97, 116, 105, 111, 110, 46, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 105, 110, 118, 111, 107, 101, 40, 73, 110, 118, 111, 99, 97, 98, 108, 101, 72, 97, 110, 100, 108, 101, 114, 77, 101, 116, 104, 111, 100, 46, 106, 97, 118, 97, 58, 49, 49, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 72, 97, 110, 100, 108, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 53, 54, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 72, 97, 110, 100, 108, 101, 114, 40, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 51, 51, 57, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 105, 110, 118, 111, 107, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 56, 48, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 49, 55, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 97, 100, 97, 112, 116, 101, 114, 46, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 111, 110, 77, 101, 115, 115, 97, 103, 101, 40, 66, 97, 116, 99, 104, 77, 101, 115, 115, 97, 103, 105, 110, 103, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 65, 100, 97, 112, 116, 101, 114, 46, 106, 97, 118, 97, 58, 54, 49, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 107, 97, 102, 107, 97, 46, 108, 105, 115, 116, 101, 110, 101, 114, 46, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 36, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 115, 117, 109, 101, 114, 46, 100, 111, 73, 110, 118, 111, 107, 101, 66, 97, 116, 99, 104, 79, 110, 77, 101, 115, 115, 97, 103, 101, 40, 75, 97, 102, 107, 97, 77, 101, 115, 115, 97, 103, 101, 76, 105, 115, 116, 101, 110, 101, 114, 67, 111, 110, 116, 97, 105, 110, 101, 114, 46, 106, 97, 118, 97, 58, 50, 50, 57, 56, 41, 10, 9, 46, 46, 46, 32, 49, 49, 32, 109, 111, 114, 101, 10, 67, 97, 117, 115, 101, 100, 32, 98, 121, 58, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 117, 116, 105, 108, 46, 80, 83, 81, 76, 69, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32, 67, 97, 110, 39, 116, 32, 105, 110, 102, 101, 114, 32, 116, 104, 101, 32, 83, 81, 76, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 32, 102, 111, 114, 32, 97, 110, 32, 105, 110, 115, 116, 97, 110, 99, 101, 32, 111, 102, 32, 114, 117, 46, 97, 108, 102, 97, 99, 97, 112, 105, 116, 97, 108, 46, 109, 100, 97, 46, 97, 112, 105, 46, 115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 97, 112, 105, 46, 109, 111, 100, 101, 108, 46, 83, 101, 99, 117, 114, 105, 116, 121, 36, 83, 101, 99, 73, 100, 46, 32, 85, 115, 101, 32, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 41, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 120, 112, 108, 105, 99, 105, 116, 32, 84, 121, 112, 101, 115, 32, 118, 97, 108, 117, 101, 32, 116, 111, 32, 115, 112, 101, 99, 105, 102, 121, 32, 116, 104, 101, 32, 116, 121, 112, 101, 32, 116, 111, 32, 117, 115, 101, 46, 10, 9, 97, 116, 32, 111, 114, 103, 46, 112, 111, 115, 116, 103, 114, 101, 115, 113, 108, 46, 106, 100, 98, 99, 46, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 80, 103, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 58, 49, 48, 49, 53, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 122, 97, 120, 120, 101, 114, 46, 104, 105, 107, 97, 114, 105, 46, 112, 111, 111, 108, 46, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 72, 105, 107, 97, 114, 105, 80, 114, 111, 120, 121, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 46, 106, 97, 118, 97, 41, 10, 9, 97, 116, 32, 99, 111, 109, 46, 112, 54, 115, 112, 121, 46, 101, 110, 103, 105, 110, 101, 46, 119, 114, 97, 112, 112, 101, 114, 46, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 115, 101, 116, 79, 98, 106, 101, 99, 116, 40, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 87, 114, 97, 112, 112, 101, 114, 46, 106, 97, 118, 97, 58, 51, 52, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 86, 97, 108, 117, 101, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 52, 49, 53, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 86, 97, 108, 117, 101, 73, 110, 116, 101, 114, 110, 97, 108, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 50, 51, 55, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 115, 101, 116, 80, 97, 114, 97, 109, 101, 116, 101, 114, 86, 97, 108, 117, 101, 40, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 85, 116, 105, 108, 115, 46, 106, 97, 118, 97, 58, 49, 53, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 70, 97, 99, 116, 111, 114, 121, 36, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 73, 109, 112, 108, 46, 115, 101, 116, 86, 97, 108, 117, 101, 115, 40, 80, 114, 101, 112, 97, 114, 101, 100, 83, 116, 97, 116, 101, 109, 101, 110, 116, 67, 114, 101, 97, 116, 111, 114, 70, 97, 99, 116, 111, 114, 121, 46, 106, 97, 118, 97, 58, 50, 55, 56, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 110, 97, 109, 101, 100, 112, 97, 114, 97, 109, 46, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 36, 49, 46, 115, 101, 116, 86, 97, 108, 117, 101, 115, 40, 78, 97, 109, 101, 100, 80, 97, 114, 97, 109, 101, 116, 101, 114, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 51, 56, 50, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 108, 97, 109, 98, 100, 97, 36, 98, 97, 116, 99, 104, 85, 112, 100, 97, 116, 101, 36, 52, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 49, 48, 52, 52, 41, 10, 9, 97, 116, 32, 111, 114, 103, 46, 115, 112, 114, 105, 110, 103, 102, 114, 97, 109, 101, 119, 111, 114, 107, 46, 106, 100, 98, 99, 46, 99, 111, 114, 101, 46, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 101, 120, 101, 99, 117, 116, 101, 40, 74, 100, 98, 99, 84, 101, 109, 112, 108, 97, 116, 101, 46, 106, 97, 118, 97, 58, 54, 53, 48, 41, 10, 9, 46, 46, 46, 32, 53, 49, 32, 109, 111, 114, 101, 10]), RecordHeader(key = kafka_dlt-original-topic, value = [109, 100, 46, 115, 101, 99, 117, 114, 105, 116, 121, 46, 100, 97, 116, 97, 46, 98, 97, 116, 99, 104]), RecordHeader(key = kafka_dlt-original-partition, value = [0, 0, 0, 0]), RecordHeader(key = kafka_dlt-original-offset, value = [0, 0, 0, 0, 0, 0, 0, 5]), RecordHeader(key = kafka_dlt-original-timestamp, value = [0, 0, 1, -115, 122, 14, 116, -86]), RecordHeader(key = kafka_dlt-original-timestamp-type, value = [67, 114, 101, 97, 116, 101, 84, 105, 109, 101]), RecordHeader(key = kafka_dlt-original-consumer-group, value = [115, 101, 99, 117, 114, 105, 116, 105, 101, 115, 45, 97, 112, 105])], isReadOnly = false), key = null, value = {
  "status": "SECURITY_FOUND",
  "integrationSource": "NSD",
  "isin": "RU0001011101",
  "timestamp": "2020-02-01T00:00:00",
  "security": {
    "isin": "RU0001011101",
    "name": "MINFIN ROSSII 2 31/10/20",
    "type": "NSEC",
    "active": true,
    "statusDescription": "Размещен",
    "fields": [
      
        {
          "code": "FACE_VALUE"
          
          , "value": "999999999999999999.99" 
          
        } 
      
    ]
  }
}), sending to DLQ: md.security.data.dlq-0
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEvent)' threw exception; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.; nested exception is org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:2720)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2690)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:2650)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:2577)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:2457)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:2335)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:2006)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeIfHaveRecords(KafkaMessageListenerContainer.java:1375)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:1366)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:1257)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.springframework.jdbc.BadSqlGrammarException: PreparedStatementCallback; bad SQL grammar [
    merge into security as sec
    using (
        with
          ids as (select distinct security from security_id where id in (?)),
          src as (select id from source where code = ?)
        select
            ids.security as sec_id,
            src.id as source,
            ? as uid,
            ? as name,
            ? as type,
            ? as is_active,
            ? as status_desc
        from src left join ids on true) inc
    on (sec.id = inc.sec_id)
    when matched then
        update set
            name = inc.name,
            type = inc.type,
            updated_at = current_timestamp,
            is_active = inc.is_active,
            status_description = inc.status_desc,
            source = inc.source
    when not matched then
        insert (isin, name, type, is_active, status_description, source)
        values (inc.uid, inc.name, inc.type, inc.is_active, inc.status_desc, inc.source)
    ]; nested exception is org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:82)
	at org.springframework.jdbc.core.JdbcTemplate.translateException(JdbcTemplate.java:1577)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:669)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:693)
	at org.springframework.jdbc.core.JdbcTemplate.batchUpdate(JdbcTemplate.java:1036)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.batchUpdate(NamedParameterJdbcTemplate.java:376)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository.saveSecurities(SecurityRepository.kt:130)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$FastClassBySpringCGLIB$$cf05edcd.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.repository.SecurityRepository$$EnhancerBySpringCGLIB$$f93bb35d.saveSecurities(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.prioritiesAwareSave(SecurityService.kt:108)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.save(SecurityService.kt:99)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService.saveSecurity(SecurityService.kt:75)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$FastClassBySpringCGLIB$$2d616b1b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:388)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at ru.alfacapital.mda.api.securitiesapi.service.SecurityService$$EnhancerBySpringCGLIB$$a41af972.saveSecurity(<generated>)
	at ru.alfacapital.mda.api.securitiesapi.listener.SecurityDataEventListener.securityDataEvent(SecurityDataListener.kt:26)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:169)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:119)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:56)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:347)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:92)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:53)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$FastClassBySpringCGLIB$$cde8c01d.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:792)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.cloud.sleuth.brave.instrument.messaging.MessageListenerMethodInterceptor.invoke(MessageListenerMethodInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:762)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:707)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter$$EnhancerBySpringCGLIB$$c86dae06.onMessage(<generated>)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:2670)
	... 11 common frames omitted
Caused by: org.postgresql.util.PSQLException: Can't infer the SQL type to use for an instance of ru.alfacapital.mda.api.securitiesapi.model.Security$SecId. Use setObject() with an explicit Types value to specify the type to use.
	at org.postgresql.jdbc.PgPreparedStatement.setObject(PgPreparedStatement.java:1015)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setObject(HikariProxyPreparedStatement.java)
	at com.p6spy.engine.wrapper.PreparedStatementWrapper.setObject(PreparedStatementWrapper.java:347)
	at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:415)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:237)
	at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:152)
	at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:278)
	at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate$1.setValues(NamedParameterJdbcTemplate.java:382)
	at org.springframework.jdbc.core.JdbcTemplate.lambda$batchUpdate$4(JdbcTemplate.java:1044)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:650)
	... 60 common frames omitted
19:16:41.491 [SpringApplicationShutdownHook] INFO  o.s.b.w.e.tomcat.GracefulShutdown.shutDownGracefully - Commencing graceful shutdown. Waiting for active requests to complete
